[
    {
        "query": "查看室外摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse=0 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id  limit 1000;\n```\n这是一段SQL语句，用于从多个表格中查询室外摄像头的相关信息。以下是各部分解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼`：这是选择要查询的列，包括摄像头的ID（作为摄像头编号）、安装位置的名称（来自房间表）和所在大楼的名称（来自楼栋表）。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid=单位表.id`：这部分定义了数据来源。通过JOIN操作符将摄像头表（s_camera）、房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）连接在一起。连接的依据是摄像头表中的pid字段与其它表的主键相等。\n\n3. `where 摄像头表.inhouse=0 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这部分设置了查询条件，即只返回室外摄像头（inhouse字段值为0）、位于“高新校区”且属于“中国科学技术大学”的摄像头。\n\n4. `order by 摄像头表.id`：按照摄像头的ID进行排序。\n\n5. `limit 1000`：限制查询结果的数量，最多返回1000条记录。"
    },
    {
        "query": "没有人的室外摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从多个表中获取特定条件下的数据。以下是各子句的简要解释：\n\n1. `select`：定义要返回的数据列。这里选择了4个列：摄像头编号、安装位置、所属大楼和区域。\n\n2. `from`：指定要查询的表。这里有5个表需要连接：摄像头表（s_camera）、房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）。\n\n3. `join`：连接表之间的关系。这里是通过摄像头表的pid与房间表的id相等进行连接，然后房间表的pid与楼栋表的id相等进行连接，接着楼栋表的pid与区域表的id相等进行连接，最后区域表的pid与单位表的id相等进行连接。\n\n4. `where`：设定查询条件。这里的条件包括：摄像头在室内（inhouse = 0），摄像头的ID不在过去10分钟内有人经过的摄像头列表中，区域名为“高新校区”，单位为“中国科学技术大学”。\n\n5. `order by`：对结果进行排序。这里按摄像头编号（id）升序排列。\n\n6. `limit`：限制返回的结果数量。这里限制返回最多1000条记录。\n\n综上所述，这段SQL语句是查询在“高新校区”的中国科学技术大学的非室内摄像头信息，并过滤掉过去10分钟内有人经过的摄像头，且按照摄像头编号升序排列，返回前1000条记录。"
    },
    {
        "query": "找出学生食堂一个月内，每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于查找学生食堂在一个月内的每日最高人数。以下是各部分的解释：\n\n1. `SELECT`: 选择要返回的列。在这个例子中，选择了两个列：`min(人数分布表.stat_time) as 统计时间`和`round(max(人数分布表.num)) as 平均人数`。\n\n2. `FROM`: 从哪个表中获取数据。在这个例子中，从`a_people_spread_day_building`表（简称“人数分布表”）获取数据。\n\n3. `WHERE`: 设置查询条件。在这个例子中，查询条件包括：`building_name='学生食堂'`表示只查询学生食堂的数据；`DATEDIFF(now(), 人数分布表.stat_time) < 30`表示只查询过去30天的数据；`region_name='高新校区'`和`org_name='中国科学技术大学'`表示只查询特定地点的数据。\n\n4. `GROUP BY`: 根据某个字段对数据进行分组。在这个例子中，根据`人数分布表.stat_day`进行分组，这样可以计算出每天的最高人数。\n\n5. `ORDER BY`: 对结果按照某个字段进行排序。在这个例子中，按照`min(人数分布表.stat_time)`进行升序排序，即先按日期排序，然后在同一天内按照人数升序排序。\n\n这个查询的结果是，在学生食堂过去30天内，每天的最高人数及其对应的统计时间。"
    },
    {
        "query": "整个校区有多少个房间安装了摄像头？",
        "script": "```sql\nselect count(distinct 房间表.id) as 安装了摄像头的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算某个校区（这里是高新校区）中安装摄像头的房间数量。以下是各子句的解释：\n\n1. `select`：开始一个查询。\n2. `count(distinct 房间表.id) as 安装了摄像头的房间数量`：计算房间表中不重复的id的数量，作为查询结果。\n3. `from s_camera as 摄像头表`：指定查询的数据来源，摄像头表是摄像头相关的数据表。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表和房间表通过它们的主键（id）进行连接。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将房间表和楼栋表通过房间所属楼栋的主键进行连接。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将楼栋表和区域表通过楼栋所属区域的主键进行连接。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将区域表和单位表通过区域所属单位的主键进行连接。\n8. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，只返回属于高新校区且属于中国科学技术大学的摄像头的房间信息。"
    },
    {
        "query": "信智楼有多少人不戴帽子？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='未戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个复杂的SQL查询语句，用于计算某个时间范围内（比如过去五分钟）在特定地点（如信智楼）、特定单位（如中国科学技术大学的高新校区）的人员数量，其中不戴帽子的人员数量。\n\n这个查询涉及到的表格和字段包括：\n\n1. `d_people`: 人员表，包含人员的信息，如摄像头ID等；\n2. `s_camera`: 摄像头表，存储摄像头的ID等信息；\n3. `s_room`: 房间表，存储每个房间的ID等信息；\n4. `s_building`: 楼栋表，存储每个楼栋的ID等信息；\n5. `s_region`: 区域表，存储每个区域的ID等信息；\n6. `s_organization`: 单位表，存储每个单位的ID等信息；\n7. `t_hat`: 帽子维表，存储帽子的ID和名称等信息；\n\n查询的主要部分是`count(*) as 戴帽子人数`，它通过连接多个表，找出在特定时间段内、特定地点、特定单位的人员数量。同时，它还通过`where`条件过滤出未戴帽子的人，即`帽子维表.name='未戴帽子'`。最后，将结果按照指定的格式返回。"
    },
    {
        "query": "有多少行人未背包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于计算在某个特定时间和区域内未背包的行人人数。以下是各个子句的解释：\n\n1. `select count(*) as 背双肩包的人数`：返回满足条件的行人的总数，将结果命名为“背双肩包的人数”。\n2. `from d_people as 人员表`：定义源表为d_people，别名设置为“人员表”。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接s_camera表（摄像头表），条件是人员表的camera_id等于摄像头表的id。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接s_room表（房间表），条件是摄像头表的pid等于房间表的id。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接s_building表（楼栋表），条件是房间表的pid等于楼栋表的id。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接s_region表（区域表），条件是楼栋表的pid等于区域表的id。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接s_organization表（单位表），条件是区域表的pid等于单位表的id。\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`：连接t_bag表（背包维表），条件是人员表的bag等于背包维表的id。\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包'`：设置筛选条件，要求时间差（人员表中的moment字段和当前时间的差值）小于5分钟且背包维表的name字段值为'未背包'。\n10. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：进一步限制条件，要求区域表的region_name字段值为'高新校区'且单位表的org_name字段值为'中国科学技术大学'。"
    },
    {
        "query": "近期识别到多少戴帽子的行人？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于统计最近5分钟内（时间差小于5分钟）在高新校区的中国科学技术大学范围内，戴帽子的行人数量。以下是各子句的详细解析：\n\n1. `select count(*) as 戴帽子人数`: 选择计数函数count()作为查询结果，将返回的行数命名为\"戴帽子人数\"。\n\n2. `from d_people as 人员表`: 从d_people表（暂且称为“人员表”）开始查询。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接s_camera表（暂且称为“摄像头表”），连接条件是人员表的camera_id与摄像头表的id相等。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表（暂且称为“房间表”），连接条件是摄像头表的pid与房间表的id相等。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表（暂且称为“楼栋表”），连接条件是房间表的pid与楼栋表的id相等。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表（暂且称为“区域表”），连接条件是楼栋表的pid与区域表的id相等。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表（暂且称为“单位表”），连接条件是区域表的pid与单位表的id相等。\n\n8. `join t_hat as 帽子维表 on 人员表.hat=帽子维表.id`: 连接t_hat表（暂且称为“帽子维表”），连接条件是人员表的hat属性与帽子维表的id属性相等。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='戴帽子' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求时间差（当前时间与人员表记录的moment字段的时间差）小于5分钟，并且帽子维表的name字段值为'戴帽子'，同时区域表的区域名和单位的单位名称必须分别是'高新校区'和'中国科学技术大学'。"
    },
    {
        "query": "给出图教中心的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算\"图教中心\"的摄像头数量。以下是各部分详解：\n\n1. `select count(*) as 摄像头数量`：选择计数函数count(*)，并为其赋予别名“摄像头数量”，即将返回的结果集命名为摄像头数量。\n2. `from s_camera as 摄像头表`：从s_camera这张表中选取数据，并将该表称为“摄像头表”。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表与房间表通过on子句中的条件（摄像头表的pid等于房间表的id）进行连接。连接后，两个表的数据行将合并，形成一个更大范围的数据集。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：同样地，将房间表与楼栋表进行连接。这次连接的条件是房间表的pid等于楼栋表的id。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：继续将楼栋表与区域表进行连接。连接条件是楼栋表的pid等于区域表的id。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：最后，将区域表与单位表进行连接。连接条件是区域表的pid等于单位表的id。\n7. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：在以上连接形成的较大数据集中，筛选出满足特定条件的记录。即：要求楼栋表的building_name为\"图教中心\"，区域表的region_name为\"高新校区\"，单位表的org_name为\"中国科学技术大学\"。\n8. `;`：SQL语句的结束符号。"
    },
    {
        "query": "查看行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从多个表中获取并展示行人的轨迹信息。以下是各个子句的解释：\n\n1. `SELECT`: 选择要返回的字段，包括轨迹的起始和结束时间、虚拟人名（可能是一个编号或者标识符）以及经过的摄像头ID列表。\n\n2. `FROM`: 指定数据来源表。这里是`a_people_trail`，也就是“行人轨迹表”。\n\n3. `JOIN`: 连接其他表以获取更多相关数据。这里分别连接了`s_camera`（摄像头表），`s_room`（房间表），`s_building`（楼栋表），`s_region`（区域表）和`s_organization`（单位表）。\n\n4. `ON`: 定义连接条件，例如`行人轨迹表.start_camera_id = 摄像头表.id`，表示一个行人轨迹的开始和结束的摄像头ID需要对应摄像头的唯一标识。\n\n5. `WHERE`: 设置过滤条件，即只显示满足条件的数据。这里设定的是区域名为\"高新校区\"且单位为\"中国科学技术大学\"的数据。\n\n6. `ORDER BY`: 对结果按照某个字段进行排序，这里是按照轨迹的起始时间降序排列。\n\n7. `LIMIT`: 限制返回的结果数量，这里是返回前10条记录。"
    },
    {
        "query": "师生服务中心监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算\"行政与师生服务中心\"的摄像头数量。具体来说，它通过连接5张表（s_camera, s_room, s_building, s_region, s_organization）来实现这个目标。以下是各表和连接条件的解释：\n\n1. s_camera（摄像头表）：存储摄像头的基本信息；\n2. s_room（房间表）：存储各个房间的信息，其中有一个字段表示该房间是否有安装摄像头（即摄像头表的pid）；\n3. s_building（楼栋表）：存储楼栋信息，包括每个楼栋的唯一标识（即房间表的pid）；\n4. s_region（区域表）：存储校区信息，包括每个区域的唯一标识（即楼栋表的pid）；\n5. s_organization（单位表）：存储学校信息，包括学校的唯一标识（即区域表的pid）。\n\n查询条件部分，`where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`，表示只统计位于\"行政与师生服务中心\"、\"高新校区\"和\"中国科学技术大学\"的摄像头数量。最后使用`count(*) as 摄像头数量`来计算满足这些条件的摄像头总数。"
    },
    {
        "query": "信智楼有多少行人持物？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于计算“信智楼”内当前手持物品的行人人数。以下是各部分解释：\n\n1. `select count(*) as 手里拿东西的人数`: 选择行计数（总人数）作为结果，将其命名为\"手里拿东西的人数\"。\n\n2. `from d_people as 人员表`: 从名为\"d_people\"的表中开始查询，将这个表简称为\"人员表\"。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接名为\"s_camera\"的表，连接条件是\"人员表\"中的\"camera_id\"与\"摄像头表\"中的\"id\"相等。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接名为\"s_room\"的表，连接条件是\"摄像头表\"中的\"pid\"与\"房间表\"中的\"id\"相等。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接名为\"s_building\"的表，连接条件是\"房间表\"中的\"pid\"与\"楼栋表\"中的\"id\"相等。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接名为\"s_region\"的表，连接条件是\"楼栋表\"中的\"pid\"与\"区域表\"中的\"id\"相等。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接名为\"s_organization\"的表，连接条件是\"区域表\"中的\"pid\"与\"单位表\"中的\"id\"相等。\n\n8. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`: 连接名为\"t_hold_object\"的表，连接条件是\"人员表\"中的\"hold_obj\"与\"持物维表\"中的\"id\"相等。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 限制查询时间，即只考虑过去5分钟内的数据。\n\n10. `and 持物维表.name='持物'`: 筛选出持有物品的人，即\"持物维表\"中\"name\"字段值为\"持物\"的数据。\n\n11. `and 区域表.region_name='高新校区'`: 限定查询区域为\"高新校区\"。\n\n12. `and 单位表.org_name='中国科学技术大学'`: 限定查询单位为\"中国科学技术大学\"。\n\n13. `and 楼栋表.building_name='信智楼'`: 限定查询楼栋为\"信智楼\"。"
    },
    {
        "query": "统计图书馆每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取某图书馆（假设名为“图书教育中心”）在最近30天内每天的最少人数。下面是各个部分的解释：\n\n1. `SELECT`：选择要返回的列。在这个例子中，选择了两个列：`统计时间`和`平均人数`。\n\n2. `MIN()`：这是聚合函数之一，用于找到每个分组中最小值。在这个例子中，我们用它来找出每天的最少人数。\n\n3. `FROM`：指定数据所在的表。在这里，数据来自一个名为`a_people_spread_day_building`的表，我们称之为`人数分布表`。\n\n4. `WHERE`：设置筛选条件。在这个例子中，筛选条件包括：建筑名称为“图书教育中心”，距离现在的时间（即`DATEDIFF(now(), 人数分布表.stat_time)`）小于30天，所在区域为“高新校区”，组织名称为“中国科学技术大学”。\n\n5. `GROUP BY`：按照某个字段对数据进行分组。在这里，我们按照日期（`人数分布表.stat_day`）进行分组。\n\n6. `ORDER BY`：按照某个字段对结果进行排序。在这里，我们按照统计时间的升序（即从小到大）对结果进行排序。\n\n7. `ASC`：表示升序。如果不写这个关键字，默认是升序。"
    },
    {
        "query": "最常发生的异常行为是哪些类型？",
        "script": "```sql\nselect 异常类型表.name as 异常行为类型 from d_abnormal_behavior as 异常行为表 join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by count(*) desc  limit 10;\n```\n这是一个复杂的SQL查询语句，用于从多个表中获取数据并执行一定的统计和排序操作。下面是对这个SQL语句的详细解释：\n\n1. `d_abnormal_behavior`: 这个表存储了异常的摄像机行为信息，包括camera_id、abnormal_type等字段。\n2. `s_camera`: 这个表存储了摄像头的设备信息，包括id、pid（所属房间）等字段。\n3. `s_room`: 这个表存储了房间的信息，包括id、pid（所属楼栋）等字段。\n4. `s_building`: 这个表存储了楼栋的信息，包括id、pid（所属区域）等字段。\n5. `s_region`: 这个表存储了区域的信息，包括id、pid（所属单位）等字段。\n6. `s_organization`: 这个表存储了单位的信息，包括id、org_name等字段。\n7. `t_abnormal_type`: 这个表存储了异常的类型信息，包括id、name等字段。\n\n这个SQL查询的主要目的是找出某个特定区域（这里以“高新校区”为例）和单位（这里以“中国科学技术大学”为例）中最常发生的异常行为类型，并按照出现次数进行降序排列。具体实现如下：\n\n1. 首先，通过连接（JOIN）操作将上述表格关联起来，形成一个大的数据集。\n2. 然后，通过WHERE条件筛选出满足特定区域和单位的数据。\n3. 接着，使用GROUP BY子句按异常类型对表进行分组，并通过COUNT(*)函数计算每种异常类型的出现次数。\n4. 使用ORDER BY子句按照异常类型出现的次数进行降序排列。\n5. 最后，使用LIMIT子句限制返回结果的条数（这里限制为10条）。"
    },
    {
        "query": "教师食堂摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于统计某特定区域的摄像头的数量。以下是各子句的详细解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数COUNT(*)作为结果，并将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`: 指定数据来源是摄像头表（s_camera）。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和房间表，连接条件是摄像头表的主键（PID）等于房间表的主键（ID）。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表和楼栋表，连接条件是房间表的PID等于楼栋表的ID。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表和区域表，连接条件是楼栋表的PID等于区域表的ID。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表和单位表，连接条件是区域表的PID等于单位表的ID。\n\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，即楼栋名称为“教工食堂”，区域名称为“高新校区”，单位名称为中国科学技术大学。\n\n整个查询语句的目的是计算满足这些条件的摄像头数量。"
    },
    {
        "query": "安装了哪些监控点位？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) desc;\n```\n这是一段 SQL 查询语句，用于查询某学校（中国科学技术大学）某个校区（高新校区）的摄像头安装情况。具体解释如下：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量`: 选择楼宇名称和摄像头数量作为查询结果中的列；\n2. `from s_camera as 摄像头表`: 从名为 s_camera 的表格开始查询；\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接 s_room 表格到查询，连接条件是摄像头表的主键（假设为 pid）等于房间表的 id；\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接 s_building 表格到查询，连接条件是房间表的 pid 等于楼栋表的 id；\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接 s_region 表格到查询，连接条件是楼栋表的 pid 等于区域表的 id；\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接 s_organization 表格到查询，连接条件是区域表的 pid 等于单位表的 id；\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设定查询条件，即要求查询的数据属于 \"高新校区\" 和 \"中国科学技术大学\"；\n8. `group by 楼栋表.building_name`: 对查询结果按照楼宇名称进行分组；\n9. `order by count(*) desc`: 对每个楼宇的摄像头数量进行降序排列。\n\n这个查询的结果将显示所有高新校区的中国科学技术大学内楼宇的名称以及该楼宇安装的摄像头数量，并按照摄像头数量的多少进行排序。"
    },
    {
        "query": "师生服务中心安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 查询语句，用于计算\"行政与师生服务中心\"的摄像头数量。下面是对这段 SQL 的解释：\n\n1. `select count(*) as 摄像头数量`: 选择 COUNT(*) 函数来计算满足条件的摄像头的总数，并将结果命名为 \"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`: 从名为 \"s_camera\" 的表格（摄像头表）开始查询。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接 \"摄像头表\" 和 \"房间表\"，基于 \"摄像头表\" 的 pid 字段等于 \"房间表\" 的 id 字段进行匹配。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接 \"房间表\" 和 \"楼栋表\"，基于 \"房间表\" 的 pid 字段等于 \"楼栋表\" 的 id 字段进行匹配。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接 \"楼栋表\" 和 \"区域表\"，基于 \"楼栋表\" 的 pid 字段等于 \"区域表\" 的 id 字段进行匹配。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接 \"区域表\" 和 \"单位表\"，基于 \"区域表\" 的 pid 字段等于 \"单位表\" 的 id 字段进行匹配。\n\n7. `where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只返回满足以下三个条件的数据：楼栋名称为 \"行政与师生服务中心\"，区域名称为 \"高新校区\"，单位名称为 \"中国科学技术大学\"。\n\n综上所述，该 SQL 语句将计算出满足特定条件的摄像头数量，即位于\"行政与师生服务中心\"、\"高新校区\"和\"中国科学技术大学\"的摄像头数量。"
    },
    {
        "query": "哪栋建筑安装的摄像头最多？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) desc  limit 1;\n```\n这是一段 SQL 查询语句，用于查询某区域内某个单位中安装摄像头最多的楼宇。下面是对这段 SQL 的解释：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量`: 选择两个列，一个是楼宇名称（实际是使用了 AS 关键字将其重命名为 \"楼宇名称\"），另一个是摄像头的数量。\n\n2. `from s_camera as 摄像头表`: 从名为 \"s_camera\" 的表中开始查询，这里将这个表暂时称为 \"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将名为 \"s_room\" 的表与 \"摄像头表\" 进行连接，连接条件是摄像头表中的 pid（可能是代表摄像机编号的字段）等于房间表中的 id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将名为 \"s_building\" 的表与 \"房间表\" 进行连接，连接条件是房间表中的 pid 等于楼栋表中的 id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将名为 \"s_region\" 的表与 \"楼栋表\" 进行连接，连接条件是楼栋表中的 pid 等于区域表中的 id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将名为 \"s_organization\" 的表与 \"区域表\" 进行连接，连接条件是区域表中的 pid 等于单位表中的 id。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 限制查询结果，只返回满足特定条件的记录，即区域名称为 \"高新校区\"，单位名称是 \"中国科学技术大学\"。\n\n8. `group by 楼栋表.building_name`: 按照楼宇名称对结果进行分组。\n\n9. `order by count(*) desc`: 对每组数据按照摄像头数量的降序排列。\n\n10. `limit 1`: 限制查询结果返回的最多条数，这里是 1，表示只返回一条记录，也就是摄像头数量最多的那栋楼宇的信息。"
    },
    {
        "query": "有多少人手里拿东西？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于计算满足特定条件的手中持有物品的人数。以下是各部分解释：\n\n1. select count(*) as 手里拿东西的人数: 选择计数函数（count）对结果集进行统计，返回手里拿着物品的人数。\n2. from d_people as 人员表: 从d_people表开始查询，将其简称为“人员表”。\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 连接s_camera表，连接条件是人员表的camera_id等于摄像头表的id。\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接s_room表，连接条件是摄像头表的pid等于房间表的id。\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接s_building表，连接条件是房间表的pid等于楼栋表的id。\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接s_region表，连接条件是楼栋表的pid等于区域表的id。\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接s_organization表，连接条件是区域表的pid等于单位表的id。\n8. join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id: 连接t_hold_object表，连接条件是人员表的hold_obj等于持物维表的id。\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5: 过滤条件，限制查询结果中时间差小于5分钟的数据。这个条件表示只考虑距离当前时刻不超过5分钟的数据。\n10. and 持物维表.name='持物': 过滤条件，限制查询结果中只有名字为“持物”的记录。\n11. and 区域表.region_name='高新校区': 过滤条件，限制查询结果中只有区域名为“高新校区”的记录。\n12. and 单位表.org_name='中国科学技术大学': 过滤条件，限制查询结果中只有单位名称（组织名称）为“中国科学技术大学”的记录。\n\n综上所述，该SQL查询将返回在高新校区的中国科学技术大学的范围内，最近5分钟内手中持有物品的师生人数。"
    },
    {
        "query": "信智楼5分钟内识别到多少挎单肩包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段用于查询的SQL语句，目的是在5分钟之内识别出位于信智楼的、携带单肩包的行人数量。以下是各子句的解释：\n\n1. `select count(*) as 背双肩包的人数`: 选择计数函数COUNT(*)，并设置结果为“背双肩包的人数”。\n\n2. `from d_people as 人员表`: 指定数据源为\"d_people\"表，并将其简称为“人员表”。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接\"s_camera\"表（摄像头信息），连接条件是人员表的camera_id等于摄像头表的id。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接\"s_room\"表（摄像头所在房间信息），连接条件是摄像头表的pid等于房间表的id。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接\"s_building\"表（楼栋信息），连接条件是房间表的pid等于楼栋表的id。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接\"s_region\"表（区域信息），连接条件是楼栋表的pid等于区域表的id。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接\"s_organization\"表（单位信息），连接条件是区域表的pid等于单位表的id。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`: 连接\"t_bag\"表（背包类型信息），连接条件是人员表的bag等于背包维表的id。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包'`: 过滤条件，限制结果是在过去5分钟内的数据，并且被识别人的背包类型为“单肩包”。\n\n10. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 附加过滤条件，限制结果是发生在\"高新校区\"的\"中国科学技术大学\"的\"信智楼\"的数据。\n\n综合以上信息，这段SQL将返回在过去5分钟内在信智楼识别出的携带单肩包的行人数量。"
    },
    {
        "query": "7号学生公寓摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从数据库中获取满足特定条件的摄像头数量。以下是各子句的详细解释：\n\n1. SELECT: 选择需要返回的数据。这里选择的是COUNT(*)函数，用于计算满足WHERE子句条件的摄像头的数量。\n\n2. FROM: 指定要查询的表。这里是四个关联表的连接（JOIN）结果，分别是：s_camera（摄像头表），s_room（房间表），s_building（楼栋表），s_region（区域表）和s_organization（单位表）。\n\n3. JOIN: 用于将两个或多个表的行组合起来。这里通过ON子句定义了各个表之间的关系。例如，摄像头表与房间表通过pid字段连接；房间表与楼栋表通过pid字段连接；楼栋表与区域表通过pid字段连接；区域表与单位表通过pid字段连接。\n\n4. WHERE: 设定查询条件。只有满足这些条件的记录才会被查询出来。这里的条件是：楼栋名称为“7号学生公寓”，区域名称为“高新校区”，单位名称为中国科学技术大学。\n\n5. AS: 为查询结果设置别名。例如，将摄像头表的结果设置为\"摄像头数量\"。"
    },
    {
        "query": "6号学生公寓安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算6号学生公寓的监控数量。以下是各子句的解释：\n\n1. select count(*) as 摄像头数量: 选择计数函数count(*)来计算摄像头的数量，并将结果命名为“摄像头数量”。\n\n2. from s_camera as 摄像头表: 从s_camera表中获取数据，将这个表命名为“摄像头表”。\n\n3. join s_room as 房间表: 联接s_room表，将其命名为“房间表”。\n\n4. on 摄像头表.pid=房间表.id: 连接两个表的依据是摄像头表中的pid（设备ID）等于房间表中的id（房间ID）。\n\n5. join s_building as 楼栋表: 联接s_building表，将其命名为“楼栋表”。\n\n6. on 房间表.pid=楼栋表.id: 连接两个表的依据是房间表中的pid（设备ID）等于楼栋表中的id（楼栋ID）。\n\n7. join s_region as 区域表: 联接s_region表，将其命名为“区域表”。\n\n8. on 楼栋表.pid=区域表.id: 连接两个表的依据是楼栋表中的pid（设备ID）等于区域表中的id（区域ID）。\n\n9. join s_organization as 单位表: 联接s_organization表，将其命名为“单位表”。\n\n10. on 区域表.pid=单位表.id: 连接两个表的依据是区域表中的pid（设备ID）等于单位表中的id（单位ID）。\n\n11. where 楼栋表.building_name='6号学生公寓': 设置条件，只选择楼栋名称为“6号学生公寓”的数据。\n\n12. and 区域表.region_name='高新校区': 设置条件，只选择区域名称为“高新校区”的数据。\n\n13. and 单位表.org_name='中国科学技术大学': 设置条件，只选择单位名称（或组织名称）为“中国科学技术大学”的数据。"
    },
    {
        "query": "给出信智楼的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于查询“信智楼”的摄像头数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数（count）作为返回的结果，将结果命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`：声明数据来源是名为\"s_camera\"的摄像头表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过摄像头表与房间表的pid字段相等联接这两个表，其中房间表被重命名为\"房间表\"。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：通过房间表与楼栋表的pid字段相等联接这两个表，其中楼栋表被重命名为\"楼栋表\"。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过楼栋表与区域表的pid字段相等联接这两个表，其中区域表被重命名为\"区域表\"。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：通过区域表与单位表的pid字段相等联接这两个表，其中单位表被重命名为\"单位表\"。\n\n7. `where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，只选择满足条件的记录，即：楼栋名称是\"信智楼\"、区域名称是\"高新校区\"、单位名称是\"中国科学技术大学\"的数据。"
    },
    {
        "query": "行政办公楼总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算\"行政办公楼\"的摄像头数量。以下是各部分解释：\n\n1. select count(*) as 摄像头数量：选择计数函数`count(*)`作为结果，并为其取名为\"摄像头数量\"。\n2. from s_camera as 摄像头表：从s_camera表开始查询，将其简称为\"摄像头表\"。\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id：连接s_room表（简称\"房间表\"），连接条件是摄像头表的pid字段等于房间表的id字段。\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：连接s_building表（简称\"楼栋表\"），连接条件是房间表的pid字段等于楼栋表的id字段。\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id：连接s_region表（简称\"区域表\"），连接条件是楼栋表的pid字段等于区域表的id字段。\n6. join s_organization as 单位表 on 区域表.pid=单位表.id：连接s_organization表（简称\"单位表\"），连接条件是区域表的pid字段等于单位表的id字段。\n7. where 楼栋表.building_name='行政办公楼'：设置过滤条件，要求楼栋表的building_name字段值为\"行政办公楼\"。\n8. and 区域表.region_name='高新校区'：继续设置过滤条件，要求区域表的region_name字段值为\"高新校区\"。\n9. and 单位表.org_name='中国科学技术大学'：再设过滤条件，要求单位表的org_name字段值为\"中国科学技术大学\"。\n\n综合以上，这个查询语句将计算出在满足条件的\"行政办公楼\"、\"高新校区\"和\"中国科学技术大学\"中安装的摄像头的总数。"
    },
    {
        "query": "4号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个关联表中计算并获取满足特定条件的摄像头数量。下面是对各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数count()，计算匹配条件的摄像头的数量，并将结果命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`：指定查询的主表，即存储摄像头信息的s_camera表，为了方便后续引用，将其简称为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过摄像头表的pid字段与房间表的id字段关联，将摄像头与对应的房间信息连接在一起。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：同样地，通过房间表的pid字段与楼栋表的id字段关联，将房间与对应的楼栋信息连接在一起。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：继续通过楼栋表的pid字段与区域表的id字段关联，将楼栋与对应的地域信息连接在一起。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：最后，通过区域表的pid字段与单位表的id字段关联，将地域与对应的单位信息连接在一起。\n\n7. `where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设定查询条件，只考虑满足以下三个条件的摄像头：所在楼栋名为\"4号学生公寓\"，所在地域名为\"高新校区\"，所属单位为\"中国科学技术大学\"。\n\n综上所述，这个SQL查询语句的目的是在满足特定条件的4号学生公寓中，计算并获取摄像头数量。"
    },
    {
        "query": "教师食堂安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算教工食堂在特定校区和单位的摄像头数量。以下是各个部分的具体解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数count(*)作为结果，并给这个结果一个别名\"摄像头数量\"，以便后续使用。\n\n2. `from s_camera as 摄像头表`: 从名为s_camera的表中获取数据，这里将这个表称为“摄像头表”，方便后续引用。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将摄像头表与另一个名为s_room的表（这里称为“房间表”）通过摄像头表的pid字段与房间表的id字段相等进行连接。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 同样地，将房间表与另一个名为s_building的表（这里称为“楼栋表”）通过房间表的pid字段与楼栋表的id字段相等进行连接。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 继续执行类似的操作，将楼栋表与另一个名为s_region的表（这里称为“区域表”）通过楼栋表的pid字段与区域表的id字段相等进行连接。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 最后，将区域表与另一个名为s_organization的表（这里称为“单位表”）通过区域表的pid字段与单位表的id字段相等进行连接。\n\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 在上述连接的基础上，设置筛选条件，即要求楼栋名称为“教工食堂”，区域名称为“高新校区”，单位名称为“中国科学技术大学”。只有满足这些条件的记录才会被包含在最终的结果中。\n\n综上所述，这条SQL语句的目的是计算特定校区和单位中教工食堂的摄像头数量。"
    },
    {
        "query": "找出图书教育中心一个月内，每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中查找图书教育中心在一个月内每天最少的人数。以下是各部分的具体含义：\n\n1. `select`: 选择要返回的列。这里选择了两列，分别是统计时间和平均人数。\n2. `min(人数分布表.stat_time) as 统计时间`: 这部分是获取每天的最小统计时间（即当天的开始时刻）。\n3. `round(min(人数分布表.num)) as 平均人数`: 这部分是计算每天的平均人数，通过将总人数除以时间段的小时数得到。\n4. `from a_people_spread_day_building as 人数分布表`: 这部分指定了数据来源表，即“人数分布表”。\n5. `WHERE`: 设置查询条件。这部分要求查询的数据满足以下条件：建筑名称等于“图书教育中心”，与当前时间的差值小于30天，所在区域名称为“高新校区”，组织名称为“中国科学技术大学”。\n6. `group by`: 按照指定的字段进行分组。这部分按照统计日期（即每天）对结果进行分组。\n7. `order by`: 对分组后的数据进行排序。这部分按照最小统计时间进行升序排列。"
    },
    {
        "query": "查一下学生食堂的所有摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从多个关联的数据表中获取学生食堂的所有摄像头的详细信息。下面是对这段SQL语句的详细解读：\n\n1. select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置: 这句是选择要查询的列，即摄像头ID、IP地址和安装位置。\n\n2. from s_camera as 摄像头表: 从名为s_camera的数据表开始查询，将其简写为“摄像头表”。\n\n3.  join s_room as 房间表 on 摄像头表.pid=房间表.id: 这句表示将摄像头表与另一个数据表s_room（可简写为“房间表”）通过摄像头表的pid字段与房间表的id字段的值相等进行连接。\n\n4.  join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 这句表示将房间表与另一个数据表s_building（可简写为“楼栋表”）通过房间表的pid字段与楼栋表的id字段的值相等进行连接。\n\n5.  join s_region as 区域表 on 楼栋表.pid=区域表.id: 这句表示将楼栋表与另一个数据表s_region（可简写为“区域表”）通过楼栋表的pid字段与区域表的id字段的值相等进行连接。\n\n6.  join s_organization as 单位表 on 区域表.pid=单位表.id: 这句表示将区域表与另一个数据表s_organization（可简写为“单位表”）通过区域表的pid字段与单位表的id字段的值相等进行连接。\n\n7. where 楼栋表.building_name='学生食堂': 这句设置查询条件，即要求楼栋表的building_name字段值为“学生食堂”。\n\n8. and 区域表.region_name='高新校区': 这句继续添加查询条件，即要求区域表的region_name字段值为“高新校区”。\n\n9. and 单位表.org_name='中国科学技术大学': 这句继续添加查询条件，即要求单位表的org_name字段值为“中国科学技术大学”。\n\n10. order by 摄像头表.id asc: 这句设置排序方式，即按照摄像头表的id字段升序排列。\n\n11. limit 1000: 这句限制查询结果的数量，即只返回前1000条记录。"
    },
    {
        "query": "信智楼有多少人背双肩包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个复杂的SQL查询语句，用于从多个关联表中获取信息并统计特定条件下的数据。下面是对这个SQL语句的详细解释：\n\n1. `select count(*) as 背双肩包的人数`：这是查询的目的，即计算满足后续条件的双肩背包人数。\n\n2. `from d_people as 人员表`：这是查询的开始，指定了数据来源是\"d_people\"表，并将该表简称为\"人员表\"。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：这是第一个JOIN子句，将\"s_camera\"表（简称\"摄像头表\"）与\"d_people\"表通过\"camera_id\"字段进行连接，这两个表的关系是一对一或一对多。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是第二个JOIN子句，将\"s_room\"表（简称\"房间表\"）与\"摄像头表\"表通过\"pid\"字段进行连接。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是第三个JOIN子句，将\"s_building\"表（简称\"楼栋表\"）与\"房间表\"表通过\"pid\"字段进行连接。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是第四个JOIN子句，将\"s_region\"表（简称\"区域表\"）与\"楼栋表\"表通过\"pid\"字段进行连接。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是第五个JOIN子句，将\"s_organization\"表（简称\"单位表\"）与\"区域表\"表通过\"pid\"字段进行连接。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`：这是第六个JOIN子句，将\"t_bag\"表（简称\"背包维表\"）与\"人员表\"表通过\"bag\"字段进行连接。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='背包'`：这是WHERE子句，限制了查询结果的筛选条件。这里表示只考虑最近5分钟内更新的数据，且只有当\"背包维表\"中的\"name\"字段值为\"背包\"时，才计入双肩背包的人数。\n\n10. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`：这是额外的筛选条件，进一步限制查询结果只包含\"高新校区\"、\"中国科学技术大学\"的\"信智楼\"的数据。\n\n总结：这个SQL语句的目的是计算\"信智楼\"里在最近的5分钟内更新数据的、携带双肩背包的人数。"
    },
    {
        "query": "告诉我现在2号学生公寓有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='2号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前（即最近5小时内的数据）2号学生公寓的人数。以下是各部分的解释：\n\n1. `select 人数分布表.num as 人数`：选择`num`字段并将它重命名为`人数`。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表，这里为`a_people_spread_day_building`并为其取别名为`人数分布表`。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置筛选条件，只选择过去5小时内的数据。其中`TIMESTAMPDIFF(HOUR, ...)`是计算时间差的函数，`stat_time`是记录时间的字段。\n\n4. `and 人数分布表.building_name='2号学生公寓'`：进一步筛选，只选择2号学生公寓的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：继续筛选，只选择高新校区的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：继续筛选，只选择中国科学技术大学的数据。\n\n7. `order by 人数分布表.stat_time desc`：按时间倒序排列结果，即最新的数据排在最前面。\n\n8. `limit 1`：限制返回的结果数量，这里只返回一条记录。"
    },
    {
        "query": "师生活动中心每天最少有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这个SQL查询语句的目的是获取\"师生活动中心\"在过去30天内每天的最低人数。具体来说：\n\n1. `select min(人数分布表.stat_time) as 统计时间`：选择最小的统计时间作为最小值；\n2. `round(min(人数分布表.num)) as 平均人数`：计算并保留最小的人数；\n3. `from a_people_spread_day_building as 人数分布表`：数据源是“a_people_spread_day_building”表，别名设为“人数分布表”；\n4. `WHERE 人数分布表.building_name='师生活动中心'`：筛选出建筑名称为“师生活动中心”的记录；\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`：限制统计时间在过去的30天内；\n6. `and 人数分布表.region_name='高新校区'`：限制地区为“高新校区”；\n7. `and 人数分布表.org_name='中国科学技术大学'`：限制组织为中国科学技术大学；\n8. `group by 人数分布表.stat_day`：按照统计日期进行分组；\n9. `order by min(人数分布表.stat_time) asc`：按统计时间升序排列，即从最早到最晚的日期顺序排列。\n\n通过这个查询，可以得到过去30天内，“师生活动中心”每天的最小人数。"
    },
    {
        "query": "总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个 SQL 查询语句，用于计算特定条件下的摄像头数量。以下是各子句的解析：\n\n1. `SELECT`: 选择要返回的结果。这里选择了 `COUNT(*)`，表示要计算满足条件的摄像头的数量。\n2. `count(*) as 摄像头数量`: 使用 `COUNT` 函数计算符合条件的摄像头的总数，并将结果命名为 `摄像头数量`。\n3. `FROM s_camera as 摄像头表`: 从 `s_camera` 表开始查询，将其简称为 `摄像头表`。\n4. `JOIN s_room as 房间表 ON 摄像头表.pid=房间表.id`: 连接 `s_room` 表（简称为 `房间表`）与 `摄像头表`，基于 `摄像头表` 的 `pid` 等于 `房间表` 的 `id`。\n5. `JOIN s_building as 楼栋表 ON 房间表.pid=楼栋表.id`: 连接 `s_building` 表（简称为 `楼栋表`）与 `房间表`，基于 `房间表` 的 `pid` 等于 `楼栋表` 的 `id`。\n6. `JOIN s_region as 区域表 ON 楼栋表.pid=区域表.id`: 连接 `s_region` 表（简称为 `区域表`）与 `楼栋表`，基于 `楼栋表` 的 `pid` 等于 `区域表` 的 `id`。\n7. `JOIN s_organization as 单位表 ON 区域表.pid=单位表.id`: 连接 `s_organization` 表（简称为 `单位表`）与 `区域表`，基于 `区域表` 的 `pid` 等于 `单位表` 的 `id`。\n8. `WHERE 区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求 `区域表` 的 `region_name` 字段值等于 '高新校区'，且 `单位表` 的 `org_name` 字段值等于 '中国科学技术大学'。\n\n整个语句的意思是：在满足特定条件下（即位于 '高新校区' 的中国科学技术大学），计算摄像头数量。"
    },
    {
        "query": "室外摄像头列表",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse=0 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id  limit 1000;\n```\n这是一段SQL查询语句，用于从多个关联的数据表中获取满足特定条件的数据。以下是各个部分的具体含义：\n\n1. `select`：指定需要返回的列。在这个例子中，选择了四个列，分别是摄像头表（s_camera）的id（摄像头编号）、房间表（s_room）的room_name（安装位置）、楼栋表（s_building）的building_name（所在大楼）和区域表（s_region）的region_name（所在区域）。\n\n2. `from`：指定数据来源表。这个查询涉及了五个数据表，分别是摄像头表（s_camera）、房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）。\n\n3. `join`：表示这些表之间的连接关系。具体来说，摄像头表通过pid与房间表相连（on 摄像头表.pid=房间表.id），然后房间表通过pid与楼栋表相连（on 房间表.pid=楼栋表.id），接着楼栋表通过pid与区域表相连（on 楼栋表.pid=区域表.id），最后区域表通过pid与单位表相连（on 区域表.pid=单位表.id）。\n\n4. `where`：设置查询条件。在这个例子中，条件是摄像头表（s_camera）的inhouse字段值为0，且区域表（s_region）的region_name字段值等于“高新校区”，同时单位表（s_organization）的org_name字段值等于“中国科学技术大学”。\n\n5. `order by`：设置排序规则。在这个例子中，按照摄像头表（s_camera）的id字段升序排列。\n\n6. `limit`：设置返回结果的数量。在这个例子中，限制返回的结果数量为1000条。"
    },
    {
        "query": "1号学科楼现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='1号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取1号学科楼的当前人数。具体解释如下：\n\n1. `select 人数分布表.num as 人数`：选择名为\"num\"的列，并将其重命名为\"人数\"；\n2. `from a_people_spread_day_building as 人数分布表`：指定数据表名为a_people_spread_day_building，并为其分配一个别名\"人数分布表\"；\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置过滤条件，只选取过去5小时内（以当前时间为基准）的数据；\n4. `and 人数分布表.building_name='1号学科楼'`：进一步限制结果，仅包含1号学科楼的数据；\n5. `and 人数分布表.region_name='高新校区'`：同上，限制地区为高新校区；\n6. `and 人数分布表.org_name='中国科学技术大学'`：同上，限制组织名称为\"中国科学技术大学\"；\n7. `order by 人数分布表.stat_time desc`：按统计时间倒序排列，即最新的时间在最前面；\n8. `limit 1`：限定返回结果的数量，这里只取1条。\n\n综上，这条语句的目的是查询最近5小时内1号学科楼的人数情况，并且只返回最新的一条数据。"
    },
    {
        "query": "统计食堂每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据表中检索并计算食堂每天的最低人数。下面是该SQL语句的每个部分的详细解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 这部分是选择食堂统计时间的最小值，作为“统计时间”列。\n\n2. `round(min(人数分布表.num)) as 平均人数`: 这部分是计算食堂人数的平均值，作为“平均人数”列。\n\n3. `from a_people_spread_day_building as 人数分布表`: 从名为\"a_people_spread_day_building\"的数据表（这里简称为“人数分布表”）中选择数据。\n\n4. `WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 这是查询条件，只选择满足以下条件的记录：食堂名称为“学生食堂”；距离现在的时间（以天为单位）小于30天；所在区域为“高新校区”；所属单位为“中国科学技术大学”。\n\n5. `group by 人数分布表.stat_day`: 对每天的食堂人数进行分组，以便于计算每天的最低人数。\n\n6. `order by min(人数分布表.stat_time) asc`: 根据食堂统计时间的最小值对结果进行排序，升序排列。"
    },
    {
        "query": "找出近期发现的一些行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中获取一些行人的轨迹信息。以下是各部分的主要功能说明：\n\n1. `select`: 选择需要从数据库中提取的数据字段。\n2. `from`: 指定数据来源表，这里有多个表连接使用。\n3. `join`: 连接多个表，基于这些表的共享列值进行关联。\n4. `where`: 设置筛选条件，只返回满足特定条件的数据。\n5. `order by`: 排序方式，按照指定的字段升序或降序排列结果。\n6. `limit`: 限制返回结果的数量，这里是限制返回10条数据。\n\n具体来说，这个SQL查询将连接a_people_trail（行人轨迹表）、s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）这几个表。然后，它将返回满足以下条件且按轨迹起始时间降序排列的前10条数据：\n- 区域表的区域名等于“高新校区”；\n- 单位表的单位名等于“中国科学技术大学”。"
    },
    {
        "query": "6号学生公寓监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个表格中获取满足特定条件的摄像头数量。以下是各个部分的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数count(*)作为结果，并将返回的值命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`: 从名为s_camera的表（在此称为\"摄像头表\"）开始查询。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和另一个名为s_room的表（在此称为\"房间表\"），连接条件是摄像头表的主键（pid）等于房间表的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表和另一个名为s_building的表（在此称为\"楼栋表\"），连接条件是房间表的pid字段等于楼栋表的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表和另一个名为s_region的表（在此称为\"区域表\"），连接条件是楼栋表的pid字段等于区域表的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表和另一个名为s_organization的表（在此称为\"单位表\"），连接条件是区域表的pid字段等于单位表的id字段。\n\n7. `where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，即要求楼栋表的建筑名称、区域表的区域名称和单位表的机构名称分别为\"6号学生公寓\"、\"高新校区\"和\"中国科学技术大学\"。\n\n该查询将返回满足这些条件的摄像头数量。"
    },
    {
        "query": "体育馆现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育馆' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个 SQL 查询语句，用于从数据库中获取体育馆当前的人数信息。下面是该 SQL 语句的详细解析：\n\n1. `SELECT 人数分布表.num AS 人数`：选择 `num` 字段并将它命名为 `人数`，这是我们要获取的数据。\n\n2. `FROM a_people_spread_day_building AS 人数分布表`：指定数据表，这里是 `a_people_spread_day_building`，并为表起别名 `人数分布表`，以便在查询中使用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：这个条件用于筛选出距离现在时间（即执行查询的时间）不超过 5 小时的数据。`TIMESTAMPDIFF()` 是 MySQL 中的一个函数，用于计算两个日期之间的差值，这里我们计算的是统计时间与当前时间的小时差，并设定小于 5 以保证数据的时效性。\n\n4. `AND 人数分布表.building_name='体育馆' AND 人数分布表.region_name='高新校区' AND 人数分布表.org_name='中国科学技术大学'`：这些条件用于进一步筛选数据，只返回满足这些条件的记录，即体育馆、高新校区和中国科学技术大学的统计数据。\n\n5. `ORDER BY 人数分布表.stat_time DESC`：按照 `stat_time` 字段的降序排列结果，最新的数据会排在最前面。\n\n6. `LIMIT 1`：限制查询结果的数量，这里只返回一条记录。"
    },
    {
        "query": "现在有多少人在体育场？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中获取某个时间范围内特定地点的人数信息。下面是此SQL语句的详细解释：\n\n1. `select 人数分布表.num as 人数`：选择名为`num`的字段作为返回的结果字段，并将它重命名为\"人数\"。这个字段应该存储了体育场的人数数据。\n\n2. `from a_people_spread_day_building as 人数分布表`：声明要查询的数据表名称为`a_people_spread_day_building`，并为其分配一个别名，以便在查询过程中方便引用，这里将其称为`人数分布表`。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置查询条件，要求统计时间（`stat_time`字段）与当前时间（通过调用`now()`函数获得）的时间差小于5小时。这可以确保查询到的是近期的数据。\n\n4. `and 人数分布表.building_name='体育场'`：限制查询结果只包含`building_name`字段值为'体育场'的记录。\n\n5. `and 人数分布表.region_name='高新校区'`：继续设置查询条件，要求`region_name`字段值必须为'高新校区'。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：继续设置查询条件，要求`org_name`字段值必须为'中国科学技术大学'。\n\n7. `order by 人数分布表.stat_time desc`：按照`stat_time`字段的降序（即从最近的时间开始）对查询结果进行排序。\n\n8. `limit 1`：限制查询结果的条数，这里只返回一条记录。"
    },
    {
        "query": "近期有哪些异常行为？",
        "script": "```sql\nselect 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) <1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 异常行为表.moment desc limit 10;\n```\n这是一段SQL查询语句，用于从多个表中获取特定条件下的数据。下面是各部分的具体解释：\n\n1. `select`: 选择要从表中获取的列。\n2. `异常行为表.camera_id as 摄像头编号`: 从\"异常行为表\"中选择名为\"camera_id\"的列，并将其重命名为\"摄像头编号\"。\n3. `房间表.room_name as 异常发生地点`: 从\"房间表\"中选择名为\"room_name\"的列，并将其重命名为\"异常发生地点\"。\n4. `异常行为表.moment as 异常发生时刻`: 从\"异常行为表\"中选择名为\"moment\"的列，并将其重命名为\"异常发生时刻\"。\n5. `异常类型表.name as 异常类型`: 从\"异常类型表\"中选择名为\"name\"的列，并将其重命名为\"异常类型\"。\n6. `from d_abnormal_behavior as 异常行为表`: 指定要从中获取数据的表名，这里为\"d_abnormal_behavior\"，并为其赋予别名\"异常行为表\"。\n7. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`: 通过\"摄像头表\"的\"id\"列与\"异常行为表\"的\"camera_id\"列进行连接（内连接）。\n8. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过\"摄像头表\"的\"pid\"列与\"房间表\"的\"id\"列进行连接。\n9. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过\"房间表\"的\"pid\"列与\"楼栋表\"的\"id\"列进行连接。\n10. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过\"楼栋表\"的\"pid\"列与\"区域表\"的\"id\"列进行连接。\n11. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过\"区域表\"的\"pid\"列与\"单位表\"的\"id\"列进行连接。\n12. `join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id`: 通过\"异常行为表\"的\"abnormal_type\"列与\"异常类型表\"的\"id\"列进行连接。\n13. `where DATEDIFF(now(), 异常行为表.moment) <1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，即最近一天内的记录，以及特定区域和单位。\n14. `order by 异常行为表.moment desc limit 10`: 按\"异常行为表\"的\"moment\"列降序排列，并限制返回的结果集数量为10条。"
    },
    {
        "query": "有多少行人？",
        "script": "```sql\nselect count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5     and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段SQL查询语句，用于计算特定条件下的行人数量。以下是各子句和连接的解释：\n\n1. `select count(*) as 人数`：返回满足后续条件的行人数量。\n2. `from d_people as 人员表`：指定数据来源是人员表（假设名为d_people）。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：将摄像头表（假设名为s_camera）与人员表通过摄像头ID进行连接，以获取每个行人的摄像头信息。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将房间表（假设名为s_room）与摄像头表通过房间ID进行连接，以获取每个行人的所在房间信息。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将楼栋表（假设名为s_building）与房间表通过楼栋ID进行连接，以获取每个行人的所在楼栋信息。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将区域表（假设名为s_region）与楼栋表通过区域ID进行连接，以获取每个行人的所在区域信息。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将单位表（假设名为s_organization）与区域表通过单位ID进行连接，以获取每个行人的所在单位信息。\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：筛选出最近5分钟内的行人员数据。\n9. `and 区域表.region_name='高新校区'`：进一步筛选出行人在“高新校区”的记录。\n10. `and 单位表.org_name='中国科学技术大学'`：进一步筛选出行人在“中国科学技术大学”的记录。"
    },
    {
        "query": "拍到人的室外摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，主要目的是从多个表格中获取满足条件的摄像头的详细信息。下面是对这个查询语句的详细解析：\n\n1. `select`: 选择需要返回的列；\n2. `摄像头表.id as 摄像头编号`: 从摄像头表中选取id字段，并将其命名为“摄像头编号”；\n3. `房间表.room_name as 安装位置`: 从房间表中选取room_name字段，并将其命名为“安装位置”；\n4. `楼栋表.building_name as 所属大楼`: 从楼栋表中选取building_name字段，并将其命名为“所属大楼”；\n5. `from s_camera as 摄像头表`: 指定数据来源是摄像头表；\n6. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将摄像头表与房间表通过摄像头表的pid字段等于房间表的id字段进行联接；\n7. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将房间表与楼栋表通过房间表的pid字段等于楼栋表的id字段进行联接；\n8. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将楼栋表与区域表通过楼栋表的pid字段等于区域表的id字段进行联接；\n9. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将区域表与单位表通过区域表的pid字段等于单位表的id字段进行联接；\n10. `where`: 设定筛选条件；\n11. `摄像头表.inhouse = 0`: 筛选出摄像头表中的inhouse字段值为0的记录；\n12. `and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 筛选出摄像头表中的id字段在d_people表中的camera_id字段的记录，且这些记录的moment字段距离现在的时间差小于10分钟；\n13. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 筛选出区域表的region_name字段值为“高新校区”且单位表的org_name字段值为“中国科学技术大学”的记录；\n14. `order by`: 设定排序规则；\n15. `摄像头表.id asc`: 根据摄像头表的id字段升序排序；\n16. `limit 1000`: 限制返回的记录数为1000条。"
    },
    {
        "query": "拍到人的室外摄像头有哪些？",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段 SQL 查询语句，用于从多个表格中获取满足特定条件的数据。以下是各部分的具体解释：\n\n1. `select`: 选择要查询的列和对应的别名。\n   - 摄像头表.id as 摄像头编号：选择摄像头表的 id 字段作为摄像头编号。\n   - 房间表.room_name as 安装位置：选择房间表的 room_name 字段作为安装位置。\n   - 楼栋表.building_name as 所属大楼：选择楼栋表的 building_name 字段作为所属大楼。\n\n2. `from`: 指定查询数据的来源表格。\n   - s_camera as 摄像头表：摄像头表，存储摄像头的信息。\n   - s_room as 房间表：房间表，存储房间的信息。\n   - s_building as 楼栋表：楼栋表，存储楼栋的信息。\n   - s_region as 区域表：区域表，存储区域的信息。\n   - s_organization as 单位表：单位表，存储单位的信息。\n\n3. `join`: 连接多个表格以获取所需的数据。\n   - 摄像头表.pid=房间表.id：通过摄像头表的 pid 字段和房间表的 id 字段进行连接。\n   - 房间表.pid=楼栋表.id：通过房间表的 pid 字段和楼栋表的 id 字段进行连接。\n   - 楼栋表.pid=区域表.id：通过楼栋表的 pid 字段和区域表的 id 字段进行连接。\n   - 区域表.pid=单位表.id：通过区域表的 pid 字段和单位表的 id 字段进行连接。\n\n4. `where`: 设置查询条件。\n   - 摄像头表.inhouse = 0：筛选出户外摄像头（inhouse 值为 0）。\n   - 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10): 筛选出最近 10 分钟内有人经过的摄像头。\n   - 区域表.region_name='高新校区': 筛选出位于“高新校区”的摄像头。\n   - 单位表.org_name='中国科学技术大学': 筛选出属于“中国科学技术大学”的摄像头。\n\n5. `order by`: 对查询结果按照指定的列进行排序。\n   - 摄像头表.id asc：按照摄像头表的 id 字段升序排列。\n\n6. `limit`: 限制查询结果的条数。\n   - limit 1000：只返回前 1000 条记录。"
    },
    {
        "query": "统计师生活动中心一个月内每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据表中检索和计算师生活动中心在一个月内（DATEDIFF函数返回两个日期之间的差值）每天的最高人流量。具体解释如下：\n\n1. SELECT子句：选择所需的列和表达式。在这个查询中，选择了`统计时间`（记录日期和时间的时间分布表的列名）、`平均人数`（通过求和并除以总天数得到的人流量）作为输出结果。\n\n2. FROM子句：指定数据来源的数据表名称（a_people_spread_day_building）。\n\n3. WHERE子句：设置过滤条件。在这个查询中，限制了建筑名为“师生活动中心”，且日期与现在之差小于30天（一个月），地区名为“高新校区”，组织名为“中国科学技术大学”的数据。\n\n4. GROUP BY子句：根据指定的列对数据进行分组。在这个查询中，按照日期（stat_day）进行分组。\n\n5. ORDER BY子句：定义排序规则。在这个查询中，按照统计时间（min(人数分布表.stat_time)）的升序排列（ASC）。\n\n6. 聚合函数MIN()、MAX()：分别用于计算每组的最小值（统计时间）和最大值（平均人数）。"
    },
    {
        "query": "3号学科楼总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从数据库中获取“3号学科楼”的摄像头数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数count(*)作为结果，并将其命名为\"摄像头数量\"。这将返回满足后续条件的摄像头的总数。\n\n2. `from s_camera as 摄像头表`：指定数据来源，这里是s_camera表，用作摄像头数据存储。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：使用内连接（INNER JOIN）将s_room表（房间表）与s_camera表（摄像头表）相连。连接条件是摄像头表中的pid（可能表示摄像头所属的房间ID）等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：同样使用内连接，将s_building表（楼栋表）与房间表相连。连接条件是房间表中的pid等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：再次使用内连接，将s_region表（区域表）与楼栋表相连。连接条件是楼栋表中的pid等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：继续使用内连接，将s_organization表（单位表）与区域表相连。连接条件是区域表中的pid等于单位表的id。\n\n7. `where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即要求楼栋名称为“3号学科楼”，区域名称为“高新校区”，单位名称为“中国科学技术大学”。\n\n这个查询语句通过层层关联，最终实现了精确到特定楼栋的摄像头数量的统计。"
    },
    {
        "query": "有多少行人不戴帽子？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='未戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个 SQL 查询语句，用于计算某个特定时间范围内（五分钟以内）、某个特定区域（高新校区）和特定单位（中国科学技术大学）的行人中，有多少人未戴帽子的数据。下面是各子句的解释：\n\n1. select count(*) as 戴帽子人数：选择计数 (*) 作为结果列的别名 \"戴帽子人数\"。\n2. from d_people as 人员表：从 \"d_people\" 表开始查询，将其别名为 \"人员表\"。\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id：连接 \"s_camera\" 表，连接条件是 \"人员表\" 的 camera_id 与 \"摄像头表\" 的 id 相等。\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id：连接 \"s_room\" 表，连接条件是 \"摄像头表\" 的 pid 与 \"房间表\" 的 id 相等。\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：连接 \"s_building\" 表，连接条件是 \"房间表\" 的 pid 与 \"楼栋表\" 的 id 相等。\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id：连接 \"s_region\" 表，连接条件是 \"楼栋表\" 的 pid 与 \"区域表\" 的 id 相等。\n7. join s_organization as 单位表 on 区域表.pid=单位表.id：连接 \"s_organization\" 表，连接条件是 \"区域表\" 的 pid 与 \"单位表\" 的 id 相等。\n8. join t_hat as 帽子维表 on 人员表.hat=帽子维表.id：连接 \"t_hat\" 表，连接条件是 \"人员表\" 的 hat 与 \"帽子维表\" 的 id 相等。\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5：筛选条件，即从人员表的 moment 字段到当前时间的分钟差小于5。\n10. and 帽子维表.name='未戴帽子'：筛选条件，即帽子的名称等于 '未戴帽子'。\n11. and 区域表.region_name='高新校区'：筛选条件，即区域的名称等于 '高新校区'。\n12. and 单位表.org_name='中国科学技术大学'：筛选条件，即单位的名称等于 '中国科学技术大学'。"
    },
    {
        "query": "信智楼最近识别到的人员中，不同年龄段的人数是多少？",
        "script": "```sql\nselect case 人员表.age_group when 'AgeLess18' then '小于18岁' when 'Age18-60' then '18-60岁' else '大于60岁' end as '年龄组', count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.age_group  order by 人员表.age_group asc;\n```\n这是一段 SQL 查询语句，用于计算信智楼近期识别到的人员中不同年龄段的人数。以下是该 SQL 的详细解析：\n\n1. `select`：选择要查询的列。在这个例子中，我们选择了两个列：一个是根据人员表的 age_group 字段（表示人员的年龄分组）进行条件判断并转换的 \"年龄组\"，另一个是统计人数的 \"人数\"。\n\n2. `case`：这是一个条件表达式，用于根据不同条件对 age_group 字段进行处理。当 age_group 为 \"AgeLess18\"（表示小于 18 岁）时，将其转换为 \"小于18岁\"；当 age_group 为 \"Age18-60\"（表示 18 至 60 岁）时，将其转换为 \"18-60岁\"；否则（即 age_group 为其他值，表示大于 60 岁），将其转换为 \"大于60岁\"。\n\n3. `count(*)`：计算每个年龄组的总人数。\n\n4. `from`：指定数据源。这里从 d_people（人员表）、s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和 s_organization（单位表）等六个表中获取数据。\n\n5. `join`：连接这些表以获取所需的数据。例如，人员表通过 camera_id 与摄像头表连接，摄像头表通过 pid 与房间表连接，房间表通过 pid 与楼栋表连接，楼栋表通过 pid 与区域表连接，区域表通过 pid 与单位表连接。\n\n6. `where`：设置筛选条件。这里要求时间戳差（人员表的时刻字段与当前时间的差值）小于 5 分钟，区域表的区域名字段为 \"高新校区\"，单位表的单位名字段为 \"中国科学技术大学\"，楼栋表的楼栋名字段为 \"信智楼\"。\n\n7. `group by`：按年龄组对数据进行分组，以便计算每个年龄组的人数。\n\n8. `order by`：按照年龄组的升序对结果进行排序。\n\n这段 SQL 查询语句的最终目的是计算信智楼近期识别到的人员中不同年龄段的人数及其分布情况。"
    },
    {
        "query": "统计师生活动中心一个月内每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取师生活动中心（building_name为“师生活动中心”）在一个月内（DATEDIFF(now(), 人数分布表.stat_time) < 30）、高新校区（region_name为“高新校区”）和中国科学技术大学（org_name为“中国科学技术大学”）每天的最低人数。\n\n以下是查询的主要部分及其解释：\n\n1. SELECT子句：选择要返回的列。这里选择统计时间（stat_time）和平均人数（round(min(num))）。\n\n2. FROM子句：指定要查询的数据库表。这里是a_people_spread_day_building表，简称为“人数分布表”。\n\n3. WHERE子句：设置筛选条件。这里设置了四个条件，分别是：\n   (1) building_name为“师生活动中心”；\n   (2) 统计时间（stat_time）与当前时间的差值（用DATEDIFF函数计算）小于30天；\n   (3) region_name为“高新校区”；\n   (4) org_name为“中国科学技术大学”。\n\n4. GROUP BY子句：按stat_day进行分组，以便对每天的记录进行汇总。\n\n5. ORDER BY子句：按统计时间（stat_time）升序排列结果集。\n\n6. MIN()聚合函数：计算每个组的最低人数。由于这里是求每日最低人数，所以MIN()应用于num列。"
    },
    {
        "query": "5分钟内识别到多少行人？",
        "script": "```sql\nselect count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5     and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段 SQL 查询语句，用于计算在5分钟之内，位于“高新校区”且属于“中国科学技术大学”的行人的数量。下面是对该 SQL 语句的解释：\n\n1. `select count(*) as 人数`：选择计数函数 `COUNT()` 对结果集进行统计，返回行数（即人数）。\n\n2. `from d_people as 人员表`：从 \"d_people\" 表中获取数据，这里将其命名为 \"人员表\"。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：通过 \"人员表\" 的 `camera_id` 与 \"摄像头表\" 的 `id` 字段建立连接。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过 \"摄像头表\" 的 `pid` 字段与 \"房间表\" 的 `id` 字段建立连接。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：通过 \"房间表\" 的 `pid` 字段与 \"楼栋表\" 的 `id` 字段建立连接。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过 \"楼栋表\" 的 `pid` 字段与 \"区域表\" 的 `id` 字段建立连接。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：通过 \"区域表\" 的 `pid` 字段与 \"单位表\" 的 `id` 字段建立连接。\n\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：筛选出在5分钟以内的时间范围内，有记录的行人的数据。\n\n9. `and 区域表.region_name='高新校区'`：筛选出位于 \"高新校区\" 的行人的数据。\n\n10. `and 单位表.org_name='中国科学技术大学'`：筛选出属于 \"中国科学技术大学\" 的行人的数据。"
    },
    {
        "query": "信智楼5分钟内识别到多少戴眼镜的行人？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段 SQL 语言，用于在数据库中查询特定时间范围内（例如过去 5 分钟）在“信智楼”附近戴着眼镜行人的数量。以下是该 SQL 语句的组成部分及功能说明：\n\n1. `select count(*) as 戴眼镜人数`: 选择计数函数（count 函数）来计算满足条件的行数，并将结果命名为 \"戴眼镜人数\"。\n\n2. `from d_people as 人员表`: 定义源数据表，这里是从“d_people”表开始查询，并将其简称为“人员表”。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 联接“s_camera”表，以“摄像头表”作为其别名，联接条件是“人员表”的 camera_id 等于“摄像头表”的 id。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接“s_room”表，以“房间表”作为其别名，联接条件是“摄像头表”的 pid 等于“房间表”的 id。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接“s_building”表，以“楼栋表”作为其别名，联接条件是“房间表”的 pid 等于“楼栋表”的 id。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接“s_region”表，以“区域表”作为其别名，联接条件是“楼栋表”的 pid 等于“区域表”的 id。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接“s_organization”表，以“单位表”作为其别名，联接条件是“区域表”的 pid 等于“单位表”的 id。\n\n8. `join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id`: 联接“t_glasses”表，以“眼镜维表”作为其别名，联接条件是“人员表”的 glasses 等于“眼镜维表”的 id。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='戴眼镜'`: 设置查询条件，即最近 5 分钟内的记录（通过比较当前时间与人员表的 moment 字段的时间差小于 5 分钟），并且要求眼镜维表的 name 字段值为 \"戴眼镜\"。\n\n10. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 进一步限制查询范围，只考虑位于“高新校区”且属于“中国科学技术大学”的“信智楼”的相关数据。\n\n综上所述，这段 SQL 语句的目的是在“信智楼”附近、过去 5 分钟内的数据中，查询并统计出戴眼镜的行人数量。"
    },
    {
        "query": "查一下图书教育中心的所有摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中检索与特定条件匹配的数据。以下是各部分的具体解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 这部分定义了查询结果中包含的字段。\"摄像头表.id\"、\"摄像头表.ip\" 和 \"房间表.room_name\" 是需要返回的列，其中 \"摄像头表.id\" 和 \"摄像头表.ip\" 是从 \"s_camera\"（摄像头表）中获取的数据，\"房间表.room_name\" 是从 \"s_room\"（房间表）中获取的数据。\n\n2. `from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分指定了数据来源以及连接这些数据表的连接条件。通过 \"join\" 关键字将 \"s_camera\"（摄像头表）、\"s_room\"（房间表）、\"s_building\"（楼栋表）、\"s_region\"（区域表）和 \"s_organization\"（单位表）这五个表连接在一起。\n\n3. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是过滤条件，只有满足这三个条件的记录才会被查询出来。即要求 \"楼栋表.building_name\" 等于 \"图书教育中心\"、\"区域表.region_name\" 等于 \"高新校区\" 且 \"单位表.org_name\" 等于 \"中国科学技术大学\"。\n\n4. `order by 摄像头表.id asc limit 1000`: 这部分是对查询结果的排序和限制。按照 \"摄像头表.id\" 字段升序排列（ASC表示升序，DESC表示降序），并且只返回前1000条记录。\n\n这个查询语句的目的是查找位于“图书教育中心”、“高新校区”、“中国科学技术大学”的摄像头的详细信息。"
    },
    {
        "query": "8号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询满足特定条件的摄像头的数量。具体来说：\n\n1. `select count(*) as 摄像头数量`：这是 SQL 的聚合函数 COUNT 的一种用法，用于计算满足 WHERE 子句条件的记录数。这里将结果命名为 \"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`：从名为 \"s_camera\" 的表开始查询，为了方便理解，我们将其称为 \"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：使用 JOIN 子句连接 \"摄像头表\" 和 \"房间表\"，连接条件是 \"摄像头表\" 的 \"pid\" 列等于 \"房间表\" 的 \"id\" 列。我们暂时将 \"s_room\" 称为 \"房间表\"。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接 \"房间表\" 和 \"楼栋表\"，连接条件是 \"房间表\" 的 \"pid\" 列等于 \"楼栋表\" 的 \"id\" 列。将 \"s_building\" 称为 \"楼栋表\"。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接 \"楼栋表\" 和 \"区域表\"，连接条件是 \"楼栋表\" 的 \"pid\" 列等于 \"区域表\" 的 \"id\" 列。将 \"s_region\" 称为 \"区域表\"。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接 \"区域表\" 和 \"单位表\"，连接条件是 \"区域表\" 的 \"pid\" 列等于 \"单位表\" 的 \"id\" 列。将 \"s_organization\" 称为 \"单位表\"。\n\n7. `where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：WHERE 子句定义了查询的条件，只有当 \"楼栋表\" 的 \"building_name\" 字段值为 \"8号学生公寓\"、\"区域表\" 的 \"region_name\" 字段值为 \"高新校区\" 且 \"单位表\" 的 \"org_name\" 字段值为 \"中国科学技术大学\" 时，才会返回相应的摄像头数量。"
    },
    {
        "query": "统计图书馆一个月内每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中检索图书馆一个月内每天的最低人数。以下是查询语句的详细解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 这部分选择了每天的最小值作为“统计时间”列，即图书馆在一个月内每天的人数最少的时间。\n\n2. `round(min(人数分布表.num)) as 平均人数`: 这部分计算并返回了与所选最小日期相关的最小人数。\"round\"函数用于四舍五入数字到最接近的整数。\n\n3. `from a_people_spread_day_building as 人数分布表`: 这部分指定了数据来源，即“a_people_spread_day_building”表，该表包含了关于图书馆每天人数的详细信息。\n\n4. `WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 这部分是过滤条件，只选择满足特定条件的数据。具体来说，它只选择属于“图书教育中心”、位于“高新校区”且归属于“中国科学技术大学”的数据，并且这些数据的统计时间与当前时间的差小于30天。\n\n5. `group by 人数分布表.stat_day`: 这部分按照“stat_day”对数据进行分组，以便按日期对结果进行排序。\n\n6. `order by min(人数分布表.stat_time) asc;`: 最后，结果按照所选的最小日期（即人数最少的日子）从小到大排序。"
    },
    {
        "query": "近期内识别到的人员中，背双肩包的有多少？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这个SQL查询语句是用来统计在近期（五分钟以内）识别到的人员中，有多少人背双肩包。以下是各个子句的解析：\n\n1. `select count(*) as 背双肩包的人数`：这是查询的目标，即计算满足条件的背双肩包人数。\n\n2. `from d_people as 人员表`：从人员表中查询数据。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：将摄像头表和人员表通过camera_id进行关联，获取每个人员在哪个摄像头上被识别的信息。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将房间表和摄像头表通过pid进行关联，获取每个摄像头的房间信息。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将楼栋表和房间表通过pid进行关联，获取每个房间所在的楼栋信息。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将区域表和楼栋表通过pid进行关联，获取每个楼栋所在区域的信息。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将单位表和区域表通过pid进行关联，获取每个区域的单位名称。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`：将背包维表和人员表通过bag字段进行关联，获取每个人的背包类型信息。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：设置查询条件，只返回在五分钟以内被识别到的人员信息。\n\n10. `and 背包维表.name='背包'`：设置查询条件，只返回背包类型为“背包”的人员信息。\n\n11. `and 区域表.region_name='高新校区'`：设置查询条件，只返回位于“高新校区”的人员信息。\n\n12. `and 单位表.org_name='中国科学技术大学'`：设置查询条件，只返回属于“中国科学技术大学”的单位的人员信息。"
    },
    {
        "query": "容易发生异常行为的房间有哪些",
        "script": "```sql\nselect 房间表.room_name as 房间名称, count(*) as 5天内异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(),异常行为表.moment) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' GROUP by 房间表.room_name  ORDER by count(*) desc  limit 10;\n```\n这是一条用于查询特定条件下某个学校（中国科学技术大学）高新校区内近5天内发生异常行为的房间及其数量的数据库SQL语句。下面是对这条SQL语句的详细解析：\n\n1. `select room_name as 房间名称, count(*) as 5天内异常行为数量`：选择要查询的字段，包括房间名称以及每个房间在近5天内发生的异常行为数量。\n\n2. `from d_abnormal_behavior as 异常行为表`：指定数据源，即异常行为表，这个表存储了所有异常行为的信息。\n\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`：连接摄像头表和异常行为表，通过摄像头ID字段关联两个表。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表和摄像头表，通过摄像头所属房间ID字段关联两个表。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表和房间表，通过房间所属楼栋ID字段关联两个表。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表和楼栋表，通过楼栋所属区域ID字段关联两个表。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表和区域表，通过区域所属单位ID字段关联两个表。\n\n8. `where DATEDIFF(now(),异常行为表.moment) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，包括时间条件（近5天内发生的异常行为）、区域条件（仅查询高新校区内的数据）和单位条件（仅查询中国科学技术大学的数据）。\n\n9. `GROUP by 房间表.room_name`：按房间名称进行分组，统计每个房间的异常行为数量。\n\n10. `ORDER by count(*) desc`：按异常行为数量降序排列，以便查看异常行为最多的房间。\n\n11. `limit 10`：限制查询结果数量，只返回异常行为数量前10的房间信息。"
    },
    {
        "query": "统计图教中心一个月内每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于计算并返回\"图书教育中心\"（假设是一个地点或建筑名称）在最近的30天内，每天平均人数。以下是该语句的各个部分的解释：\n\n1. SELECT子句：选择需要返回的列和聚合函数。在这个例子中，我们将返回`统计时间`（即每一天的日期）和`平均人数`。\n\n2. FROM子句：指定数据来源，即数据表名。在这个例子中，数据来源是`a_people_spread_day_building`（假设这是存储人数数据的表的名称）。\n\n3. WHERE子句：过滤条件，只有满足这些条件的数据才会被考虑进行聚合计算。在这个例子中，过滤条件包括：\n   - `building_name`字段值等于'图书教育中心'；\n   - `DATEDIFF(now(), stat_time) < 30`：表示统计时间在最近30天以内；\n   - `region_name`字段值等于'高新校区'；\n   - `org_name`字段值等于'中国科学技术大学'。\n\n4. GROUP BY子句：按照指定的列对数据进行分组，以便对每个组进行聚合操作。在这个例子中，按照`stat_day`（假设这是存储每一天的日期的字段）进行分组。\n\n5. ORDER BY子句：对结果进行排序。在这个例子中，按照`统计时间`（即每一天的日期）从小到大排序。\n\n6. AVG()聚合函数：计算每组（在这里是每天）的平均人数。\n\n7. MIN()聚合函数：获取每组（在这里是每天）的最小统计时间。这里之所以使用MIN()而不是DATE(),是因为我们想要得到的是日期（字符串类型），而DATE()函数会返回一个日期时间（timestamp）类型的值。"
    },
    {
        "query": "食堂哪些地方安装了摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中获取安装在特定食堂、校区和单位的所有摄像头的详细信息。下面是各部分的具体解释：\n\n1. `s_camera as 摄像头表`: 这是摄像头数据所在的表，包含了摄像头的ID（摄像头编号）和IP地址等基本信息。\n\n2. `s_room as 房间表`: 这是房间数据所在的表，包含了每个房间的名称（安装位置）以及与之关联的摄像头ID。\n\n3. `s_building as 楼栋表`: 这是楼栋数据所在的表，包含了每个楼栋的名称以及与它关联的房间ID。\n\n4. `s_region as 区域表`: 这是区域数据所在的表，包含了每个区域的名称以及与它关联的楼栋ID。\n\n5. `s_organization as 单位表`: 这是单位数据所在的表，包含了每个单位的名称以及与它关联的区域ID。\n\n6. `where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分条件筛选出了特定的学生食堂、高新校区和中国科学技术大学的摄像头的数据。\n\n7. `order by 摄像头表.id asc limit 1000;`: 这部分按摄像头编号升序排列，并限制返回结果数为1000条。"
    },
    {
        "query": "学生食堂现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='学生食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL查询语句的目的是获取学生食堂（假设是在中国科学技术大学的高新校区）当前的人数。下面是它的各个部分和功能说明：\n\n1. `select 人数分布表.num as 人数`: 从`a_people_spread_day_building`表中选择名为`num`的列作为结果中的\"人数\"列。\n\n2. `from 人数分布表`: 定义结果数据来源于`a_people_spread_day_building`表，并将该表简称为`人数分布表`。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 过滤出在最近的5小时内的记录。这确保了返回的数据是近似的实时数据。\n\n4. `and 人数分布表.building_name='学生食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 限制查询结果为特定的学生食堂（位于中国科学技术大学的高新校区）的数据。\n\n5. `order by 人数分布表.stat_time desc limit 1`: 对查询结果按照统计时间（stat_time）降序排序，并取最新的记录。这将确保结果是最近的数据。"
    },
    {
        "query": "食堂人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='学生食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取一定条件下的数据信息。下面是各个部分的主要功能说明：\n\n1. `SELECT`: 选择要返回的列。这里是`num AS 人数`，表示选择`num`列为结果集的`人数`列。\n\n2. `FROM`: 指定数据来源表。这里是`a_people_spread_day_building`表，可能是一个存储食堂人数的数据表。\n\n3. `WHERE`: 设定查询条件。这里的条件是`TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`，表示只查询在最近的5小时内的数据；并且`人数分布表.building_name='学生食堂'`、`人数分布表.region_name='高新校区'`和`人数分布表.org_name='中国科学技术大学'`这三个条件同时满足。\n\n4. `ORDER BY`: 按照`stat_time`字段的值进行降序排列（`DESC`）。\n\n5. `LIMIT`: 限制返回的结果数量，这里是`limit 1`，即只返回一条记录。"
    },
    {
        "query": "学生食堂哪些地方安装了监控",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中获取与“学生食堂”相关的摄像头的信息。具体解释如下：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：这是查询的列，分别表示摄像头的ID（摄像头编号）、IP地址以及安装位置的名称。\n\n2. `from s_camera as 摄像头表`：指定查询的主表，即摄像头信息表，用于存储摄像头的基本信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是第一个联接（JOIN）子句，将摄像头表和房间表进行联接，条件是摄像头表的pid等于房间表的id。房间表用于存储摄像头的安装位置。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是第二个联接子句，将房间表和楼栋表进行联接，条件是房间表的pid等于楼栋表的id。楼栋表用于存储摄像头的安装楼栋。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是第三个联接子句，将楼栋表和区域表进行联接，条件是楼栋表的pid等于区域表的id。区域表用于存储摄像头的安装校区。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是第四个联接子句，将区域表和单位表进行联接，条件是区域表的pid等于单位表的id。单位表用于存储摄像头的安装单位。\n\n7. `where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是查询的条件，只返回满足这三个条件的记录，即摄像头的安装位置为学生食堂、所在校区为高新校区且所属单位为“中国科学技术大学”。\n\n8. `order by 摄像头表.id asc limit 1000`：这是查询结果的排序和限制，按照摄像头表的id从小到大（asc表示升序）排序，并限制返回的记录数为1000条。"
    },
    {
        "query": "最近识别到的人员中，不同下衣风格分别有多少人？",
        "script": "```sql\nselect substring(人员表.lower,6) as 下衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.lower  order by 人员表.lower asc;\n```\n这是一段SQL查询语句，用于计算在特定时间和地点（高新校区的中国科学技术大学）内，不同下衣风格的人数。以下是各部分的功能和作用：\n\n1. `select substring(人员表.lower,6) as 下衣风格, count(*) as 人数`：选择子句，用于返回查询结果中的列。这里将下衣风格的字符串从第6个字符开始提取出来作为一列（因为通常人员的编号前几位是固定的，只有最后几位表示下衣风格），同时计算每种下衣风格出现的次数。\n\n2. `from d_people as 人员表`：指定数据来源，即人员表（可能是一个存储人员信息的表格）。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接摄像头表和人员表，通过摄像头ID关联两者数据。摄像头表可能记录了每个摄像头的详细信息。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表和摄像头表，通过房间ID关联两者数据。房间表可能记录了每个房间的详细信息。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表和房间表，通过楼栋ID关联两者数据。楼栋表可能记录了每个楼栋的详细信息。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表和楼栋表，通过区域ID关联两者数据。区域表可能记录了每个区域的详细信息。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表和区域表，通过单位ID关联两者数据。单位表可能记录了每个单位的详细信息。\n\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：过滤条件，只保留距离当前时间不超过5分钟的数据（这样可以保证数据的实时性），且限制地点为中国科学技术大学高新校区。\n\n9. `group by 人员表.lower  order by 人员表.lower asc`：分组和排序条件，按照下衣风格的字母顺序对结果进行升序排列。"
    },
    {
        "query": "食堂安装了哪些摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从多个表中获取食堂安装摄像头的数据。以下是各子句的解释：\n\n1. `select`: 选择要查询的列。\n2. `摄像头表.id as 摄像头编号`: 从摄像头表中选择id字段，并将其重命名为“摄像头编号”。\n3. `摄像头表.ip as IP地址`: 从摄像头表中选择ip字段，并将其重命名为“IP地址”。\n4. `房间表.room_name as 安装位置`: 从房间表中选择room_name字段，并将其重命名为“安装位置”。\n5. `from s_camera as 摄像头表`: 定义查询的主表为s_camera，简称为“摄像头表”。\n6. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表（简称“房间表”），连接条件是摄像头表的pid字段等于房间表的id字段。\n7. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表（简称“楼栋表”），连接条件是房间表的pid字段等于楼栋表的id字段。\n8. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表（简称“区域表”），连接条件是楼栋表的pid字段等于区域表的id字段。\n9. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表（简称“单位表”），连接条件是区域表的pid字段等于单位表的id字段。\n10. `where`: 设置查询条件。这里指定了需要查询的学生食堂、高新校区和中国科学技术大学的范围。\n11. `order by`: 设置排序规则。这里按照摄像头表的id字段升序排列。\n12. `limit 1000`: 限制查询结果的数量，最多返回1000条记录。"
    },
    {
        "query": "找出近期标记的10条行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 行人轨迹表.start_time desc  limit 10;\n```\n这个SQL查询语句的目的是从数据库中筛选出近期标记的10条行人轨迹，并且这些轨迹属于某个特定的区域和单位。下面是每个部分的解释：\n\n1. `select 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id`: 这是查询结果中显示的字段，分别表示轨迹的开始和结束时间，虚拟人的名字以及该轨迹涉及的摄像头ID列表。\n\n2. `from a_people_trail as 行人轨迹表`: 从名为\"a_people_trail\"的表中获取数据，这里我们称之为\"行人轨迹表\"。\n\n3. `join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id`: 这一步是将摄像头表与行人轨迹表进行连接，连接条件是行人轨迹表的起始摄像头的ID与摄像头表的ID相等。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 同样地，这一步将房间表与摄像头表进行连接，连接条件是摄像头的父ID（即所属房间）与房间表的主键ID相等。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 接下来，这一步将楼栋表与房间表进行连接，连接条件是房间的父ID（即所属楼栋）与楼栋表的主键ID相等。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 最后，这一步将区域表与楼栋表进行连接，连接条件是楼栋的父ID（即所属区域）与区域表的主键ID相等。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 紧接着，这一步将单位表与区域表进行连接，连接条件是区域的父ID（即所属单位）与单位表的主键ID相等。\n\n8. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这个WHERE子句用于筛选出特定区域和单位的数据，这里是“高新校区”和“中国科学技术大学”。\n\n9. `order by 行人轨迹表.start_time desc`: 使用ORDER BY子句按轨迹开始时间的降序排列查询结果，即最近的轨迹在最前面。\n\n10. `limit 10;`: 最后，使用LIMIT子句限制查询结果的条数为10条。"
    },
    {
        "query": "信智楼5分钟内识别到多少行人？",
        "script": "```sql\nselect count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5     and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于从多个表格中获取数据并计算满足特定条件的行数。以下是各部分解释：\n\n1. `select count(*) as 人数`：选择计数的函数count(*)作为结果列的名称，将返回的行数命名为\"人数\"。\n\n2. `from d_people as 人员表`：指定数据来源是人员表（d_people）。这个表保存了每个人的信息，如姓名、性别等。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接摄像头表（s_camera）和人员信息表。连接条件是人员表的camera_id与摄像头表的id相等。这表示每个摄像头的监控范围内都有一定数量的人员。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表（s_room）和摄像头表。连接条件是摄像头表的父id（pid）与房间表的id相等。这表示摄像头安装在特定的房间内。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表（s_building）和房间表。连接条件是房间表的父id（pid）与楼栋表的id相等。这表示摄像头所在的房间属于某个楼栋。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表（s_region）和楼栋表。连接条件是楼栋表的父id（pid）与区域表的id相等。这表示摄像头所在的楼栋属于某个地区或校区。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表（s_organization）和区域表。连接条件是区域表的父id（pid）与单位表的id相等。这表示摄像头所在的区域属于某个组织或单位，例如学校或公司。\n\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：过滤条件，只保留距离当前时间（now()）不超过5分钟的记录。这表示仅计算在过去5分钟内被摄像头识别到的人数。\n\n9. `and 区域表.region_name='高新校区'`：过滤条件，只保留位于“高新校区”的数据。这表示仅计算在特定校区内过去5分钟内被摄像头识别到的人数。\n\n10. `and 单位表.org_name='中国科学技术大学'`：过滤条件，只保留属于“中国科学技术大学”的数据。这表示仅计算在特定单位内过去5分钟内被摄像头识别到的人数。\n\n11. `and 楼栋表.building_name='信智楼'`：过滤条件，只保留位于“信智楼”的数据。这表示仅计算在特定楼栋内过去5分钟内被摄像头识别到的人数。"
    },
    {
        "query": "教工食堂安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询教工食堂的摄像头数量。下面是对这段 SQL 的解释：\n\n1. `SELECT COUNT(*) AS 摄像头数量`: 这行代码用于计算满足后续条件的摄像头的总数。\n\n2. `FROM s_camera AS 摄像头表`: 定义了查询的数据来源，即摄像头数据表（s_camera）。\n\n3. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 连接摄像头数据表和房间数据表，通过摄像头表的 pid 和房间表的 id 字段进行关联。\n\n4. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 连接房间数据表和楼栋数据表，通过房间表的 pid 和楼栋表的 id 字段进行关联。\n\n5. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 连接楼栋数据表和区域数据表，通过楼栋表的 pid 和区域表的 id 字段进行关联。\n\n6. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 连接区域数据表和单位数据表，通过区域表的 pid 和单位表的 id 字段进行关联。\n\n7. `WHERE 楼栋表.building_name = '教工食堂' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 这部分条件语句用于过滤满足特定条件的摄像头数据。在这个例子中，筛选的是位于“教工食堂”、“高新校区”且归属于“中国科学技术大学”的摄像头数据。"
    },
    {
        "query": "统计食堂每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个 SQL 查询语句，用于统计指定时间段内（过去 30 天）某食堂（这里是“学生食堂”）在特定区域（这里是“高新校区”）的平均每日最大人数。以下是各部分的具体含义：\n\n1. `min(人数分布表.stat_time)` 和 `round(max(人数分布表.num))`：分别表示统计时间和平均人数。\n2. `a_people_spread_day_building`：是数据表名称，存储了人员分布在不同建筑和日期的信息。\n3. `building_name = '学生食堂'`：过滤出“学生食堂”的数据。\n4. `DATEDIFF(now(), 人数分布表.stat_time) < 30`：只考虑过去30天的数据。\n5. `region_name = '高新校区'` 和 `org_name = '中国科学技术大学'`：限制数据所在的地区和机构。\n6. `group by 人数分布表.stat_day`：按日期进行分组，以便计算每日的最大人数。\n7. `order by min(人数分布表.stat_time) asc;`：按照统计时间的最小值升序排列，即先显示最早的记录。"
    },
    {
        "query": "找出一周内各类型异常行为数量分布情况",
        "script": "```sql\nselect 异常类型表.name as 异常行为类型, count(*) as 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by 异常类型表.name asc;\n```\n这是一段用于查询一周内在特定区域内（这里以“高新校区”和“中国科学技术大学”为例）的各类型异常行为数量分布情况的SQL语句。下面是对该SQL语句的详细解释：\n\n1. `select 异常类型表.name as 异常行为类型, count(*) as 异常行为数量`: 这句代码定义了查询结果中包含的两列，分别是\"异常行为类型\"和\"异常行为数量\"。其中\"异常行为类型\"通过`as`关键字将`异常类型表.name`重命名为，\"异常行为数量\"则是计算每种类型的异常行为的总数。\n\n2. `from d_abnormal_behavior as 异常行为表`: 这是从名为`d_abnormal_behavior`的表中获取数据，并简称为\"异常行为表\"。\n\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`: 这句代码是连接`s_camera`表，并将该表简称为\"摄像头表\"。通过`on`关键字设置连接条件：`异常行为表.camera_id`等于`摄像头表.id`。这意味着只有当两个表的这一字段相等时，才会将这两个表中的行关联在一起。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这句代码是连接`s_room`表，并将其简称为\"房间表\"。同样地，通过`on`关键字设置连接条件：`摄像头表.pid`等于`房间表.id`。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这句代码是连接`s_building`表，并将其简称为\"楼栋表\"。连接条件：`房间表.pid`等于`楼栋表.id`。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这句代码是连接`s_region`表，并将其简称为\"区域表\"。连接条件：`楼栋表.pid`等于`区域表.id`。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这句代码是连接`s_organization`表，并将其简称为\"单位表\"。连接条件：`区域表.pid`等于`单位表.id`。\n\n8. `join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id`: 这句代码是连接`t_abnormal_type`表，并将其简称为\"异常类型表\"。连接条件：`异常行为表.abnormal_type`等于`异常类型表.id`。这表示只有当异常行为的类型与`t_abnormal_type`表中对应的ID匹配时，才能将其与该表进行关联。\n\n9. `where DATEDIFF(now(), 异常行为表.moment) < 7`: 这句代码是设置查询条件的子句。`DATEDIFF(now(), 异常行为表.moment) < 7`的意思是：当前日期与异常行为发生的日期之间的差值小于7天。这确保了只返回过去7天内发生的异常行为数据。\n\n10. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这句代码是设置查询条件的子句。它限制了查询结果的地理范围和所属单位，即只返回位于\"高新校区\"且属于\"中国科学技术大学\"的异常行为数据。\n\n11. `group by 异常类型表.name`: 这句代码是设置分组依据的子句。它将数据按照`异常类型表.name`（即异常行为的类型）进行分组，以便对每种类型的异常行为进行计数。\n\n12. `order by 异常类型表.name asc`: 这句代码是设置排序规则的子句。它对查询结果按照`异常类型表.name`（即异常行为的类型）进行升序排序，使得相同类型的异常行为按发生时间先后排列。"
    },
    {
        "query": "信智楼最近识别到的人员中，不同上衣风格的人数是多少？",
        "script": "```sql\nselect substring(人员表.upper,6) as 上衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.upper  order by 人员表.upper asc;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。以下是各部分的解释：\n\n1. `select`: 选择需要查询的列。这里选择了两个列：`substring(人员表.upper,6) as 上衣风格` 和 `count(*) as 人数`。其中，`substring(人员表.upper,6)`是从`人员表`的`upper`字段中提取的字符串（字符串长度为6），`as 上衣风格`是将其命名为“上衣风格”；`count(*)`是计算满足条件的记录总数，`as 人数`是将结果命名为“人数”。\n\n2. `from`: 指定数据来源表。这里使用了多个表连接：`d_people as 人员表`，`s_camera as 摄像头表`，`s_room as 房间表`，`s_building as 楼栋表`，`s_region as 区域表`和`s_organization as 单位表`。\n\n3. `join`: 用于将不同的表连接在一起，通过共享的键值进行匹配。这里的连接方式是通过`人员表.camera_id=摄像头表.id`，`摄像头表.pid=房间表.id`，`房间表.pid=楼栋表.id`，`楼栋表.pid=区域表.id`和`区域表.pid=单位表.id`。\n\n4. `where`: 设置查询条件。这里是基于时间过滤（当前时间与记录时间的分钟差小于5分钟），以及地理位置过滤（位于高新校区的中国科学技术大学信智楼）。具体条件为：`TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`，`区域表.region_name='高新校区'`，`单位表.org_name='中国科学技术大学'`和`楼栋表.building_name='信智楼'`。\n\n5. `group by`: 对查询结果进行分组，这里按照`人员表.upper`进行分组。\n\n6. `order by`: 对查询结果进行排序，这里按照`人员表.upper`升序排列。\n\n综上所述，这个SQL查询语句的目的是查询信智楼最近识别到的人员中，不同上衣风格的人数。"
    },
    {
        "query": "经常发生异常行为的房间有哪些？",
        "script": "```sql\nselect 房间表.room_name as 房间名称, count(*) as 5天内异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(),异常行为表.moment) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' GROUP by 房间表.room_name  ORDER by count(*) desc  limit 10;\n```\n这是一个SQL查询语句，用于统计在过去5天内（从当前时间往前推5天）在指定区域（如“高新校区”）和单位（如“中国科学技术大学”）范围内，发生过异常行为的房间及其数量。\n\n以下是各个子句的解释：\n\n1. `select room_name as 房间名称, count(*) as 5天内异常行为数量`: 选择要输出的列，包括房间名称和该房间过去5天内发生的异常行为数量。\n\n2. `from d_abnormal_behavior as 异常行为表`: 从名为\"d_abnormal_behavior\"的数据表开始查询，这个表存储了所有异常行为的记录。\n\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`: 联接s_camera数据表，通过相机ID将异常行为与对应的相机关联起来。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接s_room数据表，通过摄像头的项目ID（PID）将每个摄像头关联到其所监控的房间。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接s_building数据表，通过房间的项目ID（PID）将每个房间关联到其所在的楼宇。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接s_region数据表，通过楼宇的项目ID（PID）将每个楼宇关联到其所在的地区。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接s_organization数据表，通过地区的项目ID（PID）将每个地区关联到其所属的单位。\n\n8. `where DATEDIFF(now(),异常行为表.moment) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，筛选出在过去5天内、位于“高新校区”且属于“中国科学技术大学”的异常行为记录。\n\n9. `GROUP by 房间表.room_name`: 对查询结果进行分组，按照房间名称对异常行为数量进行汇总。\n\n10. `ORDER by count(*) desc`: 对分组后的结果进行排序，按异常行为数量的降序排列。\n\n11. `limit 10`: 限制查询结果的数量，仅返回前10个（即异常行为数量最多的10个）房间及其异常行为数量。"
    },
    {
        "query": "运动场总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算运动场（这里是体育馆）内安装的摄像头数量。\n\n以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数`count()`，统计摄像头表（s_camera）中所有摄像头的数量，并将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：指定摄像头数据所在的数据表为s_camera，这里将其简称为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表（s_camera）和房间表（s_room）进行连接，连接条件是摄像头表中的项目id（pid）等于房间表中的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将房间表（s_room）和楼栋表（s_building）进行连接，连接条件是房间表中的项目id（pid）等于楼栋表中的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将楼栋表（s_building）和区域表（s_region）进行连接，连接条件是楼栋表中的项目id（pid）等于区域表中的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将区域表（s_region）和单位表（s_organization）进行连接，连接条件是区域表中的项目id（pid）等于单位表中的id。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，要求楼栋名称（building_name）为“体育场”，区域名称（region_name）为“高新校区”，单位名称（org_name）为“中国科学技术大学”。\n\n这段SQL查询语句执行后，将会返回满足条件的运动场的摄像头数量。"
    },
    {
        "query": "学生食堂每天最多有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中获取最近30天内学生食堂的最高人数。以下是这个语句的各个部分的详细解释：\n\n1. `SELECT`: 这是开始一个 SQL 查询的命令。\n2. `min(人数分布表.stat_time) as 统计时间`: 这将返回最小（最早）的统计时间。这里的 \"as 统计时间\" 是将结果列命名为 \"统计时间\"。\n3. `round(max(人数分布表.num)) as 平均人数`: 这将返回最大的平均人数。这里的 \"as 平均人数\" 是将结果列命名为 \"平均人数\"。\n4. `FROM a_people_spread_day_building as 人数分布表`: 从 \"a_people_spread_day_building\" 这个表中选择数据，并将其重命名为 \"人数分布表\"。\n5. `WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 这是一个条件语句，只有满足这些条件的记录才会被选中。这里，它限制了选择的数据是 \"学生食堂\"（建筑名称），并且统计时间距离当前日期（NOW() 函数）不超过30天，位于 \"高新校区\"（地区名称）和 \"中国科学技术大学\"（组织名称）。\n6. `GROUP BY 人数分布表.stat_day`: 按 \"stat_day\" 列对数据进行分组，以便对每个不同的统计日期进行计算。\n7. `ORDER BY min(人数分布表.stat_time) asc`: 按照 \"统计时间\" 的升序排列结果。这意味着最早的统计日期将排在最前面。"
    },
    {
        "query": "现在有多少人在教工食堂？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取某个时间段内在教工食堂的人数。具体解释如下：\n\n1. `SELECT 人数分布表.num as 人数`：选择`num`列并将其重命名为`人数`；\n2. `FROM a_people_spread_day_building as 人数分布表`：从`a_people_spread_day_building`表格中选取数据，将其暂时称为`人数分布表`；\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置条件，即距离当前时间（now()函数返回）不超过5小时；\n4. `and 人数分布表.building_name='教工食堂'`：限制食堂名称必须为“教工食堂”；\n5. `and 人数分布表.region_name='高新校区'`：限制区域名称为“高新校区”；\n6. `and 人数分布表.org_name='中国科学技术大学'`：限制组织名称为“中国科学技术大学”；\n7. `order by 人数分布表.stat_time desc`：按照统计时间倒序排列（即最新的时间在最前面）；\n8. `limit 1`：只返回一条结果。"
    },
    {
        "query": "给出图教中心安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算图教中心（假设是“图书教育中心”）安装的摄像头数量。以下是各子句的解释：\n\n1. select count(*) as 摄像头数量: 选择函数`count()`来计算满足条件的摄像头的数量，并将结果命名为“摄像头数量”。\n2. from s_camera as 摄像头表: 指定摄像头数据所在的表（例如，\"s_camera\"表）并为其命名（\"摄像头表\"）。\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接摄像头表和房间表，基于两个表的pid字段相等。\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接房间表和楼栋表，基于两个表的pid字段相等。\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接楼栋表和区域表，基于两个表的pid字段相等。\n6. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接区域表和单位表，基于两个表的pid字段相等。\n7. where 楼栋表.building_name='图书教育中心': 设置条件，只有当楼栋表中的\"building_name\"等于\"图书教育中心\"时，才进行后续的计算。\n8. and 区域表.region_name='高新校区': 添加条件，只有当区域表中的\"region_name\"等于\"高新校区\"时，才进行后续的计算。\n9. and 单位表.org_name='中国科学技术大学': 添加条件，只有当单位表中的\"org_name\"等于\"中国科学技术大学\"时，才进行后续的计算。\n\n通过这个查询，可以获取到图教中心（假设是“图书教育中心”）在“高新校区”的“中国科学技术大学”内安装的摄像头数量。"
    },
    {
        "query": "现在有多少人在6号学生公寓？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='6号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取“6号学生公寓”当前的人数。下面是对该SQL语句的分解和解释：\n\n1. `a_people_spread_day_building`: 这个是数据库中的一个表，用于存储不同时间段、不同地点的人数数据。\n2. `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这句是用来判断统计时间距离当前时间是否小于5小时，因为我们需要获取最新的数据。\n3. `and 人数分布表.building_name='6号学生公寓'`: 这句是指定我们要查找的建筑物名称，即\"6号学生公寓\"。\n4. `and 人数分布表.region_name='高新校区'`: 这句是指定我们要查找的区域名称，即\"高新校区\"。\n5. `and 人数分布表.org_name='中国科学技术大学'`: 这句是指定我们要查找的组织名称，即\"中国科学技术大学\"。\n6. `order by 人数分布表.stat_time desc`: 这句是按照统计时间降序排列数据，也就是按时间从最近到最远排序。\n7. `limit 1`: 这句是限制返回的数据条数，这里只返回一条记录，即最新的一条人数数据。\n\n通过这个查询，我们可以得到“6号学生公寓”在最近的5小时内的最新人数数据。"
    },
    {
        "query": "找出近期到达1号学生公寓的行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.end_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='1号学生公寓' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从多个表中检索并筛选出符合条件的数据。以下是各个子句的解释：\n\n1. `select`: 选择需要返回的列。这里选择了`start_time`（轨迹起始时间）、`end_time`（轨迹结束时间）、`name`（虚拟人名）和`camera_id_list`（经过的摄像头ID列表）。\n\n2. `from`: 从哪个表中选择数据。这里是`a_people_trail`（行人轨迹表）。\n\n3. `join`: 连接其他表以获取更丰富的信息。这里有5个连接：\n   - `s_camera`（摄像头表），通过`end_camera_id`和`id`进行连接；\n   - `s_room`（房间表），通过`camera_id`和`id`进行连接；\n   - `s_building`（楼栋表），通过`room_id`和`id`进行连接；\n   - `s_region`（区域表），通过`building_id`和`id`进行连接；\n   - `s_organization`（单位表），通过`region_id`和`id`进行连接。\n\n4. `where`: 过滤条件，只返回满足条件的数据。这里的条件是：所在区域为“高新校区”，所在单位为“中国科学技术大学”，所在的楼栋名称为“1号学生公寓”。\n\n5. `order by`: 对结果按照某个列的值进行排序。这里是按照`start_time`（轨迹起始时间）降序排序。\n\n6. `limit`: 限制返回的结果数量。这里是限制返回的前10条记录。"
    },
    {
        "query": "信智楼不同年龄段的人数",
        "script": "```sql\nselect case 人员表.age_group when 'AgeLess18' then '小于18岁' when 'Age18-60' then '18-60岁' else '大于60岁' end as '年龄组', count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.age_group  order by 人员表.age_group asc;\n```\n这是一个SQL查询语句，用于计算\"信智楼\"中不同年龄段的人数。以下是各部分的详细解释：\n\n1. `select case`：开始一个CASE表达式。CASE表达式可以根据条件对列进行转换。\n2. `人员表.age_group`：这是源表（可能是名为“人员表”的表格）中的一列，用来存储每个人的年龄分组。\n3. `when 'AgeLess18'`：当\"人员表\"的\"age_group\"列为\"AgeLess18\"时，即对应的是小于18岁的年龄组。\n4. `then '小于18岁'`：在CASE表达式的THEN子句中，将这个年龄组的值转换为字符串“小于18岁”。\n5. `when 'Age18-60'`：当\"人员表\"的\"age_group\"列为\"Age18-60\"时，即对应的是18-60岁的年龄组。\n6. `then '18-60岁'`：在CASE表达式的THEN子句中，将这个年龄组的值转换为字符串“18-60岁”。\n7. `else '大于60岁'`：在CASE表达式的ELSE子句中，将其他非上述两个年龄组的值转换为字符串“大于60岁”。\n8. `end as '年龄组'`：结束CASE表达式，并将结果命名为“年龄组”。\n9. `count(*) as 人数`：统计每个年龄组的人数。\n10. `from d_people as 人员表`：指定数据源，并为其命名。这里将\"d_people\"表称为“人员表”。\n11. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：将\"s_camera\"表（可能表示摄像头信息）与\"人员表\"通过\"camera_id\"和\"id\"字段连接起来。\n12. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将\"s_room\"表（可能表示房间信息）与\"摄像头表\"通过\"pid\"和\"id\"字段连接起来。\n13. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将\"s_building\"表（可能表示楼栋信息）与\"房间表\"通过\"pid\"和\"id\"字段连接起来。\n14. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将\"s_region\"表（可能表示区域信息）与\"楼栋表\"通过\"pid\"和\"id\"字段连接起来。\n15. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将\"s_organization\"表（可能表示单位信息）与\"区域表\"通过\"pid\"和\"id\"字段连接起来。\n16. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：筛选出最近5分钟内有记录的人员。\n17. `and 区域表.region_name='高新校区'`：筛选出位于“高新校区”的数据。\n18. `and 单位表.org_name='中国科学技术大学'`：筛选出属于“中国科学技术大学”的数据。\n19. `and 楼栋表.building_name='信智楼'`：筛选出位于“信智楼”的数据。\n20. `group by 人员表.age_group`：按照\"人员表\"的\"age_group\"列对数据进行分组，以便对每个年龄组进行计数。\n21. `order by 人员表.age_group asc`：按照\"人员表\"的\"age_group\"列对结果进行升序排列。"
    },
    {
        "query": "有多少人戴眼镜？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段 SQL 语言，用于查询某个条件下的戴眼镜人数。下面是对这段 SQL 的解释：\n\n1. `SELECT COUNT(*) AS 戴眼镜人数`: 查询满足条件的戴眼镜的人数。\n\n2. `FROM d_people AS 人员表`: 从 `d_people` 表（假设这是人员信息表）开始查询。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`: 连接 `s_camera` 表（假设这是摄像头表，包含摄像头的 ID 和其他信息），通过 `camera_id` 字段将 `d_people` 和 `s_camera` 关联起来。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 连接 `s_room` 表（假设这是房间表，包含房间的 ID 和其他信息），通过 `pid` 字段将 `s_camera` 和 `s_room` 关联起来。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 连接 `s_building` 表（假设这是楼栋表，包含楼栋的 ID 和其他信息），通过 `pid` 字段将 `s_room` 和 `s_building` 关联起来。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 连接 `s_region` 表（假设这是区域表，包含区域的 ID 和其他信息），通过 `pid` 字段将 `s_building` 和 `s_region` 关联起来。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 连接 `s_organization` 表（假设这是单位表，包含单位的 ID 和其他信息），通过 `pid` 字段将 `s_region` 和 `s_organization` 关联起来。\n\n8. `JOIN t_glasses AS 眼镜维表 ON 人员表.glasses = 眼镜维表.id`: 连接 `t_glasses` 表（假设这是眼镜维表，包含眼镜的 ID 和其他信息），通过 `glasses` 字段将 `d_people` 和 `t_glasses` 关联起来。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, NOW()) < 5 AND 眼镜维表.name = '戴眼镜' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 设置查询条件，即眼镜佩戴时间不超过 5 分钟、眼镜类型为“戴眼镜”、所在区域为“高新校区”、所在单位为“中国科学技术大学”。"
    },
    {
        "query": "告诉我现在1号学科楼有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='1号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前（最近）的1号学科楼的人数。具体解释如下：\n\n1. `select 人数分布表.num as 人数`：选择\"人数分布表\"表的\"num\"字段并将其重命名为\"人数\"。这个字段表示了人数。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定查询的表名为\"a_people_spread_day_building\"，并为其分配一个别名\"人数分布表\"，以便在后续的查询条件中方便使用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：这个条件限制了统计时间的范围，即距离当前时间（now()函数返回的当前时间）不到5小时的数据才会被查询到。这样可以确保获取的是最近的统计数据。\n\n4. `and 人数分布表.building_name='1号学科楼'`：限制查询结果只包含\"1号学科楼\"的人数数据。\n\n5. `and 人数分布表.region_name='高新校区'`：同上，进一步限制了查询结果只包含\"高新校区\"的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：再次同上，进一步限制了查询结果只包含\"中国科学技术大学\"的数据。\n\n7. `order by 人数分布表.stat_time desc limit 1`：按照\"stat_time\"字段的降序（从新到旧）排列查询结果，并仅返回第一条记录（limit 1）。这意味着将获取1号学科楼最新的人数数据。"
    },
    {
        "query": "食堂监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个表中联合查询并统计满足条件的食堂监控摄像头的数量。具体解释如下：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数`count(*)`作为输出列，并命名为`摄像头数量`，用于计算符合条件的摄像头总数。\n\n2. `from s_camera as 摄像头表`: 指定查询的起点是`s_camera`表，这里将表名简写为`摄像头表`以便后续连接操作。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 使用内连接（JOIN）将`摄像头表`与`s_room`表（这里简写为`房间表`）关联起来，连接条件是`摄像头表`的`pid`字段等于`房间表`的`id`字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 使用内连接将`房间表`与`s_building`表（这里简写为`楼栋表`）关联起来，连接条件是`房间表`的`pid`字段等于`楼栋表`的`id`字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 使用内连接将`楼栋表`与`s_region`表（这里简写为`区域表`）关联起来，连接条件是`楼栋表`的`pid`字段等于`区域表`的`id`字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 使用内连接将`区域表`与`s_organization`表（这里简写为`单位表`）关联起来，连接条件是`区域表`的`pid`字段等于`单位表`的`id`字段。\n\n7. `where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只有当`楼栋表`的`building_name`字段值等于\"学生食堂\"、`区域表`的`region_name`字段值等于\"高新校区\"以及`单位表`的`org_name`字段值等于\"中国科学技术大学\"时，才符合查询要求。\n\n综上所述，这个查询语句的目的是统计位于\"高新校区\"的中国科学技术大学\"学生食堂\"内的摄像头数量。"
    },
    {
        "query": "1号学科楼安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算1号学科楼安装的摄像头数量。下面是各个子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择函数count()，计算满足条件的摄像头的总数。\n2. `from s_camera as 摄像头表`: 数据来源是s_camera表，这里将其简称为“摄像头表”。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 使用内连接（INNER JOIN）将s_camera表与s_room表相连，连接条件是摄像头表中的pid字段等于房间表中的id字段。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 使用内连接将s_room表与s_building表相连，连接条件是房间表中的pid字段等于楼栋表中的id字段。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 使用内连接将s_building表与s_region表相连，连接条件是楼栋表中的pid字段等于区域表中的id字段。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 使用内连接将s_region表与s_organization表相连，连接条件是区域表中的pid字段等于单位表中的id字段。\n7. `where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 筛选条件是楼栋表的building_name字段值为“1号学科楼”，区域表的region_name字段值为“高新校区”，单位表的org_name字段值为“中国科学技术大学”。\n\n这个查询的目的是找出所有位于\"1号学科楼\"、属于\"高新校区\"且归属\"中国科学技术大学\"的摄像头数量。"
    },
    {
        "query": "告诉我现在6号学生公寓有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='6号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中获取与特定条件匹配的数据。这里我为您解释这个语句的各个部分：\n\n1. `select 人数分布表.num as 人数`：选择 `num` 列作为结果中的 \"人数\" 字段。这里的 `as` 关键字用于重命名列名。\n\n2. `from a_people_spread_day_building as 人数分布表`：从名为 `a_people_spread_day_building` 的表中选择数据，并将其临时命名为 \"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置一个条件，即 `stat_time`（记录时间）距离当前时间的小时数小于 5。这表示只选择过去 5 小时内记录的数据。\n\n4. `and 人数分布表.building_name='6号学生公寓'`：进一步筛选条件，确保选择的建筑名称是 \"6号学生公寓\"。\n\n5. `and 人数分布表.region_name='高新校区'`：继续设置过滤条件，要求所在区域的名称为 \"高新校区\"。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：再添加一个过滤条件，确保组织名称是 \"中国科学技术大学\"。\n\n7. `order by 人数分布表.stat_time desc`：按照 `stat_time` 降序排列结果，这意味着最近的记录将排在最前面。\n\n8. `limit 1`：限制返回的结果数量，只取一条记录。"
    },
    {
        "query": "哪里人最多？",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num desc  limit 10;\n```\n这是一段SQL查询语句，用于从数据库中获取某个特定时间范围内的人数分布信息。以下是各部分的解释：\n\n1. `select 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数`：选择需要查询的列，包括建筑名称和人数。\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表，即a_people_spread_day_building表，这里将其简称为“人数分布表”。\n3. `where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置查询条件，即统计时间与当前时间的小时差小于5小时。这个条件保证了查询的数据是近5小时内的。\n4. `and 人数分布表.region_name='高新校区'`：进一步设定查询条件，即只查询高新校区的数据。\n5. `and 人数分布表.org_name='中国科学技术大学'`：继续设定查询条件，即只查询中国科学技术大学的数据。\n6. `order by 人数分布表.num desc`：按照人数的降序排列结果集。\n7. `limit 10`：限制返回的结果数量，这里只取前10条记录。"
    },
    {
        "query": "最近识别到的人员中，不同朝向的人数是多少？",
        "script": "```sql\nselect 朝向维表.name as 朝向, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 朝向维表.name  order by 朝向维表.name asc;\n```\n这是一个复杂的SQL查询语句，用于从多个表中获取特定条件下的人员信息。以下是各子句的解释：\n\n1. `SELECT 朝向维表.name AS 朝向, COUNT(*) AS 人数`：查询结果将包含一个名为“朝向”的列，该列表示人员的朝向（例如，东、南、西或北），以及一个名为“人数”的列，该列显示每个朝向的人员数量。\n\n2. `FROM d_people AS 人员表`：查询将从名为`d_people`的表开始，该表存储人员的信息。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`：通过`摄像头表`与`d_people`表连接，以获取与每个人员相关的摄像头的信息。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`：通过`房间表`与`s_camera`表连接，以获取与每个摄像头相关的房间的信息。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`：通过`楼栋表`与`s_room`表连接，以获取与每个房间相关的楼栋的信息。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`：通过`区域表`与`s_building`表连接，以获取与每个楼栋相关的区域的信息。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`：通过`单位表`与`s_region`表连接，以获取与每个区域相关的单位的信息。\n\n8. `JOIN t_orientation AS 朝向维表 ON 人员表.orientation = 朝向维表.id`：通过`朝向维表`与`d_people`表连接，以获取与每个人员相关的朝向信息。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, NOW()) < 5 AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`：设置查询条件，包括时间过滤（即在过去5分钟内收集的数据），区域（即高新校区）和单位（即中国科学技术大学）筛选。\n\n10. `GROUP BY 朝向维表.name ORDER BY 朝向维表.name ASC`：按人员朝向对结果进行分组和排序，以便更容易地查看每个朝向的人员数量。"
    },
    {
        "query": "2号学生公寓摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算\"2号学生公寓\"的摄像头数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数COUNT(*)作为结果，并将结果命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`: 从s_camera表（假设这是存储摄像头的表）开始查询。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表（假设这是存储宿舍信息的表），连接条件是摄像头表的pid（假设表示摄像头所属宿舍的ID）等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表（假设这是存储楼栋信息的表），连接条件是房间表的pid等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表（假设这是存储校区或行政区信息的表），连接条件是楼栋表的pid等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表（假设这是存储学校或组织信息的表），连接条件是区域表的pid等于单位表的id。\n\n7. `where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只返回满足条件的数据，即：要求楼栋名为\"2号学生公寓\"，区域名为\"高新校区\"，单位为\"中国科学技术大学\"。\n\n综合以上各子句，这段SQL将返回满足条件的所有摄像头数量。"
    },
    {
        "query": "统计学生食堂每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取并统计“学生食堂”在“高新校区”的最近30天内每天的最低人数。下面是各部分的详细解释：\n\n1. select: 选择要查询的列和聚合函数。\n2. min(人数分布表.stat_time): 计算每一天的最早记录的时间（即最早的就餐时间）。\n3. round(min(人数分布表.num)): 对每一天的最小人数进行四舍五入取整。\n4. from: 指定数据来源表，这里是a_people_spread_day_building，表示人群分布日信息表。\n5. WHERE: 过滤条件，只返回满足条件的数据。这里筛选的条件包括：建筑名称是“学生食堂”、与当前时间的差值小于30天、所在地区名称为“高新校区”以及组织名称为“中国科学技术大学”。\n6. group by: 对哪些列进行分组操作，以便对每组数据进行聚合函数运算。这里按日期分组，即按天统计人数。\n7. order by: 对结果按照某个字段排序。这里的排序依据是最早的就餐时间（即最早的一天）。\n8. asc: 升序排列。"
    },
    {
        "query": "办公楼监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于统计满足特定条件的摄像头的数量。以下是各个部分的具体含义：\n\n1. select: 从数据库中检索数据。\n2. count(*): 计算满足条件数据的总数。这里使用count函数计算摄像头的数量。\n3. as 摄像头数量: 为返回的计数结果起个别名，便于后续处理。\n4. from: 指定要查询的数据表。这里是s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）五个数据表。\n5. join: 连接不同的数据表，基于它们之间的关联关系。\n6. on: 定义数据表之间的关系。例如，摄像头表与房间表通过摄像头表的pid等于房间表的id进行连接；房间表与楼栋表通过房间表的pid等于楼栋表的id进行连接；楼栋表与区域表通过楼栋表的pid等于区域表的id进行连接；区域表与单位表通过区域表的pid等于单位表的id进行连接。\n7. where: 过滤条件，只选择满足特定条件的数据。这里是根据楼栋名称、区域名称和单位名称筛选出位于“行政办公楼”、“高新校区”和“中国科学技术大学”的摄像头。\n8. building_name, region_name, org_name: 这三个是相应数据表的字段名，分别表示楼栋名称、区域名称和单位名称。"
    },
    {
        "query": "5号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='5号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算特定条件下摄像头的数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数count(*)作为结果集，将返回的数量命名为摄像头数量。\n\n2. `from s_camera as 摄像头表`：指定查询的主表s_camera，用于存储摄像头的数据。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接s_camera和s_room表，通过摄像头表的pid字段等于房间表的id字段建立关联。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接s_room和s_building表，通过房间表的pid字段等于楼栋表的id字段建立关联。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接s_building和s_region表，通过楼栋表的pid字段等于区域表的id字段建立关联。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接s_region和s_organization表，通过区域表的pid字段等于单位表的id字段建立关联。\n\n7. `where 楼栋表.building_name='5号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，只返回满足这些条件的数据。\n\n8. `;`：结束查询语句的标志。"
    },
    {
        "query": "找出图教中心一个月内，每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于计算图书馆一个月内每天的平均人数。以下是各部分的解释：\n\n1. `SELECT min(人数分布表.stat_time) as 统计时间`: 选择最小（最早的）的统计时间作为结果中的统计时间列。\n2. `ROUND(AVG(人数分布表.num)) as 平均人数`: 计算总人数的平均值，四舍五入到整数。\n3. `FROM a_people_spread_day_building AS 人数分布表`: 从名为\"a_people_spread_day_building\"的数据表中选择数据，并将该表简称为\"人数分布表\"。\n4. `WHERE 人数分布表.building_name='图书教育中心'`: 限制查询结果只包括名为\"图书教育中心\"的建筑的数据。\n5. `AND DATEDIFF(NOW(), 人数分布表.stat_time) < 30`: 限制查询结果只包括在过去30天内（不包括今天）的数据。DATEDIFF函数计算两个日期之间的差值。\n6. `AND 人数分布表.region_name='高新校区' AND 人数分布表.org_name='中国科学技术大学'`: 限制查询结果只包括位于\"高新校区\"且属于\"中国科学技术大学\"的数据。\n7. `GROUP BY 人数分布表.stat_day`: 对每一天的数据进行分组，以便计算每天的平均值。\n8. `ORDER BY min(人数分布表.stat_time) ASC`: 根据统计时间（最早的）对结果进行排序，升序排列。"
    },
    {
        "query": "告诉我现在3号学科楼有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='3号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL查询语句的目的是获取当前（时间戳与当前时间的差小于5小时）在3号学科楼的人数。\n\n具体步骤如下：\n\n1. `select 人数分布表.num as 人数`：选择`num`字段作为返回的\"人数\"。\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源是`a_people_spread_day_building`表，同时为其起一个别名“人数分布表”，便于后续使用。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置条件，限制返回的数据必须是5小时以内的时间点。其中`TIMESTAMPDIFF`函数用于计算两个时间点之间的差值，单位为小时。\n4. `and 人数分布表.building_name='3号学科楼'`：设置条件，限制返回的数据必须是在“3号学科楼”的记录。\n5. `and 人数分布表.region_name='高新校区'`：设置条件，限制返回的数据必须是在“高新校区”的记录。\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置条件，限制返回的数据必须是在“中国科学技术大学”的记录。\n7. `order by 人数分布表.stat_time desc limit 1`：排序规则为按照`stat_time`降序排列，并限制返回的结果集只有一条记录。\n\n执行上述查询，将得到目前3号学科楼的人数。"
    },
    {
        "query": "找出图书馆一个月内，每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个 SQL 查询语句，用于查找图书馆（假设名为 \"图书教育中心\"）在一个月内每天最少的人数。以下是各部分解释：\n\n1. `SELECT`：选择要返回的列和聚合函数。在这个例子中，我们选择了 `MIN()` 聚合函数来获取每天的最低人数，以及对应的统计时间。\n\n2. `MIN(人数分布表.stat_time) as 统计时间`：计算每日的最小统计时间。`MIN()` 函数在这里用于找到每一天的最小统计时间（即图书馆开门的时间）。\n\n3. `ROUND(MIN(人数分布表.num)) as 平均人数`：计算每日的平均人数。`MIN()` 函数用于找到每一天的最小人数。由于 `MIN()` 不提供平均值的计算，这里使用 `ROUND()` 函数将结果四舍五入到整数。\n\n4. `FROM a_people_spread_day_building as 人数分布表`：指定数据表名。在这个例子中，使用的是名为 `a_people_spread_day_building` 的表格，并为其取了一个别名“人数分布表”以简化后续的表达。\n\n5. `WHERE`：设置筛选条件。在这个例子中，筛选条件是图书馆名称为 “图书教育中心”，距离当前时间的天数小于 30 天，所在地区为 “高新校区”，所属单位为 “中国科学技术大学”。\n\n6. `GROUP BY`：按照指定的字段对数据进行分组。在这个例子中，按照日期（`stat_day`）进行分组，以便计算每天的最小人数。\n\n7. `ORDER BY`：设置排序方式。在这个例子中，按照最小统计时间（即最早到达图书馆的时间）升序排列。\n\n8. `ASC`：表示升序排列。如果不写此关键字，默认是升序排列；如果需要降序排列，可以使用 `DESC`。"
    },
    {
        "query": "食堂的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='学生食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中获取特定时间范围内食堂的人数。下面是该SQL语句的详细解释：\n\n1. `select 人数分布表.num as 人数`：选择名为`num`的列作为结果中的`人数`列。`num`是实际存储食堂人数的列名。\n\n2. `from a_people_spread_day_building as 人数分布表`：从名为`a_people_spread_day_building`的数据表中选择数据，并为其分配一个别名`人数分布表`，以便在后续的条件和排序中使用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置筛选条件，只选取距离当前时间（now()函数返回当前时间）小于5小时的数据。这里的TIMESTAMPDIFF()函数计算两个日期之间的差值（以小时为单位）。\n\n4. `and 人数分布表.building_name='学生食堂'`：进一步过滤数据，只选取`building_name`（建筑名称）字段值为'学生食堂'的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：继续过滤数据，只选取`region_name`（地区名称）字段值为'高新校区'的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：最后过滤数据，只选取`org_name`（组织名称）字段值为'中国科学技术大学'的数据。\n\n7. `order by 人数分布表.stat_time desc`：对结果进行排序，按照`stat_time`（数据统计时间）字段降序排列。\n\n8. `limit 1`：限制返回的结果数量，只返回一条数据。"
    },
    {
        "query": "目前人数最多的是哪些建筑？",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num desc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中获取当前人数最多的10座建筑。以下是各部分的解释：\n\n1. `select 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数`：选择要查询的列，分别是建筑的名称（building_name）和人数（num），并将它们分别命名为“建筑名称”和“人数”。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定查询的表名为`a_people_spread_day_building`，并为其起别名“人数分布表”，方便后续使用。\n\n3. `where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：设置查询条件，即时间差小于5小时，所在地区为“高新校区”，且所属单位为“中国科学技术大学”。\n\n4. `order by 人数分布表.num desc`：按照人数（num）降序排列结果，即先显示人数最多的建筑。\n\n5. `limit 10`：限制返回的结果数量，只取前10行数据。"
    },
    {
        "query": "哪里人最少？",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num asc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中获取某个时间段内（时间差小于5小时）的特定地区（高新校区）和组织的（中国科学技术大学）的人数信息。\n\n这个查询语句的主要部分如下：\n\n1. `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这部分用于计算当前时间与统计时间的时间差，限制只返回时间差小于5小时的数据。\n\n2. `人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 这部分用于筛选数据，仅返回特定地区和组织的数据。\n\n3. `order by 人数分布表.num asc limit 10`: 这部分用于对结果进行排序和限制数量。按照人数（num）字段升序排列（asc），并限制返回的数量为10条。"
    },
    {
        "query": "统计食堂一个月内每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于统计一个食堂（这里是“学生食堂”）在一个月内每天的最低人数。以下是各部分的解释：\n\n1. `SELECT min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数`: 选择最小的时间和对应的最小人数作为结果。\n2. `FROM a_people_spread_day_building as 人数分布表`: 从\"a_people_spread_day_building\"表（这里重命名为“人数分布表”）中获取数据。\n3. `WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 设置筛选条件，只选择\"学生食堂\"、\"高新校区\"和\"中国科学技术大学\"的数据，并且时间差（现在时间减去统计数据时间）小于30天。\n4. `group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc;`: 对数据进行分组，按照统计日期进行分组，并使用升序排序（ASC）按统计时间排列。"
    },
    {
        "query": "有多少人背双肩包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，它用于统计满足特定条件的背双肩包的人数。以下是各子句的详细解释：\n\n1. `select count(*) as 背双肩包的人数`: 选择计算满足条件的背双肩包的人数。\n\n2. `from d_people as 人员表`: 从人员表（假设名为d_people）中获取数据。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 联接摄像头表（假设名为s_camera），连接条件是人员表的camera_id等于摄像头表的id。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接房间表（假设名为s_room），连接条件是摄像头表的pid等于房间表的id。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接楼栋表（假设名为s_building），连接条件是房间表的pid等于楼栋表的id。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接区域表（假设名为s_region），连接条件是楼栋表的pid等于区域表的id。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接单位表（假设名为s_organization），连接条件是区域表的pid等于单位表的id。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`: 联接背包维表（假设名为t_bag），连接条件是人员表的bag等于背包维表的id。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 过滤条件，限制只返回在5分钟之内有活动的人员信息。\n\n10. `and 背包维表.name='背包'`: 过滤条件，限制只返回背包名称为“背包”的人员信息。\n\n11. `and 区域表.region_name='高新校区'`: 过滤条件，限制只返回位于“高新校区”的人员信息。\n\n12. `and 单位表.org_name='中国科学技术大学'`: 过滤条件，限制只返回属于“中国科学技术大学”的单位信息。"
    },
    {
        "query": "给出操场的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算操场（即“体育场”）的摄像头数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数值作为结果列的标题；\n2. `from s_camera as 摄像头表`: 从s_camera表中获取数据，将其称为摄像头表；\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将s_room表与摄像头表通过ID关联起来，用于确定摄像头的位置信息；\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将s_building表与房间表关联起来，进一步细化位置信息到具体的楼栋；\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将s_region表与楼栋表关联起来，得到更详细的位置信息到学校所在的校区；\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将s_organization表与区域表关联起来，得到最终的位置信息到学校名称；\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置筛选条件，只返回位于“体育场”、“高新校区”且属于“中国科学技术大学”的摄像头数量。"
    },
    {
        "query": "1号学生公寓总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算\"1号学生公寓\"的摄像头数量。以下是各个子句和表的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数COUNT(*)作为结果，并为其分配别名\"摄像头数量\"，即返回摄像头的总数。\n\n2. `from s_camera as 摄像头表`: 定义数据源为s_camera表，这里将其简称为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表（简称\"房间表\"），连接条件是摄像头表中的字段pid等于房间表中的字段id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表（简称\"楼栋表\"），连接条件是房间表中的字段pid等于楼栋表中的字段id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表（简称\"区域表\"），连接条件是楼栋表中的字段pid等于区域表中的字段id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表（简称\"单位表\"），连接条件是区域表中的字段pid等于单位表中的字段id。\n\n7. `where 楼栋表.building_name='1号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只选取满足这三个条件的记录，分别是：楼栋名称为\"1号学生公寓\"，所在地区为\"高新校区\"，所属单位为\"中国科学技术大学\"。\n\n综合以上信息，该查询将返回满足上述所有条件的1号学生公寓的摄像头数量。"
    },
    {
        "query": "统计图书馆每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中获取图书馆（在这里是\"图书教育中心\"）在近30天内每天的最高人流量。下面是对这个SQL语句的详细解释：\n\n1. `select`: 这是开始一个SQL查询的关键字。\n\n2. `min(人数分布表.stat_time) as 统计时间`: 这部分选择每个分组（由group by子句定义）的最小统计时间作为统计时间。\n\n3. `round(max(人数分布表.num)) as 平均人数`: 这部分计算每个分组的最大人流量，然后对其进行四舍五入以获得整数结果。\n\n4. `from a_people_spread_day_building as 人数分布表`: 这部分指定了数据来源，即\"a_people_spread_day_building\"表，并为其起了别名\"人数分布表\"，以便在后续查询中更方便地引用该表。\n\n5. `WHERE`: 这是定义筛选条件的关键字。在这个查询中，筛选条件包括：建筑名称为\"图书教育中心\"，统计时间与当前时间的差值小于30天，所在区域为\"高新校区\"，机构名称为\"中国科学技术大学\"。\n\n6. `AND`: 这是一个逻辑运算符，表示所有与AND关联的条件都必须满足，才能返回相应的记录。\n\n7. `DATEDIFF(now(), 人数分布表.stat_time) < 30`: 这部分计算当前时间和统计时间之间的天数差，确保我们只考虑过去30天内的数据。\n\n8. `group by 人数分布表.stat_day`: 这是按照统计日期对数据进行分组，以便在每个分组上应用聚合函数（例如这里的MIN和MAX）。\n\n9. `order by min(人数分布表.stat_time) asc`: 这部分按照统计时间对结果进行排序，升序（ASC）表示按照时间顺序从小到大排序。"
    },
    {
        "query": "当前拍到人的室内摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表格中筛选出满足特定条件的摄像头信息。下面是对这个查询语句的解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`：选择摄像头编号、安装位置和所属大楼作为查询结果中的列。\n\n2. `from s_camera as 摄像头表`：指定主查询的表是s_camera（摄像头表）。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将s_room（房间表）与摄像头表通过摄像头的父级ID（pid）连接在一起，获取每个摄像头的安装位置信息。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将s_building（楼栋表）与房间表通过房间的父级ID（pid）连接在一起，获取每个摄像头的所属大楼信息。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将s_region（区域表）与楼栋表通过楼栋的父级ID（pid）连接在一起，获取每个摄像头的所属区域信息。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将s_organization（单位表）与区域表通过区域的父级ID（pid）连接在一起，获取每个摄像头的所属单位信息。\n\n7. `where 摄像头表.inhouse = 1 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：筛选出在室内（即inhouse字段值为1）且在过去10分钟内有人被拍到的摄像头。这里使用了子查询，通过比较拍摄时间与当前时间的时间差（以分钟为单位）来筛选出符合条件的摄像头。\n\n8. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：进一步筛选出位于“高新校区”并且属于“中国科学技术大学”的摄像头。\n\n9. `order by 摄像头表.id asc limit 1000`：按照摄像头编号升序排列查询结果，并限制返回的数据量在1000条以内。"
    },
    {
        "query": "告诉我现在5号学生公寓有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='5号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前（时间接近当前时间的5小时以内）在5号学生公寓的人数信息。具体解释如下：\n\n1. `SELECT 人数分布表.num AS 人数`: 选择名为“人数”的列，该列为人数的数值；\n2. `FROM a_people_spread_day_building AS 人数分布表`: 从名为“a_people_spread_day_building”的数据表中选择数据；\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, NOW()) < 5`: 筛选条件，限制只考虑距离当前时间5小时以内的数据；\n4. `AND 人数分布表.building_name = '5号学生公寓'`: 进一步筛选，仅考虑建筑名为“5号学生公寓”的数据；\n5. `AND 人数分布表.region_name = '高新校区'`: 继续筛选，仅考虑地区名为“高新校区”的数据；\n6. `AND 人数分布表.org_name = '中国科学技术大学'`: 再次筛选，仅考虑组织名称为“中国科学技术大学”的数据；\n7. `ORDER BY 人数分布表.stat_time DESC`: 对结果进行排序，按照统计时间倒序排列，即最新的数据排在最前面；\n8. `LIMIT 1`: 限制返回的结果条数，本例中只返回一条结果。"
    },
    {
        "query": "找出图教中心一个月内，每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中检索一个月内在某个特定建筑（这里是图书教育中心）中的最低每日人数。以下是各部分的功能说明：\n\n1. `SELECT min(人数分布表.stat_time) as 统计时间`：选取最小的时间戳作为统计时间；\n2. `ROUND(MIN(人数分布表.num)) as 平均人数`：获取最小的每日人数，并四舍五入取整；\n3. `FROM a_people_spread_day_building as 人数分布表`：指定数据来源是a_people_spread_day_building这张表，并为其起个别名为“人数分布表”；\n4. `WHERE 人数分布表.building_name='图书教育中心'`：筛选出建筑名称为“图书教育中心”的数据；\n5. `AND DATEDIFF(NOW(), 人数分布表.stat_time) < 30`：筛选出距离现在不到一个月（以天为单位计算）的数据；\n6. `AND 人数分布表.region_name='高新校区'`：筛选出所在地区为“高新校区”的数据；\n7. `AND 人数分布表.org_name='中国科学技术大学'`：筛选出所属机构为“中国科学技术大学”的数据；\n8. `GROUP BY 人数分布表.stat_day`：按照日期对数据进行分组；\n9. `ORDER BY MIN(人数分布表.stat_time) ASC`：按统计时间的最小值升序排列数据。\n\n这个查询的目的是找到一个月内图书教育中心每天的最低人数。"
    },
    {
        "query": "最近识别到的人员中，不同上衣风格的人数是多少？",
        "script": "```sql\nselect substring(人员表.upper,6) as 上衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.upper  order by 人员表.upper asc;\n```\n这是一个SQL查询语句，用于计算不同上衣风格的人数。下面是各子句的详细解释：\n\n1. select substring(人员表.upper,6) as 上衣风格, count(*) as 人数: 选择上衣风格的子字符串（从第6位开始）作为“上衣风格”字段，并计算每种上衣风格出现的次数。\n\n2. from d_people as 人员表: 从人员表（d_people）中提取数据。\n\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 联接摄像头表（s_camera），连接条件是人员表中的摄像头ID与摄像头表中的ID相等。\n\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 联接房间表（s_room），连接条件是摄像头表中的父ID与房间表中的ID相等。\n\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 联接楼栋表（s_building），连接条件是房间表中的父ID与楼栋表中的ID相等。\n\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 联接区域表（s_region），连接条件是楼栋表中的父ID与区域表中的ID相等。\n\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 联接单位表（s_organization），连接条件是区域表中的父ID与单位表中的ID相等。\n\n8. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学': 设定查询条件，即距离当前时间5分钟以内，且位于“高新校区”和“中国科学技术大学”范围内。\n\n9. group by 人员表.upper: 根据人员表的上衣风格对数据进行分组。\n\n10. order by 人员表.upper asc: 对结果按照上衣风格的字母顺序进行升序排列。"
    },
    {
        "query": "找出师生活动中心一个月内，每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一段SQL查询语句，用于查找在一个月（35天）内，师生活动中心（building_name='师生活动中心'）每天的最低人数（即最少人数）。以下是各部分解释：\n\n1. select min(人数分布表.stat_time) as 统计时间: 这行代码选取了每一天的日期作为“统计时间”；\n2. round(min(人数分布表.num)) as 平均人数: 这行代码计算并返回了对应每个“统计时间”的最小值（即最少人数），并通过round函数将结果四舍五入保留整数位；\n3. from a_people_spread_day_building as 人数分布表: 从名为“a_people_spread_day_building”的表格中获取数据，并将其简称为“人数分布表”；\n4. WHERE 人数分布表.building_name='师生活动中心': 对查询进行筛选，仅选择与\"师生活动中心\"相关的记录；\n5. and DATEDIFF(now(), 人数分布表.stat_time) < 30: 这行代码确保了查询只针对过去30天的数据，DATEDIFF是计算两个日期之间差值的函数，此处将其与现在的时间进行比较；\n6. and 人数分布表.region_name='高新校区': 这行代码进一步限制了查询范围，只考虑位于“高新校区”的数据；\n7. and 人数分布表.org_name='中国科学技术大学': 同上，这行代码确保数据的组织名称是中国科学技术大学；\n8. group by 人数分布表.stat_day: 按照统计日期（即每天的日期）对数据进行分组，方便后续对每天的人数进行汇总；\n9. order by min(人数分布表.stat_time) asc: 这行代码按照“统计时间”（即每天的日期）升序排列查询结果，保证最早的日期排在最前面。"
    },
    {
        "query": "行政办公楼安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个 SQL 查询语句，用于统计“行政办公楼”安装了摄像头的数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择函数 COUNT 计算摄像头的总数，并将结果命名为 \"摄像头数量\"。\n2. `from s_camera as 摄像头表`: 声明数据源，即摄像头表，简称为 \"摄像头表\"。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头表的外键 pid（代表摄像头所在的房间）与房间表的 id（代表房间的标识）进行连接，以获取每个摄像头的具体房间信息。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间表的 pid 与楼栋表的 id 进行连接，以获取每个摄像头的具体楼栋信息。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋表的 pid 与区域表的 id 进行连接，以获取每个摄像头的具体区域信息。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域表的 pid 与单位表的 id 进行连接，以获取每个摄像头的具体单位信息。\n7. `where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，筛选出位于“行政办公楼”、“高新校区”且属于“中国科学技术大学”的摄像头。\n\n这个查询语句会返回一个结果集，其中包含满足条件的摄像头的数量。"
    },
    {
        "query": "没有人的室外摄像头有哪些",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个关联表中获取满足特定条件的摄像头信息。以下是各个部分和条件的解释：\n\n1. `s_camera as 摄像头表`：这是摄像头的表，其中包含了摄像头的ID（摄像头编号）、是否在室内等信息。\n2. `s_room as 房间表`：这个表包含了每个房间的信息，包括房间ID和房间名称等。\n3. `s_building as 楼栋表`：这个表包含了每个楼栋的信息，包括楼栋ID、楼栋名称等。\n4. `s_region as 区域表`：这个表包含了每个区域的信息，包括区域ID、区域名称等。\n5. `s_organization as 单位表`：这个表包含了每个单位的信息，包括单位ID和单位名称等。\n\n查询条件如下：\n\n- `摄像头表.inhouse = 0`：表示查询的是不在室内的摄像头。\n- `摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：这条子查询的意思是，排除那些在过去10分钟内有人经过的摄像头。\n- `区域表.region_name='高新校区'`：表示只查询位于“高新校区”的摄像头。\n- `单位表.org_name='中国科学技术大学'`：表示只查询属于“中国科学技术大学”的摄像头。\n\n最后，查询结果将按照摄像头ID升序排列，并且限制结果为前1000条。"
    },
    {
        "query": "查看从食堂出发的行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂' order by 行人轨迹表.start_time desc  limit 10;\n```\n这个SQL查询语句的目的是查看从某个特定地点（这里是\"学生食堂\"）出发的行人的轨迹信息。以下是各子句的解释：\n\n1. `select 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id`: 这部分是从\"行人轨迹表\"中选择的字段，包括轨迹的起始和结束时间、虚拟人名和经过的摄像头ID列表。\n\n2. `from a_people_trail as 行人轨迹表`: 从\"a_people_trail\"表中获取数据，并为其指定一个别名\"行人轨迹表\"，方便后续引用。\n\n3. `join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id`: 这部分是连接\"s_camera\"表（摄像头信息表），通过\"行人轨迹表\"中的开始摄像头的ID与\"摄像头表\"中的ID相等进行连接。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这部分是连接\"s_room\"表（房间信息表），通过\"摄像头表\"中的房间ID与\"房间表\"中的ID相等进行连接。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这部分是连接\"s_building\"表（楼栋信息表），通过\"房间表\"中的楼栋ID与\"楼栋表\"中的ID相等进行连接。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这部分是连接\"s_region\"表（区域信息表），通过\"楼栋表\"中的区域ID与\"区域表\"中的ID相等进行连接。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分是连接\"s_organization\"表（单位信息表），通过\"区域表\"中的单位ID与\"单位表\"中的ID相等进行连接。\n\n8. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂'`: 这部分是过滤条件，只选取满足特定区域、单位以及起始地点（学生食堂）的轨迹记录。\n\n9. `order by 行人轨迹表.start_time desc limit 10`: 这部分是对查询结果进行排序（按照起始时间降序排列），并限制返回记录的条数为10条。"
    },
    {
        "query": "学生食堂每天最少有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取学生食堂每天的最低人数。下面是对该SQL语句的分解和解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 这部分是选择最小（最早）的统计时间。`min()`函数在这里用来找出每一天中的最小统计时间，也就是最早的记录。\n\n2. `round(min(人数分布表.num)) as 平均人数`: 这部分是选择对应于最小（最早）统计时间的平均人数。`round()`函数在这里用于四舍五入，因为`min()`函数返回的是整数，四舍五入可以使得结果更加精确。\n\n3. `from a_people_spread_day_building as 人数分布表`: 这部分是从名为`a_people_spread_day_building`的数据表中选取数据，并将这个表命名为“人数分布表”，方便后续使用。\n\n4. `WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 这部分是设置查询条件。只有当建筑名称为“学生食堂”，并且统计时间与当前时间的差值小于30天，同时地区名称为“高新校区”且组织名称为“中国科学技术大学”时，才满足查询条件。\n\n5. `group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc`: 这部分是对查询结果进行分组和排序。按照统计日期（`stat_day`）对数据进行分组，并按照最小的统计时间（最早的记录）升序排列。"
    },
    {
        "query": "3号学科楼安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个表格中获取数据并计算满足特定条件的摄像头的数量。具体解释如下：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数`count(*)`作为结果集的列，并将其重命名为\"摄像头数量\"。这将返回满足后续WHERE子句条件的摄像头总数。\n\n2. `from s_camera as 摄像头表`: 指定查询的主表格是s_camera（假设这个表格存储了摄像头的数据），并将它简写为\"摄像头表\"以方便后续引用。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 使用内连接将s_camera表与s_room表结合在一起，条件是摄像头表的pid字段等于房间表的id字段。这表示一个摄像头对应一个房间。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 使用内连接将s_room表与s_building表结合在一起，条件是房间表的pid字段等于楼栋表的id字段。这表示一个房间属于一个楼栋。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 使用内连接将s_building表与s_region表结合在一起，条件是楼栋表的pid字段等于区域表的id字段。这表示一个楼栋位于一个区域。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 使用内连接将s_region表与s_organization表结合在一起，条件是区域表的pid字段等于单位表的id字段。这表示一个区域归属于一个单位（例如学校或公司）。\n\n7. `where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置WHERE子句的条件，即要求楼栋表中的建筑名称是“3号学科楼”，区域表中的区域名称是“高新校区”，并且单位表中的单位名称是“中国科学技术大学”。只有满足这些条件的摄像头才会被统计到摄像头数量中。"
    },
    {
        "query": "老师食堂安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算在特定条件下的监控摄像头的数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择摄像头的数量作为结果。这里使用count函数来统计符合条件的摄像头的总数。\n\n2. `from s_camera as 摄像头表`：从s_camera表（假设这是一个存储摄像头信息的表）开始查询。将这个表称为“摄像头表”，方便后续理解。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接s_room表（假设这是一个存储房间信息的表）。连接条件是摄像头表的pid字段（假设这是表示摄像头所属房间的字段）等于房间表的id字段。将这个表称为“房间表”。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接s_building表（假设这是一个存储楼栋信息的表）。连接条件是房间表的pid字段等于楼栋表的id字段。将这个表称为“楼栋表”。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接s_region表（假设这是一个存储区域信息的表）。连接条件是楼栋表的pid字段等于区域表的id字段。将这个表称为“区域表”。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接s_organization表（假设这是一个存储单位/组织信息的表）。连接条件是区域表的pid字段等于单位表的id字段。将这个表称为“单位表”。\n\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件。只有满足这些条件的摄像头才会被计算在内：楼栋名称是“教工食堂”，区域名称是“高新校区”，单位/组织名称是“中国科学技术大学”。"
    },
    {
        "query": "3号学科楼现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='3号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL语句用于查询\"3号学科楼\"当前的人数。以下是各个子句的解释：\n\n1. `select 人数分布表.num as 人数`：选择字段\"num\"并将其重命名为\"人数\"，这个字段表示了该建筑物的人数。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表，名为\"a_people_spread_day_building\"，将其简称为\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置一个时间过滤条件，即从统计时间（字段\"stat_time\"）到现在的小时差小于5小时。\n\n4. `and 人数分布表.building_name='3号学科楼'`：限制查询的建筑物名字为\"3号学科楼\"。\n\n5. `and 人数分布表.region_name='高新校区'`：限制查询的区域名字为\"高新校区\"。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：限制查询的组织名字为\"中国科学技术大学\"。\n\n7. `order by 人数分布表.stat_time desc`：按照统计时间的降序排序结果。\n\n8. `limit 1`：返回结果只取一行，即最新的数据。"
    },
    {
        "query": "老师食堂安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 查询语句，用于计算满足特定条件的摄像头数量。下面是各部分的具体含义：\n\n1. `count(*) as 摄像头数量`: 这是 SQL 的聚合函数 `COUNT`，用于计算符合条件的摄像头的总数。这里将其结果命名为 \"摄像头数量\"。\n\n2. `s_camera as 摄像头表`: 这定义了一个名为 `s_camera` 的摄像头数据表。在后续联表操作中，这个表将与其他表进行关联以获取摄像头信息。\n\n3. `s_room as 房间表`: 这定义了一个名为 `s_room` 的房间数据表。它将与摄像头表进行关联，以便根据摄像头所在房间信息进行筛选。\n\n4. `s_building as 楼栋表`: 这定义了一个名为 `s_building` 的楼栋数据表。它与房间表关联，以便进一步筛选出位于特定楼栋的摄像头。\n\n5. `s_region as 区域表`: 这定义了一个名为 `s_region` 的区域数据表。它与楼栋表关联，以便最终筛选出位于特定区域的摄像头。\n\n6. `s_organization as 单位表`: 这定义了一个名为 `s_organization` 的单位数据表。它与区域表关联，以便确定摄像头的归属单位。\n\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这段条件语句对筛选出的摄像头进行了更详细的限制。只有那些位于“教工食堂”、“高新校区”且归属于“中国科学技术大学”的摄像头才会被计入计数。\n\n通过以上步骤，这条 SQL 语句将返回满足所有这些条件的摄像头的数量。"
    },
    {
        "query": "图教中心每天平均有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取“图书教育中心”在近30天内的平均每天人数。以下是查询语句的详细解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选择最小的统计时间作为结果中的统计时间。\n2. `round(avg(人数分布表.num)) as 平均人数`: 对人数分布表的num字段求平均值，并四舍五入保留小数位数（具体由数据库的round函数参数决定）。\n3. `from a_people_spread_day_building as 人数分布表`: 从名为a_people_spread_day_building的数据表中选择数据，并将其简称为人数分布表。\n4. `WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 设置查询条件，即建筑名称为“图书教育中心”、统计时间与当前时间差小于30天、地区名称为“高新校区”和学校名称为“中国科学技术大学”。\n5. `group by 人数分布表.stat_day`: 根据统计日期对数据进行分组。\n6. `order by min(人数分布表.stat_time) asc`: 按照统计时间的升序排列结果。"
    },
    {
        "query": "有多少房间部署了监控点位？",
        "script": "```sql\nselect count(distinct 房间表.id) as 安装了摄像头的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算在某个特定区域的某个单位的房间内安装的监控点位的总数。\n\n1. `s_camera as 摄像头表`：表示将摄像头信息表命名为摄像头表。\n2. `s_room as 房间表`：表示将房间信息表命名为房间表。\n3. `s_building as 楼栋表`：表示将楼栋信息表命名为楼栋表。\n4. `s_region as 区域表`：表示将地区信息表命名为区域表。\n5. `s_organization as 单位表`：表示将单位信息表命名为单位表。\n6. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：表示筛选出满足这两个条件的数据，即只在\"高新校区\"和\"中国科学技术大学\"范围内进行查询。\n7. `count(distinct 房间表.id) as 安装了摄像头的房间数量`：计算并返回房间表中ID（代表每个具体的房间）不重复的个数，即安装了摄像头的房间数量。\n\n整个语句的解释是：通过摄像头表、房间表、楼栋表、区域表和单位表五个表的连接操作，找出满足特定区域和单位条件下的所有房间，然后对这些房间进行去重计数，得出在该区域内该单位内安装了摄像头的房间数量。"
    },
    {
        "query": "4号学生公寓总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询某个特定地点（这里是“4号学生公寓”）的摄像头数量。具体解释如下：\n\n1. `select` 关键字表示开始一个选择语句，后面跟着需要查询的列名和别名。\n2. `count(*) as 摄像头数量` 表示计算满足条件的摄像头总数，并将结果命名为 \"摄像头数量\"。\n3. `from` 关键字表示开始指定要查询的数据来源，这里是`s_camera`、`s_room`、`s_building`、`s_region`和`s_organization`五个表。\n4. `join` 关键字用于连接不同的表。在这个查询中，通过`on`关键字设置连接条件，使得`s_camera`与`s_room`、`s_room`与`s_building`、`s_building`与`s_region`以及`s_region`与`s_organization`这四个表之间建立了关系。\n5. `where` 关键字用于过滤数据，只返回满足特定条件的记录。在这个查询中，要求`楼栋表.building_name`等于“4号学生公寓”，`区域表.region_name`等于“高新校区”，且`单位表.org_name`等于“中国科学技术大学”。\n\n最后，这个查询将返回满足这些条件的摄像头数量。"
    },
    {
        "query": "信智楼背双肩包的人数",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询语句，用于查询在特定时间和地点（即“信智楼”和“高新校区”）的中国科学技术大学学生中，过去5分钟内在双肩背包的人数。以下是各部分的具体解释：\n\n1. `d_people` AS `人员表`：表示人员数据表，存储了每个人的相关信息；\n2. `s_camera` AS `摄像头表`：表示摄像头数据表，存储了每个摄像头的ID及其所在房间的ID；\n3. `s_room` AS `房间表`：表示房间数据表，存储了每个房间的ID及其所属楼栋的ID；\n4. `s_building` AS `楼栋表`：表示楼栋数据表，存储了每个楼栋的ID及其所属区域的ID；\n5. `s_region` AS `区域表`：表示区域数据表，存储了每个区域的ID及其所属单位的ID；\n6. `s_organization` AS `单位表`：表示单位数据表，存储了每个单位的ID及其名称；\n7. `t_bag` AS `背包维表`：表示背包类型数据表，存储了不同类型的背包及其名称；\n8. `TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：这个条件限制了查询时间范围，即最近5分钟内的记录；\n9. `背包维表.name='背包'`：这个条件限制了查询对象必须是背着双肩背包的学生；\n10. `区域表.region_name='高新校区'`：这个条件限制了查询地点必须是中国科学技术大学的高新校区；\n11. `单位表.org_name='中国科学技术大学'`：这个条件限制了查询单位必须是中国科学技术大学；\n12. `楼栋表.building_name='信智楼'`：这个条件限制了查询楼栋必须是信智楼。\n\n通过上述查询，可以获取到在过去5分钟内，中国科技大学高新校区信智楼内背着双肩背包的学生人数。"
    },
    {
        "query": "目前哪些建筑人数最少？",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num asc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中获取某些信息。下面是该SQL语句的详细解释：\n\n1. `select 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数`：选择要返回的两列，分别是建筑名称和人数。这里使用`as`关键字为这两列起了别名，便于后续操作。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据源，即从名为`a_people_spread_day_building`的表中选取数据。同时，将这个表用别名`人数分布表`代替，以便后续在WHERE子句中进行简化。\n\n3. `where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置时间筛选条件，即仅选择统计时间与当前时间的小时差小于5的数据。\n\n4. `and 人数分布表.region_name='高新校区'`：设置区域筛选条件，即仅选择地区名称为'高新校区'的数据。\n\n5. `and 人数分布表.org_name='中国科学技术大学'`：设置机构筛选条件，即仅选择机构名称为'中国科学技术大学'的数据。\n\n6. `order by 人数分布表.num asc`：按照人数进行升序排序，即按人数从小到大排列。\n\n7. `limit 10`：限制返回的数据量，即只返回前10条数据。"
    },
    {
        "query": "找出师生活动中心一个月内，每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这个SQL查询的目的是查找师生活动中心在一个月内每天的最高人数。它从a_people_spread_day_building（人数分布表）中获取数据，并对其进行分组以获取每个日期的最高人数。以下是查询的各个部分的详细解释：\n\n1. `SELECT min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数`: 这部分选择最小的时间（即每天的开始时间）和该日的最高人数。\n\n2. `FROM a_people_spread_day_building as 人数分布表`: 从名为a_people_spread_day_building的表中获取数据。\n\n3. `WHERE 人数分布表.building_name='师生活动中心'`: 限制只选择师生活动中心的数据。\n\n4. `AND DATEDIFF(now(), 人数分布表.stat_time) < 30`: 这个条件确保只考虑过去30天的数据。\n\n5. `AND 人数分布表.region_name='高新校区'`: 进一步筛选只考虑高新校区的数据。\n\n6. `AND 人数分布表.org_name='中国科学技术大学'`: 再次过滤数据，确保只包括中国科学技术大学的记录。\n\n7. `GROUP BY 人数分布表.stat_day`: 对数据进行分组，以便按日期计算最高人数。\n\n8. `ORDER BY min(人数分布表.stat_time) ASC`: 按日期升序排列结果，使最早的日期在最前面。"
    },
    {
        "query": "信智楼有多少人戴帽子？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询语句，用于计算在特定时间和地点范围内“信智楼”里戴帽子的人数。以下是各部分的具体含义：\n\n1. `select count(*) as 戴帽子人数`: 查询的目标是计算满足条件的戴帽子的总人数。\n\n2. `from d_people as 人员表`: 定义了人员表（d_people）作为数据源。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接摄像头表（s_camera），基于摄像头ID匹配。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接房间表（s_room），基于房间ID匹配。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接楼栋表（s_building），基于楼栋ID匹配。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接区域表（s_region），基于区域ID匹配。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接单位表（s_organization），基于单位ID匹配。\n\n8. `join t_hat as 帽子维表 on 人员表.hat=帽子维表.id`: 连接帽子维表（t_hat），基于帽子ID匹配。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='戴帽子'`: 限制条件，要求查询的数据是最近5分钟内的且帽子状态为\"戴帽子\"。\n\n10. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 进一步限制条件，只考虑位于“高新校区”、“中国科学技术大学”和“信智楼”的记录。\n\n综合以上，这个查询的目的是计算“信智楼”里最近5分钟内佩戴帽子的人数。"
    },
    {
        "query": "有多少人拿手提包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段SQL查询语句，用于计算在“高新校区”的中国科学技术大学中，过去五分钟里拿手提包的人数。以下是各子句和表的解释：\n\n1. `select count(*) as 背双肩包的人数`：选择计数（即人数）作为结果。\n2. `from d_people as 人员表`：从人员表（假设名为d_people）开始查询。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接摄像头表（假设名为s_camera），依据条件是人员在摄像头表中对应的ID与摄像头的ID相等。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表（假设名为s_room），依据条件是摄像头的父ID等于房间的ID。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表（假设名为s_building），依据条件是房间的父ID等于楼栋的ID。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表（假设名为s_region），依据条件是楼栋的父ID等于区域的ID。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表（假设名为s_organization），依据条件是区域的父ID等于单位的ID。\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`：连接背包维表（假设名为t_bag），依据条件是人员的背包类型与背包维表中的ID相对应。\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：设置时间范围限制，只统计过去五分钟的数据。\n10. `and 背包维表.name='手提包'`：限制统计的背包类型为\"手提包\"。\n11. `and 区域表.region_name='高新校区'`：限制统计的区域为\"高新校区\"。\n12. `and 单位表.org_name='中国科学技术大学'`：限制统计的单位为\"中国科学技术大学\"。"
    },
    {
        "query": "给出体育馆安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算体育馆（building_name为'体育馆'）在中国科学技术大学（org_name为'中国科学技术大学'）高新校区（region_name为'高新校区'）的摄像头（s_camera表的记录）数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择函数COUNT(*)来计算满足条件的摄像头数量，并将结果命名为\"摄像头数量\"。\n2. `from s_camera as 摄像头表`: 声明从s_camera表（代表摄像头信息的数据库表）开始查询。将这个表简称为\"摄像头表\"。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和房间表（存储体育馆的房间信息），连接条件是摄像头表中的字段pid等于房间表中的字段id。将这个房间表简称为\"房间表\"。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表和楼栋表（存储体育馆所在楼宇的信息），连接条件是房间表中的字段pid等于楼栋表中的字段id。将这个楼栋表简称为\"楼栋表\"。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表和区域表（存储体育馆所在校区的信息），连接条件是楼栋表中的字段pid等于区域表中的字段id。将这个区域表简称为\"区域表\"。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表和单位表（存储体育馆所属单位的信息），连接条件是区域表中的字段pid等于单位表中的字段id。将这个单位表简称为\"单位表\"。\n7. `where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求被查询的体育馆、校区和单位必须分别与指定的名称相符。\n\n综上所述，该查询语句的目的是在特定条件下统计体育馆的摄像头数量。"
    },
    {
        "query": "异常事件类型数量分布",
        "script": "```sql\nselect 异常类型表.name as 异常行为类型, count(*) as 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by 异常类型表.name asc;\n```\n这是一个复杂的SQL查询语句，用于计算特定区域内（这里是\"高新校区\"的中国科学技术大学）的异常行为类型的数量和分布情况。以下是各子句和连接表的简要解释：\n\n1. `select 异常类型表.name as 异常行为类型, count(*) as 异常行为数量`: 选择要输出的字段，即异常行为类型及其对应的异常行为数量。\n\n2. `from d_abnormal_behavior as 异常行为表`: 从异常行为数据表开始查询。\n\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`: 将摄像头表与异常行为表通过摄像头ID关联起来。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将房间表与摄像头表通过房间ID关联起来。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将楼栋表与房间表通过楼栋ID关联起来。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将区域表与楼栋表通过区域ID关联起来。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将单位表与区域表通过单位ID关联起来。\n\n8. `join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id`: 将异常类型表与异常行为表通过异常行为类型ID关联起来。\n\n9. `where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，即只考虑最近7天内的异常行为，且发生在\"高新校区\"的\"中国科学技术大学\"内。\n\n10. `group by 异常类型表.name`: 对异常行为类型进行分组，以便计算每种异常行为类型的数量。\n\n11. `order by 异常类型表.name asc;`: 对异常行为类型按照升序排序，以便输出时按照类型名称从小到大排列。"
    },
    {
        "query": "教师食堂监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是计算“教工食堂”在中国科学技术大学高新校区的摄像头数量。具体来说：\n\n1. `s_camera`是摄像头表，用于存储摄像头的各种信息，例如摄像头编号、位置等；\n2. `s_room`是房间表，用于存储房间的各种信息，例如房间号、所属楼栋等；\n3. `s_building`是楼栋表，用于存储楼栋的各种信息，例如楼栋名称、所属区域等；\n4. `s_region`是区域表，用于存储区域的各种信息，例如区域名称、所属单位等；\n5. `s_organization`是单位表，用于存储单位的各种信息，例如单位名称、地址等。\n\n通过将这些表连接在一起，我们可以根据指定的条件（例如，“教工食堂”在中国科学技术大学高新校区）找到所有相关的摄像头。然后，我们使用`count(*)`函数来计算满足这些条件的摄像头的数量。"
    },
    {
        "query": "有多少个房间安装了摄像头？",
        "script": "```sql\nselect count(distinct 房间表.id) as 安装了摄像头的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算在特定地区和单位的房间中安装了摄像头的数量。以下是各个子句的解释：\n\n1. `select count(distinct 房间表.id) as 安装了摄像头的房间数量`: 这部分是查询的目标，即计算安装了摄像头的房间数量。这里使用了`count`函数和`distinct`关键字来去除重复的房间ID。\n\n2. `from s_camera as 摄像头表`: 从名为`s_camera`的表中获取数据，这个表存储了摄像头的信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 使用`join`关键字将`s_room`表（存储房间信息的表）与`s_camera`表连接起来。连接条件是`摄像头表.pid = 房间表.id`，表示每个摄像头都与一个特定的房间关联。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 使用`join`关键字将`s_building`表（存储楼栋信息的表）与`s_room`表连接起来。连接条件是`房间表.pid = 楼栋表.id`，表示每个房间都属于一个特定的楼栋。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 使用`join`关键字将`s_region`表（存储地区信息的表）与`s_building`表连接起来。连接条件是`楼栋表.pid = 区域表.id`，表示每个楼栋都属于一个特定的地区。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 使用`join`关键字将`s_organization`表（存储单位信息的表）与`s_region`表连接起来。连接条件是`区域表.pid = 单位表.id`，表示每个地区都属于一个特定的单位。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 使用`where`子句设置查询条件。在这个例子中，只考虑属于“高新校区”且归属于“中国科学技术大学”的地区的摄像头的数据。\n\n通过这个查询，你可以得到在特定地区和单位的房间中安装了摄像头的数量。"
    },
    {
        "query": "找出信智楼一个月内，每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一段SQL查询语句，用于查找\"信智楼\"在一个月内每天的最高人数。以下是各部分的解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`：选择最小（最近）的统计时间作为结果字段名称为\"统计时间\"。\n2. `round(max(人数分布表.num)) as 平均人数`：计算最大的“人数”并四舍五入保留整数，作为结果字段名称\"平均人数\"。\n3. `from a_people_spread_day_building as 人数分布表`：从\"a_people_spread_day_building\"这张表，别名设为\"人数分布表\"。\n4. `WHERE 人数分布表.building_name='信智楼'`：筛选出建筑名称为\"信智楼\"的数据。\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`：筛选出距离现在的时间（以天为单位）小于30天的数据。\n6. `and 人数分布表.region_name='高新校区'`：筛选出地区名称为\"高新校区\"的数据。\n7. `and 人数分布表.org_name='中国科学技术大学'`：筛选出组织名称为\"中国科学技术大学\"的数据。\n8. `group by 人数分布表.stat_day`：按统计日期对数据进行分组，以便进行下一步的聚合操作。\n9. `order by min(人数分布表.stat_time) asc;`：按照统计时间升序排列输出结果。"
    },
    {
        "query": "给出师生活动中心的所有摄像头信息",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中获取与特定条件匹配的摄像头信息。下面是该SQL语句的各个部分和它们的作用：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：这是选择要检索的字段，包括摄像头的ID、IP地址以及安装在哪个房间。\n\n2. `from s_camera as 摄像头表`：指定数据来源表为“s_camera”，即摄像头表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是一个联接操作，将摄像头表和房间表通过摄像头所在的房间关联起来。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是另一个联接操作，将房间表和楼栋表关联起来，因为房间属于某个楼栋。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：又一个联接操作，将楼栋表和区域表关联起来，因为楼栋属于某个区域。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：最后一个联接操作，将区域表和单位表关联起来，因为区域属于某个单位。\n\n7. `where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是筛选条件，只选取满足这些条件的摄像头数据。在这个例子中，筛选的是位于“师生活动中心”的摄像头，这个活动中心位于“高新校区”，隶属于“中国科学技术大学”。\n\n8. `order by 摄像头表.id asc limit 1000;`：按照摄像头表的ID字段升序排列（即从小到大排序），并限制返回的结果集数量为1000条。"
    },
    {
        "query": "信智楼有多少人手里拿东西？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于计算信智楼里有多少人手里拿着东西。下面是各个子句的简要解释：\n\n1. `select count(*) as 手里拿东西的人数`：计算满足条件的持有物品的人数。\n2. `from d_people as 人员表`：指定人员表的别名，该表存储了每个人的信息。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接摄像头表，根据摄像头的ID关联到对应的人员。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表，获取每个摄像头的房间信息。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表，获取每个房间所在的楼栋信息。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表，获取每个楼栋所在的具体校区或地点。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表，获取每个区域所属的单位或组织。\n8. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`：连接持物维表，获取每个人持有的物品名称和类型。\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：限制查询时间范围，仅返回最近5分钟内采集到的数据。\n10. `and 持物维表.name='持物'`：过滤条件，仅返回持有物品的人的信息。\n11. `and 区域表.region_name='高新校区'`：过滤条件，仅返回位于高新校区的数据。\n12. `and 单位表.org_name='中国科学技术大学'`：过滤条件，仅返回属于中国科学技术大学的数据。\n13. `and 楼栋表.building_name='信智楼'`：过滤条件，仅返回信智楼的数据。"
    },
    {
        "query": "有多少人挎单肩包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段 SQL 查询语句，用于计算满足特定条件的挎单肩包的人数。以下是各子句的解释：\n\n1. `select count(*) as 背双肩包的人数`: 查询结果将返回一个计数，表示符合查询条件的人数。\n\n2. `from d_people as 人员表`: 从 `d_people` 表（假设是存储人员信息的表）开始查询，并将该表简称为 \"人员表\"。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 联接 `s_camera` 表（假设是存储摄像头的表），连接条件为 `人员表` 的 `camera_id` 与 `摄像头表` 的 `id` 相等。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接 `s_room` 表（假设是存储房间的表），连接条件为 `摄像头表` 的 `pid` 与 `房间表` 的 `id` 相等。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接 `s_building` 表（假设是存储楼栋的表），连接条件为 `房间表` 的 `pid` 与 `楼栋表` 的 `id` 相等。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接 `s_region` 表（假设是存储区域的表），连接条件为 `楼栋表` 的 `pid` 与 `区域表` 的 `id` 相等。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接 `s_organization` 表（假设是存储单位的表），连接条件为 `区域表` 的 `pid` 与 `单位表` 的 `id` 相等。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`: 联接 `t_bag` 表（假设是存储背包类型的表），连接条件为 `人员表` 的 `bag` 与 `背包维表` 的 `id` 相等。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 限制查询结果的时间差，即 `人员表.moment`（假设是记录人员出现的时间）与当前时间（通过 `now()` 函数获取）之间的差值小于 5 分钟。\n\n10. `and 背包维表.name='单肩包'`: 进一步筛选条件，要求人员的背包类型为 \"单肩包\"。\n\n11. `and 区域表.region_name='高新校区'`: 限制查询结果为位于 \"高新校区\" 的人员。\n\n12. `and 单位表.org_name='中国科学技术大学'`: 限制查询结果为属于 \"中国科学技术大学\" 的人员。\n\n综上所述，这段 SQL 语句的目的是查询并计算在 5 分钟之内出现在 \"高新校区\" 的 \"中国科学技术大学\" 范围内且挎着 \"单肩包\" 的人数。"
    },
    {
        "query": "没拍到人的室内摄像头有哪些？",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中联合查询并筛选出满足特定条件的摄像头信息。下面是对这个SQL语句的解释：\n\n1. `s_camera`、`s_room`、`s_building`、`s_region`和`s_organization`是数据库中的五个表。\n2. 通过JOIN操作将这些表连接在一起，基于每个表的ID字段建立关联。例如，摄像头（s_camera）表与房间（s_room）表之间的连接条件是摄像头表中的pid等于房间表中的id。\n3. WHERE子句设置了筛选条件。这些条件包括：摄像头的`inhouse`属性值为1（表示是在室内的摄像头），并且摄像头ID不在最近10分钟内有人经过的摄像头列表中。\n4. AND子句进一步限制了结果集的范围。它指定了区域名称为“高新校区”和单位名称为“中国科学技术大学”。\n5. ORDER BY子句按照摄像头表的id进行升序排序。\n6. LIMIT子句限制返回的结果集大小为1000条。"
    },
    {
        "query": "食堂哪些地方安装了监控",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表格中筛选并获取满足条件的摄像头信息。下面是对这个SQL的解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 这部分是查询结果的字段，包括摄像头的ID（摄像头编号）、IP地址以及安装的房间名称。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid=单位表.id`: 这是连接各个表格的部分。`s_camera`表示摄像头表，`s_room`表示房间表，`s_building`表示楼栋表，`s_region`表示区域表，`s_organization`表示单位表。这些表格通过摄像头表的`pid`字段与其他表的`id`字段进行连接。\n\n3. `where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这是过滤条件部分，只选择满足“楼栋名称为‘学生食堂’，区域名称为‘高新校区’，单位名称为中国科学技术大学”的摄像头信息。\n\n4. `order by 摄像头表.id asc limit 1000`: 这是排序和限制返回数量的部分。按摄像头表的ID（摄像头编号）从小到大进行排序，并限制返回的最大数量为1000条。"
    },
    {
        "query": "给出体育场的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 查询语句，用于计算满足特定条件的体育场的摄像头数量。下面是该 SQL 语句的解释：\n\n1. `count(*) as 摄像头数量`: 这行代码用于计算满足后续条件的摄像头的总数。`count` 是聚合函数，用来计算一组值的总个数；`*` 代表匹配所有列，这里我们只关心摄像头的数量，所以使用 `*`。最后，我们将结果命名为 `摄像头数量`，便于后续查询和展示。\n\n2. `s_camera as 摄像头表`: 定义了摄像头表，假设其名称为 `s_camera`。\n\n3. `s_room as 房间表`: 定义了房间表，假设其名称为 `s_room`。\n\n4. `s_building as 楼栋表`: 定义了楼栋表，假设其名称为 `s_building`。\n\n5. `s_region as 区域表`: 定义了区域表，假设其名称为 `s_region`。\n\n6. `s_organization as 单位表`: 定义了单位表，假设其名称为 `s_organization`。\n\n7. `on 摄像头表.pid=房间表.id`、`on 房间表.pid=楼栋表.id`、`on 楼栋表.pid=区域表.id` 和 `on 区域表.pid=单位表.id`: 这四行代码用于关联不同的表格，通过 `pid` 字段建立关系。例如，摄像头表与房间表通过 `pid` 字段连接在一起，表示一个摄像头属于一个房间。\n\n8. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这行代码用于筛选满足特定条件的数据。在这个例子中，我们想要找到名为 \"体育场\" 的建筑、位于 \"高新校区\" 的区域且隶属于 \"中国科学技术大学\" 的单位的摄像头数量。\n\n综上所述，这段 SQL 语句的目的是计算满足特定条件的体育场（位于高新校区的中国科学技术大学的体育场）的摄像头数量。"
    },
    {
        "query": "信智楼近期内识别到的人员中，拿手提包的有多少？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这个SQL查询语句的目的是计算信智楼（XinZhi Building）在最近的五分钟（TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5）内识别到携带手提包（'手提包'）的人员数量。具体过程如下：\n\n1. `from d_people as 人员表`: 定义人员表（d_people）作为数据来源，用于获取人员的相关信息。\n2. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 联接摄像头表（s_camera），通过摄像头的ID（camera_id）将人员与对应的摄像头关联起来。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接房间表（s_room），通过房间的ID（pid）将摄像头与对应房间关联起来。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接楼栋表（s_building），通过楼栋的ID（pid）将房间与对应楼栋关联起来。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接区域表（s_region），通过区域的ID（pid）将楼栋与对应区域关联起来。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接单位表（s_organization），通过单位的ID（pid）将区域与对应单位关联起来。\n7. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`: 联接背包维表（t_bag），通过背包的ID（bag）将人员与对应的背包关联起来。\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 根据条件筛选出满足最近五分钟内出现在信智楼（XinZhi Building）、来自中国科学技术大学（University of Science and Technology of China, USTC）、位于高新校区（High-tech Campus）、携带手提包（handbags）的人员。\n9. `select count(*) as 背双肩包的人数`: 统计满足上述条件的携带手提包的人员数量。"
    },
    {
        "query": "8号学生公寓人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='8号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取8号学生公寓的人数信息。以下是各部分的解释：\n\n1. `select 人数分布表.num as 人数`：选择`num`列作为查询结果中的“人数”字段。这里的`num`是源数据表中表示人数的列名。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表名为`a_people_spread_day_building`，并将此表在查询结果中简写为“人数分布表”。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置一个时间条件，要求当前时间与`stat_time`（记录时间的字段）的时间差小于5小时。\n\n4. `and 人数分布表.building_name='8号学生公寓'`：添加一个条件，只选择`building_name`（建筑名称）为“8号学生公寓”的记录。\n\n5. `and 人数分布表.region_name='高新校区'`：再添加一个条件，要求`region_name`（地区名称）为“高新校区”。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：继续添加一个条件，要求`org_name`（组织名称）为“中国科学技术大学”。\n\n7. `order by 人数分布表.stat_time desc limit 1`：对查询结果进行排序，按`stat_time`降序排列（即最近的时间记录排在最前面），并限制返回的结果数量为1条。\n\n这个查询语句的目的是获取最新的一条8号学生公寓的人数信息。"
    },
    {
        "query": "7号学生公寓的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='7号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。这个查询语句的含义如下：\n\n1. `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：计算当前时间与统计时间（`stat_time`）之间的小时差，小于5小时；\n2. `and 人数分布表.building_name='7号学生公寓'`：限制查询结果中的楼栋名为“7号学生公寓”；\n3. `and 人数分布表.region_name='高新校区'`：限制查询结果中的地区名为“高新校区”；\n4. `and 人数分布表.org_name='中国科学技术大学'`：限制查询结果中的机构名为“中国科学技术大学”；\n5. `order by 人数分布表.stat_time desc`：按照统计时间降序排列查询结果；\n6. `limit 1`：限制查询结果返回的数据数量为1条。\n\n这个查询语句的目的是查找满足上述所有条件的最新一条记录（即最近5小时内，高新校区的中国科学技术大学的7号学生公寓的人数）。"
    },
    {
        "query": "6号学生公寓人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='6号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一段SQL查询语句，用于从数据库中获取\"6号学生公寓\"的实时人数。具体解释如下：\n\n1. `select 人数分布表.num as 人数`: 从`a_people_spread_day_building`表中选择名为`num`的列，并将其重命名为`人数`。\n\n2. `from a_people_spread_day_building as 人数分布表`: 定义数据表名称为`a_people_spread_day_building`，并为其起别名`人数分布表`。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 筛选出距离现在时间（即当前时刻）小于5小时的记录。\n\n4. `and 人数分布表.building_name='6号学生公寓'`: 过滤出`building_name`（建筑物名称）等于“6号学生公寓”的记录。\n\n5. `and 人数分布表.region_name='高新校区'`: 过滤出`region_name`（区域名称）等于“高新校区”的记录。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 过滤出`org_name`（组织/机构名称）等于“中国科学技术大学”的记录。\n\n7. `order by 人数分布表.stat_time desc`: 对结果按照`stat_time`（统计时间）降序排列，即最近的时间排在最前面。\n\n8. `limit 1`: 限制返回的结果集数量为1条。"
    },
    {
        "query": "给出操场安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个表中联合查询并统计操场上摄像头的数量。具体解释如下：\n\n1. `select count(*) as 摄像头数量`：选择计数函数`count(*)`作为查询结果，将返回的结果命名为`摄像头数量`。\n\n2. `from s_camera as 摄像头表`：指定查询的主表是`s_camera`（摄像头表），后续联接的其他表数据将通过这个表进行关联。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：联接`s_room`（房间表），连接条件是`摄像头表.pid`等于`房间表.id`。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：联接`s_building`（楼栋表），连接条件是`房间表.pid`等于`楼栋表.id`。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：联接`s_region`（区域表），连接条件是`楼栋表.pid`等于`区域表.id`。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：联接`s_organization`（单位表），连接条件是`区域表.pid`等于`单位表.id`。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询的条件，即要求楼栋名称为“体育场”、区域名称为“高新校区”和单位名为“中国科学技术大学”的数据才能被查询出来。\n\n综上所述，这条SQL语句的目的是在满足特定条件下（位于特定地点的体育场），统计出该体育场上摄像头数量。"
    },
    {
        "query": "图书教育中心每天平均有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于计算\"图书教育中心\"在\"高新校区\"的中国科学技术大学中过去30天内每天的平均人数。以下是查询语句的各个部分的解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数`: 选择统计时间和平均人数作为输出列。`min(人数分布表.stat_time)`获取每天的最小时间（即当天的开始时间），`round(avg(人数分布表.num))`计算每天的人数平均值。\n\n2. `from a_people_spread_day_building as 人数分布表`: 从名为a_people_spread_day_building的数据表中获取数据，将其简称为\"人数分布表\"。\n\n3. `WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 设置查询条件，包括建筑名称为\"图书教育中心\"、统计时间与当前时间（now()函数返回）的差值小于30天、地区和机构名称分别为\"高新校区\"和\"中国科学技术大学\"。\n\n4. `group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc`: 对统计日期（stat_day）进行分组，并按照最小统计时间（stat_time）升序排列结果。这确保了我们按天计算平均人数。"
    },
    {
        "query": "8号学生公寓安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算“8号学生公寓”安装了摄像头的数量。以下是各个子句的解释：\n\n1. `SELECT count(*) as 摄像头数量`: 选择计数函数count(*)作为返回的结果集，并命名为\"摄像头数量\"。\n\n2. `FROM s_camera as 摄像头表`: 从摄像头信息表（s_camera）中获取数据，将其简称为摄像头表。\n\n3. `JOIN s_room as 房间表 ON 摄像头表.pid = 房间表.id`: 联接宿舍信息表（s_room），连接条件是摄像头表的pid字段等于房间表的id字段。\n\n4. `JOIN s_building as 楼栋表 ON 房间表.pid = 楼栋表.id`: 联接楼栋信息表（s_building），连接条件是房间表的pid字段等于楼栋表的id字段。\n\n5. `JOIN s_region as 区域表 ON 楼栋表.pid = 区域表.id`: 联接区域信息表（s_region），连接条件是楼栋表的pid字段等于区域表的id字段。\n\n6. `JOIN s_organization as 单位表 ON 区域表.pid = 单位表.id`: 联接单位信息表（s_organization），连接条件是区域表的pid字段等于单位表的id字段。\n\n7. `WHERE 楼栋表.building_name = '8号学生公寓' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 设置查询的过滤条件，要求楼栋名称、区域名称和单位名称分别等于给定的值。\n\n这个查询语句通过多表联接和过滤条件，最终计算出符合条件的8号学生公寓安装了摄像头的数量。"
    },
    {
        "query": "告诉我现在办公楼有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政办公楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取当前（时间戳与现在相隔不超过5小时）的“行政办公楼”在中国科学技术大学高新校区的人数。具体解释如下：\n\n1. `select 人数分布表.num as 人数`: 从`a_people_spread_day_building`这张表选择名为`num`的列作为结果中的\"人数\"字段。\n\n2. `from 人数分布表`: 指定查询数据的来源表格，即`a_people_spread_day_building`。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这个条件限制统计的时间范围，只选取与现在时间相差不超过5小时的记录。\n\n4. `and 人数分布表.building_name='行政办公楼'`: 进一步筛选，只考虑在\"行政办公楼\"的记录。\n\n5. `and 人数分布表.region_name='高新校区'`: 继续筛选，只考虑位于\"高新校区\"的记录。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 最后筛选，只考虑属于\"中国科学技术大学\"的记录。\n\n7. `order by 人数分布表.stat_time desc`: 按照`stat_time`（统计时间）降序排列数据。\n\n8. `limit 1;`: 最终返回的数据条数限定为1条。"
    },
    {
        "query": "目前信智楼有人的房间有多少？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'     and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一个SQL查询语句，用于计算信智楼内有人（即摄像头检测到的人）的房间数量。以下是各个子句的解释：\n\n1. `count(房间表.room_name) 有人的房间数量`：计算符合条件的房间数量。\n2. `from s_camera as 摄像头表`：从s_camera表中取数据，作为摄像头表。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接s_room表，基于摄像头表和房间表的pid字段相等。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接s_building表，基于房间表和楼栋表的pid字段相等。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接s_region表，基于楼栋表和区域表的pid字段相等。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接s_organization表，基于区域表和单位表的pid字段相等。\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`：限制条件，只考虑位于高新校区的中国科学技术大学的信智楼的记录。\n8. `and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：进一步限制条件，只有那些在过去10分钟内检测到人的摄像头才参与计数。"
    },
    {
        "query": "没拍到人的室外摄像头有哪些？",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个关联表中获取信息。下面是该SQL语句的详细解释：\n\n1. `select`: 选择要返回的数据字段。\n2. `摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`: 选择摄像头表的id作为摄像头编号，房间表的room_name作为安装位置，楼栋表的building_name作为所属大楼。\n3. `from`: 从哪个表中获取数据。这里是从s_camera（摄像头表）开始。\n4. `join`: 连接多个表，基于这些表之间的关联关系。这里是通过摄像头表的pid与房间表、楼栋表和区域表进行连接。\n5. `on`: 指定连接条件。比如，摄像头表的pid等于房间表的id。\n6. `where`: 过滤条件。这里设置了一些筛选条件，包括摄像头的内网状态（`inhouse`字段为0表示摄像头在外网），并且不在最近10分钟内有人使用过的摄像头列表中，区域名和单位名称分别对应\"高新校区\"和\"中国科学技术大学\"。\n7. `order by`: 对结果进行排序。这里按照摄像头的id升序排列。\n8. `limit`: 限制返回的结果数量。这里设置为1000条。"
    },
    {
        "query": "信智楼不同上衣风格分别有多少人？",
        "script": "```sql\nselect substring(人员表.upper,6) as 上衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.upper  order by 人员表.upper asc;\n```\n这是一个 SQL（结构化查询语言）查询语句，用于从多个表中获取并统计特定信息。以下是对这个查询语句的详细解释：\n\n1. `d_people`、`s_camera`、`s_room`、`s_building`、`s_region` 和 `s_organization` 是数据库中不同的表，它们包含了与查询相关的数据。\n\n2. `TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5` 这个条件表示只选择过去五分钟内的数据。\n\n3. `substring(人员表.upper,6) as 上衣风格` 这部分是用于提取和显示每个人上衣风格的代码。\"substring(人员表.upper,6)\" 表示从 \"upper\" 字段的第六位开始提取字符串，即每个人的衣服类型。\n\n4. `count(*) as 人数` 计算每种上衣风格的人数。\n\n5. `from d_people as 人员表` 表示从 `d_people` 表开始查询。\n\n6. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id` 这部分是将 `s_camera` 表的摄像头信息与 `d_people` 表的人员信息进行关联。\n\n7. `join s_room as 房间表 on 摄像头表.pid=房间表.id` 这部分是将 `s_room` 表的房间信息与 `s_camera` 表的摄像头信息进行关联。\n\n8. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id` 这部分是将 `s_building` 表的楼栋信息与 `s_room` 表的房间信息进行关联。\n\n9. `join s_region as 区域表 on 楼栋表.pid=区域表.id` 这部分是将 `s_region` 表的区域信息与 `s_building` 表的楼栋信息进行关联。\n\n10. `join s_organization as 单位表 on 区域表.pid=单位表.id` 这部分是将 `s_organization` 表的单位信息与 `s_region` 表的区域信息进行关联。\n\n11. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'` 这些条件用于过滤出满足特定条件的数据，例如：时间范围限制、地点等。\n\n12. `group by 人员表.upper` 这部分将按上衣风格对数据进行分组，以便进行后续统计。\n\n13. `order by 人员表.upper asc;` 最后，这个排序子句将按上衣风格的字母顺序对结果进行升序排列。"
    },
    {
        "query": "体育场的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取“体育场”在“高新校区”的中国科学技术大学的当前人数。这个查询有几个条件限制和排序规则。\n\n首先，`TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5` 这个部分表示只返回在过去五小时内的数据。\n\n然后，`and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'` 这三个条件确保我们只关注“体育场”、“高新校区”的“中国科学技术大学”的数据。\n\n最后，`order by 人数分布表.stat_time desc limit 1;` 表示按照`stat_time`降序排列（即最新的记录在最前面）并只返回一条记录。"
    },
    {
        "query": "信智楼最近识别到的人员中，不同下衣风格分别有多少人？",
        "script": "```sql\nselect substring(人员表.lower,6) as 下衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.lower  order by 人员表.lower asc;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的人员信息。下面是对这个SQL的详细解释：\n\n1. `select substring(人员表.lower,6) as 下衣风格, count(*) as 人数`: 选择下衣风格的子字符串（从第6个字符开始）作为“下衣风格”列，并计算每种下衣风格的人数。\n\n2. `from d_people as 人员表`: 从名为“d_people”的表中读取数据，将其简称为“人员表”。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 联接另一个名为“s_camera”的表，以获取每个人员的摄像头ID。这两个表的连接条件是人员表中的摄像头ID与摄像头表中的ID相匹配。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接另一个名为“s_room”的表，以获取每个摄像头所在的房间信息。这两个表的连接条件是摄像头表中的房间ID与房间表中的ID相匹配。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接另一个名为“s_building”的表，以获取每个房间所在的楼栋信息。这两个表的连接条件是房间表中的楼栋ID与楼栋表中的ID相匹配。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接另一个名为“s_region”的表，以获取每个楼栋所在的区域信息。这两个表的连接条件是楼栋表中的区域ID与区域表中的ID相匹配。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接另一个名为“s_organization”的表，以获取每个区域所属的单位信息。这两个表的连接条件是区域表中的单位ID与单位表中的ID相匹配。\n\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 设置查询条件，只返回在过去5分钟内出现在信智楼的人员信息。同时要求所在区域为“高新校区”，所在单位为“中国科学技术大学”。\n\n9. `group by 人员表.lower  order by 人员表.lower asc;`: 对查询结果进行分组，按照人员表中的lower字段（可能是人员的唯一标识）进行排序，升序排列。"
    },
    {
        "query": "教师食堂总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算教师食堂的摄像头数量。以下是各子句的解释：\n\n1. select: 从数据库中选择一个或多个列（这里选择count函数）。\n2. count(*): 返回匹配指定条件的行数。\n3. as 摄像头数量: 将结果集命名为\"摄像头数量\"。\n4. from s_camera as 摄像头表: 数据来源是s_camera表（假设这个表存储了摄像头的数据）。\n5. join: 连接其他表以获取更多的信息。\n6. on 摄像头表.pid=房间表.id: 连接条件是摄像头表中的pid字段等于房间表中的id字段。\n7. join s_room as 房间表: 连接的房间表，假设这个表存储了食堂房间的信息。\n8. join s_building as 楼栋表: 连接的楼栋表，假设这个表存储了食堂所在建筑的信息。\n9. join s_region as 区域表: 连接的区域表，假设这个表存储了食堂所在的校区信息。\n10. join s_organization as 单位表: 连接的单位表，假设这个表存储了食堂所属单位的名称信息。\n11. where: 设置查询的条件，只有满足这些条件的记录才会被查询到。\n12. 楼栋表.building_name='教工食堂': 查询条件之一，食堂所在的楼栋名称为\"教工食堂\"。\n13. 区域表.region_name='高新校区': 查询条件之二，食堂所在的校区名称为\"高新校区\"。\n14. 单位表.org_name='中国科学技术大学': 查询条件之三，食堂所属单位的名称为\"中国科学技术大学\"。"
    },
    {
        "query": "体育场安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算安装在体育场的监控摄像头数量。首先，它连接了5个表格（s_camera, s_room, s_building, s_region和s_organization），这些表格分别表示摄像头、房间、建筑、地区和机构的信息。\n\n在查询条件中，`where`子句限制了建筑的名称是“体育场”，区域的名称是“高新校区”，单位的名称是“中国科学技术大学”。然后，使用`select`子句选择摄像头的数量作为输出，通过`count(*)`函数计算满足查询条件的摄像头总数。"
    },
    {
        "query": "找出图书教育中心一个月内，每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据表中查找一个月内在“图书教育中心”内每日最高的人数。以下是这个查询的详细解析：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选择最小的（最近的）统计时间作为结果中的一条记录。\n\n2. `round(max(人数分布表.num)) as 平均人数`: 计算每个月中每日的最高人数，并保留到整数位。\n\n3. `from a_people_spread_day_building as 人数分布表`: 从名为\"a_people_spread_day_building\"的数据表（别名设为\"人数分布表\"）中提取数据。\n\n4. `WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 设定筛选条件，包括建筑名称为“图书教育中心”，统计时间与当前时间的差值小于30天（一个月），所在区域为“高新校区”以及所属组织为“中国科学技术大学”。\n\n5. `group by 人数分布表.stat_day`: 按照统计日期对数据进行分组，以计算每日的最高人数。\n\n6. `order by min(人数分布表.stat_time) asc`: 对结果按照统计时间从小到大排序，即最近的时间排在最前面。"
    },
    {
        "query": "信智楼5分钟内识别到多少戴帽子的行人？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于在5分钟时间内（即现在时间减去5分钟）统计信智楼内戴帽子的行人数量。下面是各子句的详细解释：\n\n1. `SELECT count(*) as 戴帽子人数`: 选择计数函数count，计算满足条件的行人总数，并将结果命名为“戴帽子人数”。\n\n2. `FROM d_people AS 人员表`: 从数据表d_people中获取数据，将其称为“人员表”。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`: 将数据表s_camera与人员表连接起来，连接条件是摄像头ID相等。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 将数据表s_room与摄像头表连接起来，连接条件是房间ID相等。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 将数据表s_building与房间表连接起来，连接条件是楼栋ID相等。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 将数据表s_region与楼栋表连接起来，连接条件是区域ID相等。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 将数据表s_organization与区域表连接起来，连接条件是单位ID相等。\n\n8. `JOIN t_hat AS 帽子维表 ON 人员表.hat = 帽子维表.id`: 将数据表t_hat与人员表连接起来，连接条件是帽子ID相等。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, NOW()) < 5 AND 帽子维表.name = '戴帽子' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学' AND 楼栋表.building_name = '信智楼'`: 设置查询条件，包括：时间差（现在时间与抓拍时间）小于5分钟；帽子名称为“戴帽子”；区域名称为“高新校区”；单位名称是“中国科学技术大学”；楼栋名称为“信智楼”。"
    },
    {
        "query": "信智楼的摄像头安装情况",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从数据库中获取“信智楼”的摄像头安装信息。以下是各子句的解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 选择要查询的数据字段，包括摄像头的编号、IP地址和安装位置；\n2. `from s_camera as 摄像头表`: 指定数据来源是摄像头信息表（s_camera）；\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头信息表（s_camera）和房间信息表（s_room），条件是摄像头表的父ID（pid）等于房间表的ID；\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间信息表（s_room）和楼栋信息表（s_building），条件是房间表的父ID（pid）等于楼栋表的ID；\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋信息表（s_building）和区域信息表（s_region），条件是楼栋表的父ID（pid）等于区域表的ID；\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域信息表（s_region）和单位信息表（s_organization），条件是区域表的父ID（pid）等于单位表的ID；\n7. `where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求楼栋名称为“信智楼”，区域名称为“高新校区”，单位名称为“中国科学技术大学”；\n8. `order by 摄像头表.id asc limit 1000`: 对查询结果进行排序，按照摄像头编号升序排列，并限制返回结果的数量为1000条。"
    },
    {
        "query": "告诉我现在图教中心有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取“图教中心”（假设是\"图书教育中心\"的简称）当前的人数。以下是各个部分和变量的解释：\n\n1. `select 人数分布表.num as 人数`：选择名为\"num\"的列并将其重命名为\"人数\"，这是要返回的记录。\n\n2. `from a_people_spread_day_building as 人数分布表`：从名为 \"a_people_spread_day_building\" 的表中获取数据，并为其起一个别名\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：限制条件，即从\"人数分布表\"中选择的\"stat_time\"（统计时间）与当前时间的小时差小于5小时。\n\n4. `and 人数分布表.building_name='图书教育中心'`：进一步限制条件，要求被查询的表中的\"building_name\"（建筑名称）等于\"图书教育中心\"。\n\n5. `and 人数分布表.region_name='高新校区'`：继续添加限制条件，要求被查询的表中的\"region_name\"（地区名称）等于\"高新校区\"。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：再增加一个限制条件，要求被查询的表中的\"org_name\"（组织名称）等于\"中国科学技术大学\"。\n\n7. `order by 人数分布表.stat_time desc`：按照\"stat_time\"（统计时间）降序排列结果。\n\n8. `limit 1`：限制返回的结果数量，这里只返回一条记录。"
    },
    {
        "query": "很少发生的异常行为类型",
        "script": "```sql\nselect 异常行为类型表.name from t_abnormal_type as 异常行为类型表 where name not in( select 异常类型表.name as 异常行为类型 from d_abnormal_behavior as 异常行为表 join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by count(*) desc  ) limit 10;\n```\n这是一个SQL查询语句，用于获取“异常行为类型表”中在特定条件下很少发生的异常行为类型。以下是各部分详细解释：\n\n1. `select 异常行为类型表.name`: 从`t_abnormal_type`表（别名“异常行为类型表”）中选择名为`name`的字段。\n\n2. `from t_abnormal_type as 异常行为类型表`: 声明查询的表源是`t_abnormal_type`表，并为其分配一个别名“异常行为类型表”以便于后续使用。\n\n3. `where name not in`: 定义筛选条件，即所选名称不在以下子查询返回的结果集中。\n\n4. `( select 异常类型表.name as 异常行为类型 from d_abnormal_behavior as 异常行为表`: 开始子查询，用于查找满足特定条件的异常行为类型及其数量。\n\n5. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`: 连接`d_abnormal_behavior`表（别名“异常行为表”）和`s_camera`表（别名“摄像头表”），依据是`异常行为表.camera_id`等于`摄像头表.id`。\n\n6. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接`摄像头表`和`s_room`表（别名“房间表”），依据是`摄像头表.pid`等于`房间表.id`。\n\n7. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接`房间表`和`s_building`表（别名“楼栋表”），依据是`房间表.pid`等于`楼栋表.id`。\n\n8. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接`楼栋表`和`s_region`表（别名“区域表”），依据是`楼栋表.pid`等于`区域表.id`。\n\n9. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接`区域表`和`s_organization`表（别名“单位表”），依据是`区域表.pid`等于`单位表.id`。\n\n10. `join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id`: 连接`异常行为表`和`t_abnormal_type`表（别名“异常类型表”），依据是`异常行为表.abnormal_type`等于`异常类型表.id`。\n\n11. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 定义筛选条件，即只选择位于“高新校区”且属于“中国科学技术大学”的异常行为数据。\n\n12. `group by 异常类型表.name`: 对子查询结果进行分组，按照`异常类型表.name`字段进行分类。\n\n13. `order by count(*) desc`: 对分组后的结果按照异常行为类型的数量进行降序排列。\n\n14. `limit 10`: 限制返回的结果集大小，只选取前10条记录。\n\n综上，该SQL语句的目的是找出在特定条件（位于“高新校区”且属于“中国科学技术大学”）下，发生次数较少的异常行为类型。"
    },
    {
        "query": "信智楼5分钟内识别到多少不戴帽子的行人？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='未戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于在5分钟时间内（即现在时间减去5分钟）统计信智楼内不戴帽子的行人数量。下面是各子句的简要说明：\n\n1. `SELECT COUNT(*) AS 戴帽子人数`：计算满足条件的行人数量。\n2. `FROM d_people AS 人员表`：指定数据表，其中存储了行人的信息。\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`：连接摄像头表，获取每个行人的摄像头的ID。\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`：连接房间表，获取每个摄像头的所属房间信息。\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`：连接楼栋表，获取每个房间所属的楼栋信息。\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`：连接区域表，获取每个楼栋所属的区域信息。\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`：连接单位表，获取每个区域的所属单位信息。\n8. `JOIN t_hat AS 帽子维表 ON 人员表.hat = 帽子维表.id`：连接帽子维表，根据行人的帽子类型进行筛选，这里只考虑不戴帽子的行人。\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 AND 帽子维表.name = '未戴帽子' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学' AND 楼栋表.building_name = '信智楼'`：过滤条件，限制统计结果只包含过去5分钟内、位于高新校区的中国科学技术大学的信智楼的行人。"
    },
    {
        "query": "很少发生异常行为的房间",
        "script": "```sql\nselect 房间表.room_name as 房间名称, count(*) as 5天内异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(),异常行为表.moment) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' GROUP by 房间表.room_name  ORDER by count(*) asc  limit 10;\n```\n这是一个SQL查询语句，用于从多个表中获取数据并统计某个条件下的数据量。以下是各子句的简要说明：\n\n1. `SELECT room_name AS 房间名称, COUNT(*) AS 5天内异常行为数量`: 从`房间表`中选出`房间名称`字段，并将其作为输出结果的\"房间名称\"列；然后计算最近5天内每个房间的异常行为数量（以`COUNT(*)`聚合函数实现），将其作为输出结果的\"5天内异常行为数量\"列。\n\n2. `FROM d_abnormal_behavior AS 异常行为表`: 定义查询的主表为`异常行为表`，该表存储了所有的异常行为信息。\n\n3. `JOIN s_camera AS 摄像头表 ON 异常行为表.camera_id = 摄像头表.id`: 通过`ON`关键字将`异常行为表`和`摄像头表`连接起来，连接条件是`异常行为表`中的`camera_id`与`摄像头表`中的`id`相同。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 同样地，通过`ON`关键字将`摄像头表`和`房间表`连接起来，连接条件是`摄像头表`中的`pid`与`房间表`中的`id`相同。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 通过`ON`关键字将`房间表`和`楼栋表`连接起来，连接条件是`房间表`中的`pid`与`楼栋表`中的`id`相同。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 同样地，通过`ON`关键字将`楼栋表`和`区域表`连接起来，连接条件是`楼栋表`中的`pid`与`区域表`中的`id`相同。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 最后，通过`ON`关键字将`区域表`和`单位表`连接起来，连接条件是`区域表`中的`pid`与`单位表`中的`id`相同。\n\n8. `WHERE DATEDIFF(now(), 异常行为表.moment) < 5 AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 设置查询条件，即最近5天内的异常行为数据（使用`DATEDIFF`函数计算当前时间与异常行为发生的日期差）、所在校区和单位必须匹配指定值（这里为“高新校区”和“中国科学技术大学”）。\n\n9. `GROUP BY 房间表.room_name`: 对查询结果按照`房间表.room_name`进行分组，以便对每个房间的异常行为数量进行统计。\n\n10. `ORDER BY COUNT(*) ASC`: 对分组后的查询结果按照每个房间的异常行为数量进行排序，升序排列。\n\n11. `LIMIT 10`: 限制查询结果的条数，只返回前10个满足条件的房间及其对应的异常行为数量。"
    },
    {
        "query": "没有人的室内摄像头有哪些",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中检索符合条件的数据。以下是各个子句的解释：\n\n1. `SELECT`: 选择需要返回的列。这里选择了摄像头表的id（摄像头编号）、房间表的room_name（安装位置）、楼栋表的building_name（所属大楼）。\n\n2. `FROM`: 指定数据来源表。这里涉及到4个表，分别是s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。\n\n3. `JOIN`: 连接不同的表以获取所需数据。这里使用了5个连接条件，具体如下：\n- 摄像头表与房间表通过摄像头表中的pid（父ID）等于房间表的id进行连接；\n- 房间表与楼栋表通过房间表中的pid（父ID）等于楼栋表的id进行连接；\n- 楼栋表与区域表通过楼栋表中的pid（父ID）等于区域表的id进行连接；\n- 区域表与单位表通过区域表中的pid（父ID）等于单位表的id进行连接。\n\n4. `WHERE`: 设置查询条件。这里有多个条件，具体包括：\n- 摄像头表中的inhouse字段等于1，表示只查询没有人的室内摄像头；\n- 排除掉距离现在时间小于10分钟的摄像头（即有人在使用的摄像头），这是通过子查询实现的，子查询结果是一个名为DISTINCT camera_id的集合；\n- 限定区域为高新校区，单位名称为中国科学技术大学。\n\n5. `AND`: 组合多个条件，使得满足所有条件的记录才会被查询出来。\n\n6. `ORDER BY`: 对查询结果按照摄像头表中的id字段进行升序排序。\n\n7. `LIMIT`: 限制查询结果的条数，这里是1000条。"
    },
    {
        "query": "找出师生活动中心一个月内，每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取师生活动中心一个月内每天的平均人数。下面是对这个查询语句的详细解释：\n\n1. `select`：开始选择数据的命令。\n2. `min(人数分布表.stat_time) as 统计时间`：获取每一天的最小时间（通常是早上）作为该天的统计时间。\n3. `round(avg(人数分布表.num)) as 平均人数`：计算每一天的平均人数。`round()`函数用于四舍五入数字，使结果以整数显示。\n4. `from a_people_spread_day_building as 人数分布表`：指定数据来源表，即“a_people_spread_day_building”表，并将它简称为“人数分布表”。\n5. `WHERE`：设置筛选条件。\n   - `人数分布表.building_name='师生活动中心'`：确保只查询师生活动中心的数据。\n   - `DATEDIFF(now(), 人数分布表.stat_time) < 30`：确保仅查询过去30天内（包括今天）的数据。\n   - `人数分布表.region_name='高新校区'`和`人数分布表.org_name='中国科学技术大学'`：限制数据范围为高新校区的中国科学技术大学。\n6. `group by`：按照日期对数据进行分组。\n7. `order by`：按统计时间升序排列数据。\n8. `asc`：表示升序排序，如果省略，默认是升序。"
    },
    {
        "query": "3号学生公寓安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算\"3号学生公寓\"安装了多少个监控（摄像头）。下面是对这个查询语句的详细解析：\n\n1. `select count(*) as 摄像头数量`：选择计数函数`count(*)`作为结果集，并将返回的结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：指定查询的数据源是名为`s_camera`的摄像头数据表，并为其分配一个别名\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过`摄像头表.pid`和`房间表.id`两个字段进行内连接操作，将摄像头数据表与房间数据表关联在一起，并给房间数据表分配一个别名\"房间表\"。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：通过`房间表.pid`和`楼栋表.id`两个字段进行内连接操作，将房间数据表与楼栋数据表关联在一起，并给楼栋数据表分配一个别名\"楼栋表\"。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过`楼栋表.pid`和`区域表.id`两个字段进行内连接操作，将楼栋数据表与区域数据表关联在一起，并给区域数据表分配一个别名\"区域表\"。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：通过`区域表.pid`和`单位表.id`两个字段进行内连接操作，将区域数据表与单位数据表关联在一起，并给单位数据表分配一个别名\"单位表\"。\n\n7. `where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即只有当楼栋名称等于\"3号学生公寓\"、区域名称等于\"高新校区\"并且单位名称等于\"中国科学技术大学\"时，才返回相关的摄像头的数量。\n\n综上所述，该SQL查询语句的目的是查找并统计\"3号学生公寓\"安装的摄像头数量。"
    },
    {
        "query": "5号学生公寓安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='5号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算“5号学生公寓”安装了多少个摄像头。这个查询涉及到的表格有四个：s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。\n\n以下是各表格之间的关系以及查询条件说明：\n\n1. 摄像头表（s_camera）与房间表（s_room）通过外键字段`pid`关联。`pid`表示摄像头的房间ID。\n2. 房间表（s_room）与楼栋表（s_building）通过外键字段`pid`关联。`pid`表示房间的楼栋ID。\n3. 楼栋表（s_building）与区域表（s_region）通过外键字段`pid`关联。`pid`表示楼栋的区域ID。\n4. 区域表（s_region）与单位表（s_organization）通过外键字段`pid`关联。`pid`表示区域的单位ID。\n\n查询条件：\n- `where`子句中设置了一系列过滤条件，只选择满足条件的摄像头记录。其中：\n a. `楼栋表.building_name = '5号学生公寓'`：筛选出5号学生公寓对应的楼栋记录。\n b. `区域表.region_name = '高新校区'`：筛选出位于高新校区的区域记录。\n c. `单位表.org_name = '中国科学技术大学'`：筛选出属于中国科学技术大学的单位记录。\n\n最后，通过`select count(*) as 摄像头数量`子句，计算符合条件的摄像头总数。"
    },
    {
        "query": "不同上衣风格的人数",
        "script": "```sql\nselect substring(人员表.upper,6) as 上衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.upper  order by 人员表.upper asc;\n```\n这是一个 SQL 查询语句，用于统计高新校区中国科学技术大学的不同上衣风格的人数。以下是各部分解释：\n\n1. `select substring(人员表.upper,6) as 上衣风格, count(*) as 人数`: 选择上衣风格和对应的计数（人数）作为输出结果。`substring(人员表.upper,6)`表示从字符串`upper`的第6位开始取子字符串，即提取了上衣风格的信息。\n\n2. `from d_people as 人员表`: 从`d_people`表中获取数据，并给这个表起了别名“人员表”，便于后续使用。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 将`s_camera`表与`d_people`表通过`camera_id`字段进行联接，摄像头表起了别名“摄像头表”。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将`s_room`表与`s_camera`表通过`pid`字段进行联接，房间表起了别名“房间表”。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将`s_building`表与`s_room`表通过`pid`字段进行联接，楼栋表起了别名“楼栋表”。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将`s_region`表与`s_building`表通过`pid`字段进行联接，区域表起了别名“区域表”。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将`s_organization`表与`s_region`表通过`pid`字段进行联接，单位表起了别名“单位表”。\n\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 过滤条件，限制只统计距离现在时间差小于5分钟的、位于高新校区中国科学技术大学的人员信息。\n\n9. `group by 人员表.upper`: 按照上衣风格对数据进行分组，以便计算每种上衣风格的人数。\n\n10. `order by 人员表.upper asc`: 按照上衣风格升序排列输出结果。"
    },
    {
        "query": "运动场摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算某个特定运动场的摄像头数量。以下是各子句的详细解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数（count）作为查询结果，返回满足条件的摄像头总数。\n\n2. `from s_camera as 摄像头表`：声明从名为s_camera的数据表中获取数据，这里将这个表简称为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过摄像头的pid字段与房间表的id字段建立关联，联接两个表的数据。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：同样地，通过房间表的pid字段和楼栋表的id字段建立关联，联接两个表的数据。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过楼栋表的pid字段和区域表的id字段建立关联，联接两个表的数据。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：最后，通过区域表的pid字段和单位表的id字段建立关联，联接两个表的数据。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，筛选出符合条件的记录，即：建筑名称为“体育场”，位于“高新校区”，属于“中国科学技术大学”的单位。\n\n综上，该SQL语句的目的是查询并计算满足特定条件的运动场的摄像头数量。"
    },
    {
        "query": "近几天各个楼栋发生了多少异常行为？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 楼栋表.building_name  order by count(*) desc;\n```\n这是一个SQL查询语句，用于获取近一周内（DATEDIFF(now(), 异常行为表.moment) < 7）位于\"高新校区\"（区域表.region_name='高新校区'）的中国科学技术大学（单位表.org_name='中国科学技术大学'）内各楼栋发生的异常行为次数。以下是各子句的解释：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) 异常行为数量`：选择楼宇名称和对应的异常行为数量作为查询结果。\n2. `from d_abnormal_behavior as 异常行为表`：从异常行为表（d_abnormal_behavior）出发，该表存储了所有异常行为的记录。\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`：连接摄像头表（s_camera），摄像头ID在两者之间建立联系。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表（s_room），房间ID在两者之间建立联系。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表（s_building），楼栋ID在两者之间建立联系。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表（s_region），区域ID在两者之间建立联系。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表（s_organization），单位ID在两者之间建立联系。\n8. `where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：限制查询范围，只返回最近一周内的、位于高新校区的中国科学技术大学的异常行为数据。\n9. `group by 楼栋表.building_name`：按照楼宇名称对数据进行分组，以便统计每个楼栋的异常行为数量。\n10. `order by count(*) desc`：按照异常行为数量的降序对结果进行排序，使得发生异常行为次数最多的楼栋排在最前面。"
    },
    {
        "query": "图教中心的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取“图书教育中心”（假设是某个地点的名称）在\"高新校区\"（假设是一个区域的名称）的中国科学技术大学（假设是一个学校的名称）里的人数。这个查询语句的含义如下：\n\n1. select 人数分布表.num as 人数：选择名为“num”的字段作为查询结果中的“人数”字段；\n2. from a_people_spread_day_building as 人数分布表：从这个表中获取数据，这里将表名设为“人数分布表”；\n3. WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5：限定条件，表示查询的是过去5小时内的数据；\n4. and 人数分布表.building_name='图书教育中心'：表示只查询“图书教育中心”的数据；\n5. and 人数分布表.region_name='高新校区'：表示只查询位于“高新校区”的数据；\n6. and 人数分布表.org_name='中国科学技术大学'：表示只查询属于“中国科学技术大学”的数据；\n7. order by 人数分布表.stat_time desc：按照统计时间降序排列查询结果；\n8. limit 1：限制查询结果为一条记录。"
    },
    {
        "query": "3号学科楼安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于查询\"3号学科楼\"安装的监控摄像头的数量。\n\n以下是各表和字段含义：\n\n1. s_camera（摄像头表）：摄像头相关的信息数据表，可能包含的字段有：id（摄像头ID）、pid（所属区域ID）等；\n2. s_room（房间表）：房间相关的信息数据表，可能包含的字段有：id（房间ID）、pid（所属楼栋ID）等；\n3. s_building（楼栋表）：楼栋相关的信息数据表，可能包含的字段有：id（楼栋ID）、pid（所属区域ID）、building_name（楼栋名称）等；\n4. s_region（区域表）：区域相关的信息数据表，可能包含的字段有：id（区域ID）、pid（所属单位ID）、region_name（区域名称）等；\n5. s_organization（单位表）：单位相关的信息数据表，可能包含的字段有：id（单位ID）、org_name（单位名称）等；\n\n这个查询语句的逻辑是：通过摄像头表与房间表、楼栋表、区域表和单位表的关联查询，找出所有位于\"3号学科楼\"且属于\"高新校区\"和\"中国科学技术大学\"的监控摄像头，然后计算这些摄像头的总数作为结果。"
    },
    {
        "query": "2号学科楼总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。下面是对这个SQL语句的详细解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数（count）对所有的摄像头（*）进行计数，并将结果命名为摄像头数量（camera_quantity）。\n\n2. `from s_camera as 摄像头表`：指定摄像头的表格（s_camera）作为数据来源。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表和房间表通过摄像头表的pid（可能是表示摄像头所在房间的ID）与房间表的id字段连接起来。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将房间表和楼栋表通过房间表的pid（可能是表示房间所属楼栋的ID）与楼栋表的id字段连接起来。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将楼栋表和区域表通过楼栋表的pid（可能是表示楼栋所属区域的ID）与区域表的id字段连接起来。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将区域表和单位表通过区域表的pid（可能是表示区域所属单位的ID）与单位表的id字段连接起来。\n\n7. `where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设定查询条件，即要求楼栋名称为'2号学科楼'，区域名称为'高新校区'，单位名称为'中国科学技术大学'。\n\n8. 最后，这个SQL语句会返回满足这些条件的摄像头的数量（摄像头数量）。"
    },
    {
        "query": "统计信智楼一个月内每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于查询和分析一个月内信智楼每天的最高人数。以下是各部分的具体解释：\n\n1. `SELECT`: 从`a_people_spread_day_building`（人数分布表）中选取数据。\n2. `MIN(人数分布表.stat_time) AS 统计时间`: 选择每一天的最小统计时间（即开始时间）。\n3. `ROUND(MAX(人数分布表.num)) AS 平均人数`: 计算每天的最大人数（即最高人数），并四舍五入保留一位小数。\n4. `FROM`: 数据来源为`a_people_spread_day_building`（人数分布表）。\n5. `WHERE`: 设置筛选条件，只返回满足以下条件的数据：建筑名为“信智楼”，与当前时间的差值小于30天，所在区域名为“高新校区”，所属组织名为“中国科学技术大学”。\n6. `GROUP BY`: 根据`人数分布表.stat_day`进行分组，将相同日期的数据合并。\n7. `ORDER BY`: 对结果按照最小统计时间（即开始时间）升序排列。"
    },
    {
        "query": "学生食堂总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句是用于统计在学生食堂安装了摄像头的数量。具体解释如下：\n\n1. `select count(*) as 摄像头数量`：这是一个选择子句，用于计算满足后续条件要求的摄像头的数量。\n\n2. `from s_camera as 摄像头表`：这是表的引用，表示查询的摄像头信息来源于s_camera表（假设该表存储了摄像头的数据），并将这个表简称为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是一个连接子句，将s_camera表与s_room表进行连接。连接条件是摄像头表中的pid字段值等于房间表中的id字段值。这里假设每个摄像头都与一个特定的房间关联，所以通过房间表来获取摄像头所在的房间信息。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是一个连接子句，将房间表与s_building表进行连接。连接条件是房间表中的pid字段值等于楼栋表中的id字段值。这里假设每个房间都属于一个特定的楼栋，所以通过楼栋表来获取摄像头所在楼栋的信息。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是一个连接子句，将楼栋表与s_region表进行连接。连接条件是楼栋表中的pid字段值等于区域表中的id字段值。这里假设每个楼栋都属于一个特定的区域，所以通过区域表来获取摄像头所在区域的信息。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是一个连接子句，将区域表与s_organization表进行连接。连接条件是区域表中的pid字段值等于单位表中的id字段值。这里假设每个区域都属于一个特定的单位，所以通过单位表来获取摄像头所在单位的信息。\n\n7. `where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是一个条件子句，用于过滤满足特定条件的摄像头。这里是筛选出位于\"学生食堂\"、\"高新校区\"和\"中国科学技术大学\"的摄像头。\n\n综上，这个SQL查询语句的目的是查询并统计在学生食堂安装了摄像头的数量。"
    },
    {
        "query": "镜头中有人的室外摄像头有哪些？",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表格中筛选出符合条件的摄像头信息。以下是各部分解释：\n\n1. `select`: 选择需要返回的列。这里选择了摄像头表的id（摄像头编号）、房间表的room_name（安装位置）、楼栋表的building_name（所属大楼）。\n\n2. `from`: 从哪个表格获取数据。这里涉及到四个连接的表格，分别是摄像头表（s_camera）、房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）。\n\n3. `join`: 联接各个表格以获取所需的数据。这里通过摄像头表与房间表、楼栋表、区域表和单位表的关联关系来获取摄像头相关信息。\n\n4. `where`: 设置筛选条件。这里是关键部分，指定了摄像头的室内外状态（摄像头表.inhouse = 0表示户外摄像头）、时间范围（TIMESTAMPDIFF(MINUTE, moment, now()) < 10表示距离现在10分钟以内）、所在校区（区域表.region_name='高新校区'）和单位（单位表.org_name='中国科学技术大学'）。\n\n5. `order by`: 对筛选结果进行排序。这里按摄像头表.id升序排列。\n\n6. `limit`: 限制返回结果的数量。这里设为1000条。"
    },
    {
        "query": "发生了哪些异常？",
        "script": "```sql\nselect 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) <1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 异常行为表.moment desc limit 10;\n```\n这是一个SQL查询语句，用于从多个表中获取并展示异常行为数据。下面是对该SQL的解析：\n\n1. `select 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型`: 选择要返回的列。\n\n2. `from d_abnormal_behavior as 异常行为表`: 从\"d_abnormal_behavior\"这张表开始查询，并将其简写为\"异常行为表\"。\n\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`: 连接\"s_camera\"这张表，基于\"异常行为表\"的\"camera_id\"与\"摄像头表\"的\"id\"进行匹配。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接\"s_room\"这张表，基于\"摄像头表\"的\"pid\"与\"房间表\"的\"id\"进行匹配。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接\"s_building\"这张表，基于\"房间表\"的\"pid\"与\"楼栋表\"的\"id\"进行匹配。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接\"s_region\"这张表，基于\"楼栋表\"的\"pid\"与\"区域表\"的\"id\"进行匹配。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接\"s_organization\"这张表，基于\"区域表\"的\"pid\"与\"单位表\"的\"id\"进行匹配。\n\n8. `join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id`: 连接\"t_abnormal_type\"这张表，基于\"异常行为表\"的\"abnormal_type\"与\"异常类型表\"的\"id\"进行匹配。\n\n9. `where DATEDIFF(now(), 异常行为表.moment) <1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设定查询条件，即：异常发生的时间距离现在的时间差（DATEDIFF）小于1天，以及发生异常的地点是\"高新校区\"和对应的单位为\"中国科学技术大学\"。\n\n10. `order by 异常行为表.moment desc limit 10`: 对结果按照\"异常发生时刻\"降序排列（最新的异常行为排在最前面），并限制返回的数据条数为10条。"
    },
    {
        "query": "2号学生公寓总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个 SQL（结构化查询语言）语句，用于查询特定条件下的数据。这个特定的 SQL 语句是用于计算满足某些条件的摄像头的数量。以下是该 SQL 语句的各个部分和它们的作用：\n\n1. `SELECT` 子句：指定要返回的列。在这个例子中，我们选择了 `COUNT(*)` 作为我们要返回的列。`COUNT(*)` 是一个聚合函数，用于计算满足条件的行数。\n\n2. `AS 摄像头数量`：这是一个别名，用于将 `COUNT(*)` 的计算结果命名为 `摄像头数量`。这样可以使输出更易读。\n\n3. `FROM` 子句：指定要查询的表。在这个例子中，我们从四个表（`s_camera`、`s_room`、`s_building` 和 `s_region`）中获取数据。\n\n4. `JOIN` 子句：连接多个表以获取所需的数据。在这个例子中，我们使用 `JOIN` 子句将这四个表连接在一起。\n\n5. `WHERE` 子句：指定过滤条件。只有满足这些条件的行才会被包含在结果集中。在这个例子中，我们需要找到满足以下条件的摄像头：\n- `楼栋表.building_name` 等于 '2号学生公寓'\n- `区域表.region_name` 等于 '高新校区'\n- `单位表.org_name` 等于 '中国科学技术大学'\n\n通过这个 SQL 语句，我们可以计算出满足这些条件的摄像头数量。"
    },
    {
        "query": "不同年龄段分别有多少人？",
        "script": "```sql\nselect case 人员表.age_group when 'AgeLess18' then '小于18岁' when 'Age18-60' then '18-60岁' else '大于60岁' end as '年龄组', count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.age_group  order by 人员表.age_group asc;\n```\n这个SQL语句是一个复杂的联表查询和聚合操作，用于统计不同年龄段的人数。下面是详细解释：\n\n1. `SELECT`子句：首先通过`CASE`语句将`age_group`字段转换成人更容易理解的年龄分组，如“小于18岁”、“18-60岁”、“大于60岁”。然后计算每个分组的人数。\n\n2. `FROM`子句：从多个表（`d_people`、`s_camera`、`s_room`、`s_building`、`s_region` 和 `s_organization`）中获取数据。\n\n3. `JOIN`子句：通过摄像头ID和房间ID将这些表连接在一起。\n\n4. `WHERE`子句：筛选出满足条件的数据。例如，只考虑与当前时间相差不到5分钟的数据（可能表示最近更新的数据）；并且限制区域为“高新校区”，单位为“中国科学技术大学”。\n\n5. `GROUP BY`子句：按照年龄分组对数据进行聚合。\n\n6. `ORDER BY`子句：按照年龄分组升序排列数据。"
    },
    {
        "query": "找出7天内各个楼栋异常行为数量分布情况",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 楼栋表.building_name  order by count(*) desc;\n```\n这个SQL语句的目的是找出过去7天内，各个楼栋发生的异常行为数量分布情况。下面是各子句的解析：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) 异常行为数量`: 选择要查询的列，即每个楼栋的名称（由building_name表示）和该楼栋发生的异常行为数量（通过count聚合函数计算得到）。\n\n2. `from d_abnormal_behavior as 异常行为表`: 指定数据来源是异常行为表（d_abnormal_behavior），这是一个存储异常行为记录的数据表。\n\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`: 连接摄像头表（s_camera），该表存储摄像头的ID信息。通过on子句设置连接条件，即异常行为表中的camera_id与摄像头表中的id相等。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接房间表（s_room），该表存储房间的ID信息。同样地，通过on子句设置连接条件，即摄像头表的pid与房间表的id相等。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接楼栋表（s_building），该表存储楼栋的ID信息。连接条件为房间表的pid与楼栋表的id相等。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接区域表（s_region），该表存储区域的ID信息。连接条件为楼栋表的pid与区域表的id相等。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接单位表（s_organization），该表存储单位的ID信息。连接条件为区域表的pid与单位表的id相等。\n\n8. `where DATEDIFF(now(), 异常行为表.moment) < 7`: 设置查询条件，即异常行为发生的日期与当前日期的差值小于7天（一周的时间范围）。\n\n9. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 进一步限制查询范围，要求区域名称为“高新校区”并且单位名称是“中国科学技术大学”。\n\n10. `group by 楼栋表.building_name`: 对查询结果按照楼栋名称进行分组，以便计算每个楼栋的异常行为数量。\n\n11. `order by count(*) desc`: 对查询结果按照异常行为数量降序排列，以便查看发生异常行为数量最多的楼栋排在最前面。"
    },
    {
        "query": "1号学科楼安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于查询1号学科楼（即\"1号学科楼\"）安装的监控摄像头数量。以下是各子句的解释：\n\n1. select count(*) as 摄像头数量：选择计数函数count(*)，返回满足条件的摄像头的数量。\n\n2. from s_camera as 摄像头表：指定数据来源，s_camera表示摄像头信息表。\n\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id：连接s_room表，摄像头表的pid字段等于房间表的id字段。\n\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：连接s_building表，房间表的pid字段等于楼栋表的id字段。\n\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id：连接s_region表，楼栋表的pid字段等于区域表的id字段。\n\n6. join s_organization as 单位表 on 区域表.pid=单位表.id：连接s_organization表，区域表的pid字段等于单位表的id字段。\n\n7. where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'：设置条件，只查询1号学科楼、位于高新校区并且属于中国科学技术大学的摄像头。\n\n通过以上步骤，该查询语句将返回1号学科楼安装的监控摄像头的数量。"
    },
    {
        "query": "查一下信智楼的所有摄像头的基本信息",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从数据库中获取信智楼所有摄像头的基本信息。下面是各部分解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：这是选择要查询的列，即摄像头的编号、IP地址和安装位置。\n\n2. `from s_camera as 摄像头表`：这是指定数据来源，即摄像头表（s_camera）。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是连接摄像头表和房间表，通过摄像头所在的房间ID进行关联。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是连接房间表和楼栋表，通过房间所在的楼栋ID进行关联。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是连接楼栋表和区域表，通过楼栋所在的地域ID进行关联。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是连接区域表和单位表，通过地域所属的单位ID进行关联。\n\n7. `where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是查询条件，即只选取“信智楼”、“高新校区”、“中国科学技术大学”的信息。\n\n8. `order by 摄像头表.id asc limit 1000`：这是排序和限制结果数量，即按摄像头编号从小到大排序，并仅返回前1000条记录。"
    },
    {
        "query": "最少发生哪些类型的异常行为？",
        "script": "```sql\nselect 异常行为类型表.name from t_abnormal_type as 异常行为类型表 where name not in( select 异常类型表.name as 异常行为类型 from d_abnormal_behavior as 异常行为表 join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by count(*) desc  ) limit 10;\n```\n这个SQL查询语句是用于查询最少发生的10种异常行为类型。以下是各子句的解释：\n\n1. `SELECT 异常行为类型表.name`：选择从异常行为类型表的name列作为查询结果。\n2. `FROM t_abnormal_type AS 异常行为类型表`：指定查询的表来源为t_abnormal_type，并为其分配别名“异常行为类型表”。\n3. `WHERE name NOT IN (...)`：设置一个筛选条件，即要查询的异常行为类型不在下面的子查询中返回的结果集内。\n4. `(SELECT 异常类型表.name AS 异常行为类型`：开始子查询，用于查找在特定条件下发生的异常行为类型及其出现次数。\n5. `FROM d_abnormal_behavior AS 异常行为表`：指定子查询的表来源为d_abnormal_behavior，并为其分配别名“异常行为表”。\n6. `JOIN s_camera AS 摄像头表 ON 异常行为表.camera_id = 摄像头表.id`：通过ON条件将摄像头表与异常行为表连接在一起，连接条件是摄像头表中的camera_id等于异常行为表中的id。\n7. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`：通过ON条件将房间表与摄像头表连接在一起，连接条件是摄像头表中的pid等于房间表中的id。\n8. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`：通过ON条件将楼栋表与房间表连接在一起，连接条件是房间表中的pid等于楼栋表中的id。\n9. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`：通过ON条件将区域表与楼栋表连接在一起，连接条件是楼栋表中的pid等于区域表中的id。\n10. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`：通过ON条件将单位表与区域表连接在一起，连接条件是区域表中的pid等于单位表中的id。\n11. `JOIN t_abnormal_type AS 异常类型表 ON 异常行为表.abnormal_type = 异常类型表.id`：通过ON条件将异常类型表与异常行为表连接在一起，连接条件是异常行为表中的abnormal_type等于异常类型表中的id。\n12. `WHERE 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`：设置筛选条件，只考虑发生在“高新校区”且属于“中国科学技术大学”的异常行为数据。\n13. `GROUP BY 异常类型表.name`：按照异常类型表中的name进行分组，以便计算每种异常行为类型出现的次数。\n14. `ORDER BY COUNT(*) DESC`：按每种异常行为类型出现的次数进行排序，降序排列，即最多的排在最前面。\n15. `LIMIT 10`：限制返回结果的条数为10，即查询最少发生的10种异常行为类型。\n\n最后，这个查询将返回最少发生的10种异常行为类型。"
    },
    {
        "query": "最常发生哪些类型的异常行为？",
        "script": "```sql\nselect 异常类型表.name as 异常行为类型 from d_abnormal_behavior as 异常行为表 join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by count(*) desc  limit 10;\n```\n这是一个SQL查询语句，用于从多个表中获取并统计某种特定区域的异常行为类型及其出现的次数。以下是各部分解释：\n\n1. `select 异常类型表.name as 异常行为类型`：选择异常类型表的名称字段作为\"异常行为类型\"列进行输出。\n2. `from d_abnormal_behavior as 异常行为表`：声明查询的主表为异常行为表，别名“d_abnormal_behavior”可替换为原表名。\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`：连接摄像头表，条件是异常行为表中的camera_id与摄像头表中的id相等。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表，条件是摄像头表中的父ID（pid）与房间表中的id相等。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表，条件是房间表中的父ID（pid）与楼栋表中的id相等。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表，条件是楼栋表中的父ID（pid）与区域表中的id相等。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表，条件是区域表中的父ID（pid）与单位表中的id相等。\n8. `join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id`：连接异常类型表，条件是异常行为表中的异常类型（abnormal_type）与异常类型表中的id相等。\n9. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询的筛选条件，即查询的数据必须属于指定区域（例如“高新校区”）和单位（例如“中国科学技术大学”）。\n10. `group by 异常类型表.name`：按照异常类型表中的名称进行分组，以便计算每种异常行为类型的出现次数。\n11. `order by count(*) desc`：按每组数据的记录数量（即异常行为类型出现的次数）进行降序排列。\n12. `limit 10`：限制查询结果中显示的前10条数据。\n\n该查询将返回指定区域和单位内出现次数最多的前10种异常行为类型及其具体信息。"
    },
    {
        "query": "有人房间数量",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'      and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一个SQL查询语句，用于计算满足特定条件的房间数量。以下是各子句的解释：\n\n1. `count(房间表.room_name) 有人的房间数量`: 这是查询的目标，即计算符合条件的房间数量。\n\n2. `select`: 从指定的表格中获取数据。\n\n3. `s_camera as 摄像头表`: 将摄像头表格命名为摄像头表，方便后续引用。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头表和房间表的pid字段关联两个表格，这样可以在查询中同时使用摄像头表和房间表的数据。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 同样地，通过房间表和楼栋表的pid字段关联两个表格。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋表和区域表的pid字段关联两个表格。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域表和单位表的pid字段关联两个表格。\n\n8. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，即只查询“高新校区”且属于“中国科学技术大学”的数据。\n\n9. `and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 这个子句是嵌套的子查询，用于找出与人员表中的每个人关联的摄像头ID，并筛选出这些摄像头在过去10分钟内有更新（例如有人进入或离开）的记录。\n\n这个查询语句的总体目的是计算在特定条件下（如过去10分钟内有人在场）的房间数量。"
    },
    {
        "query": "1号学科楼安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个表中联合查询并计算“1号学科楼”安装摄像头的数量。下面是对这个SQL语句的详细解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数`count()`作为查询结果，将返回的计数结果命名为`摄像头数量`。\n2. `from s_camera as 摄像头表`：指定数据来源，这里是名为`s_camera`的表，代表摄像头信息。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接`摄像头表`和`房间表`，连接条件是`摄像头表`中的`pid`字段等于`房间表`中的`id`字段。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接`房间表`和`楼栋表`，连接条件是`房间表`中的`pid`字段等于`楼栋表`中的`id`字段。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接`楼栋表`和`区域表`，连接条件是`楼栋表`中的`pid`字段等于`区域表`中的`id`字段。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接`区域表`和`单位表`，连接条件是`区域表`中的`pid`字段等于`单位表`中的`id`字段。\n7. `where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，要求`楼栋表`的`building_name`字段值为“1号学科楼”，`区域表`的`region_name`字段值为“高新校区”，以及`单位表`的`org_name`字段值为“中国科学技术大学”。\n\n这个查询语句的目的是找出满足特定条件的摄像头数量，即安装在“1号学科楼”、位于“高新校区”且属于“中国科学技术大学”的摄像头数量。"
    },
    {
        "query": "5号学生公寓总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='5号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算5号学生公寓的摄像头数量。以下是各子句的解释：\n\n1. `SELECT count(*) as 摄像头数量`: 选择计数函数COUNT()来计算摄像头的数量，并将结果命名为\"摄像头数量\"。\n2. `FROM s_camera as 摄像头表`: 从名为s_camera的表中获取数据，这里将这个表称为\"摄像头表\"。\n3. `JOIN s_room as 房间表 ON 摄像头表.pid=房间表.id`: 连接s_camera和s_room这两个表，基于s_camera表的pid字段等于s_room表的id字段。这里将s_room表称为\"房间表\"。\n4. `JOIN s_building as 楼栋表 ON 房间表.pid=楼栋表.id`: 连接s_room和s_building这两个表，基于s_room表的pid字段等于s_building表的id字段。这里将s_building表称为\"楼栋表\"。\n5. `JOIN s_region as 区域表 ON 楼栋表.pid=区域表.id`: 连接s_building和s_region这两个表，基于s_building表的pid字段等于s_region表的id字段。这里将s_region表称为\"区域表\"。\n6. `JOIN s_organization as 单位表 ON 区域表.pid=单位表.id`: 连接s_region和s_organization这两个表，基于s_region表的pid字段等于s_organization表的id字段。这里将s_organization表称为\"单位表\"。\n7. `WHERE 楼栋表.building_name='5号学生公寓' AND 区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学'`: 设置查询条件，只返回满足以下条件的记录：楼栋名称是“5号学生公寓”，区域名称是“高新校区”，单位名称是“中国科学技术大学”。\n\n通过这个查询，可以得到5号学生公寓中安装的摄像头数量。"
    },
    {
        "query": "找出一周内各个楼栋异常行为数量分布情况",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 楼栋表.building_name  order by count(*) desc;\n```\n这是一个SQL查询语句，用于查询一周（从当前时间往前推七天）内，高新校区中国科技大学各个楼栋的异常行为数量分布情况。以下是各个部分的解释：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) 异常行为数量`：选择要返回的字段，即楼栋名和该楼栋的异常行为数量。\n\n2. `from d_abnormal_behavior as 异常行为表`：指定数据来源，此处是异常行为数据表。\n\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`：联接摄像头表，根据摄像头ID匹配。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：联接房间表，根据摄像头所在房间的ID进行匹配。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：联接楼栋表，根据房间所属楼栋的ID进行匹配。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：联接区域表，根据楼栋所属区域的ID进行匹配。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：联接单位表，根据区域所属单位的ID进行匹配。\n\n8. `where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，要求异常行为发生的时间在本周内，并且区域和单位为指定的“高新校区”和“中国科学技术大学”。\n\n9. `group by 楼栋表.building_name`：按照楼栋名进行分组，以便统计每个楼栋的异常行为数量。\n\n10. `order by count(*) desc`：按照异常行为数量降序排列，即先列出异常行为数量最多的楼栋。"
    },
    {
        "query": "图书教育中心每天有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取图书教育中心在近30天内的每日平均人数。以下是各部分的解释：\n\n1. `min(人数分布表.stat_time) as 统计时间`：计算并返回每行的统计时间（即日期）的最小值。\n2. `round(avg(人数分布表.num)) as 平均人数`：计算并返回每行的人数（num字段）的平均值，四舍五入到整数。\n3. `a_people_spread_day_building as 人数分布表`：定义一个名为“人数分布表”的表别名，方便后续引用。\n4. `WHERE 人数分布表.building_name='图书教育中心'`：限制结果仅包含“图书教育中心”的数据。\n5. `DATEDIFF(now(), 人数分布表.stat_time) < 30`：筛选出统计时间在30天以内的数据。\n6. `and 人数分布表.region_name='高新校区'`：限制结果仅包含“高新校区”的数据。\n7. `and 人数分布表.org_name='中国科学技术大学'`：限制结果仅包含“中国科学技术大学”的数据。\n8. `group by 人数分布表.stat_day`：按统计日期（stat_day字段）对数据进行分组，以便计算每天的平均人数。\n9. `order by min(人数分布表.stat_time) asc`：按照统计时间（stat_time字段）从小到大排序，即按照日期从最早到最晚的顺序排列。"
    },
    {
        "query": "不经常发生异常行为的房间有哪些？",
        "script": "```sql\nselect 房间表.room_name as 房间名称, count(*) as 5天内异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(),异常行为表.moment) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' GROUP by 房间表.room_name  ORDER by count(*) asc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。以下是各部分的具体含义：\n\n1. `SELECT room_name AS 房间名称, count(*) AS 5天内异常行为数量`：这是查询的目标列，将返回每个房间的名称（`room_name`）以及该房间内过去5天内的异常行为次数（`count(*)`）。\n\n2. `FROM d_abnormal_behavior AS 异常行为表`：这是数据来源表，存储了所有异常行为的信息，包括行为发生的时间（`moment`）、摄像头的ID（`camera_id`）等。\n\n3. `JOIN s_camera AS 摄像头表 ON 异常行为表.camera_id=摄像头表.id`：这是联接（JOIN）的条件，用于将异常行为表与摄像头表进行联接，以便根据摄像头ID获取对应房间和楼栋的信息。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid=房间表.id`：这也是一个联接条件，用于将摄像头表与房间表联接，从而得到每个房间的具体信息。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid=楼栋表.id`：这是另一个联接条件，用于将房间表与楼栋表联接，以获取每个房间所属楼栋的信息。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid=区域表.id`：这是又一个联接条件，用于将楼栋表与区域表联接，以获取每个楼栋所属区域的信息。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid=单位表.id`：这是最后一个联接条件，用于将区域表与单位表联接，以获取每个区域所属单位的信息。\n\n8. `WHERE DATEDIFF(now(), 异常行为表.moment) < 5 AND 区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学'`：这是查询的筛选条件，只选择过去5天内发生的异常行为，并且这些异常行为发生在“高新校区”的中国科学技术大学内。\n\n9. `GROUP BY 房间表.room_name`：这是分组（GROUP BY）的条件，按照房间名称对结果进行分组，以便计算每个房间的异常行为次数。\n\n10. `ORDER BY count(*) ASC LIMIT 10`：这是排序（ORDER BY）和限制（LIMIT）的条件，首先按照异常行为次数从小到大对结果进行排序，然后只返回前10个结果。"
    },
    {
        "query": "统计师生活动中心一个月内每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于计算师生活动中心在一个月内每天的平均人数。下面是该SQL语句的详细解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选择人数分布表中记录的统计时间的最小值作为\"统计时间\"字段。\n\n2. `round(avg(人数分布表.num)) as 平均人数`: 计算人数分布表中的\"num\"字段的平均值并四舍五入保留整数作为\"平均人数\"字段。\n\n3. `from a_people_spread_day_building as 人数分布表`: 从名为a_people_spread_day_building的表格（在这里简称为“人数分布表”）中选择数据。\n\n4. `WHERE 人数分布表.building_name='师生活动中心'`: 筛选出\"building_name\"字段值为\"师生活动中心\"的记录。\n\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`: 筛选出距离现在的时间小于30天的记录。这个条件确保我们只考虑过去30天内的情况。\n\n6. `and 人数分布表.region_name='高新校区'`: 筛选出\"region_name\"字段值为\"高新校区\"的记录。\n\n7. `and 人数分布表.org_name='中国科学技术大学'`: 筛选出\"org_name\"字段值为\"中国科学技术大学\"的记录。\n\n8. `group by 人数分布表.stat_day`: 对日期进行分组，以便计算每一天的平均人数。\n\n9. `order by min(人数分布表.stat_time) asc`: 对结果按照统计时间升序排列。"
    },
    {
        "query": "告诉我现在7号学生公寓有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='7号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL查询语句的目的是为了获取7号学生公寓当前的人数。以下是各个部分的详细解释：\n\n1. `a_people_spread_day_building`：这是一个数据库中的表格名称，用于存储人员分布信息。\n2. `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：这个条件用于计算统计时间（`stat_time`）与当前时间的小时差值，并确保该差值小于5小时，即在过去5小时内进行的统计数据。\n3. `and 人数分布表.building_name='7号学生公寓'`：这个条件用于筛选出特定的学生公寓，即7号学生公寓的数据。\n4. `and 人数分布表.region_name='高新校区'`：这个条件用于筛选出位于高新校区的数据。\n5. `and 人数分布表.org_name='中国科学技术大学'`：这个条件用于筛选出属于中国科学技术大学的数据。\n6. `order by 人数分布表.stat_time desc`：这个排序条件将结果按照`stat_time`降序排列，也就是按时间顺序从新到旧排列。\n7. `limit 1`：这个限制条件将结果集的大小限制为1条记录，因为我们需要获取的是当前的人数，只需要最近的一条记录即可。\n\n所以，这个SQL语句的意思是：在高新校区的中国科学技术大学的7号学生公寓中，查询过去5小时内最新的人员分布信息，并返回其中的人数。"
    },
    {
        "query": "信智楼不同上衣风格的人数",
        "script": "```sql\nselect substring(人员表.upper,6) as 上衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.upper  order by 人员表.upper asc;\n```\n这是一段SQL查询语句，用于统计\"信智楼\"（假设是某个建筑的名字）里不同上衣风格的人数。下面是每个部分的具体解释：\n\n1. `d_people`：假设是一个存储人员信息的数据库表。\n2. `s_camera`：假设是一个存储摄像头信息的数据库表，包含摄像头ID等信息。\n3. `s_room`：假设是一个存储房间信息的数据库表，包含房间ID、楼栋ID等信息。\n4. `s_building`：假设是一个存储楼栋信息的数据库表，包含楼栋ID、区域ID等信息。\n5. `s_region`：假设是一个存储区域信息的数据库表，包含区域ID、单位名称等信息。\n6. `s_organization`：假设是一个存储单位信息的数据库表，包含单位名称、区域ID等信息。\n7. `TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：这个条件限制查询结果的时间范围，即最近5分钟内的数据。\n8. `区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学' AND 楼栋表.building_name='信智楼'`：这些条件限制了查询结果的地理范围和单位范围，即只查询\"高新校区\"的\"中国科学技术大学\"的\"信智楼\"的相关数据。\n9. `group by 人员表.upper`：这个语句对查询结果进行分组，按照不同的上衣风格（这里用`substring(人员表.upper,6) as 上衣风格`来提取上衣风格的描述，具体方式可能因数据库和实际应用而异）进行分类。\n10. `order by 人员表.upper asc`：这个语句对查询结果进行排序，按照上衣风格升序排列。"
    },
    {
        "query": "给出1号学生公寓的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算1号学生公寓的摄像头数量。下面是各子句的解释：\n\n1. `SELECT`: 选择需要返回的字段和表达式，这里选择的是`COUNT(*)`作为摄像头数量；\n2. `COUNT(*) AS 摄像头数量`: 对所有符合条件的数据行进行计数，并命名为“摄像头数量”；\n3. `FROM s_camera AS 摄像头表`: 从名为s_camera的表中获取数据，为了方便后面引用，将其简称为\"摄像头表\"；\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 将s_room表（简称\"房间表\"）与摄像头表通过ON条件连接起来，即摄像头的pid等于房间的id；\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 将s_building表（简称\"楼栋表\"）与房间表通过ON条件连接起来，即房间的pid等于楼栋的id；\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 将s_region表（简称\"区域表\"）与楼栋表通过ON条件连接起来，即楼栋的pid等于区域的id；\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 将s_organization表（简称\"单位表\"）与区域表通过ON条件连接起来，即区域的pid等于单位的id；\n8. `WHERE 楼栋表.building_name = '1号学生公寓' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 根据指定的条件筛选数据，这里筛选出满足\"1号学生公寓\"、\"高新校区\"和中国科学技术大学的数据；\n9. `AS`: 为某个字段或表达式赋予别名，方便后续查询和输出。\n\n这段SQL语句的目的是找出1号学生公寓中符合特定条件的摄像头数量，即位于\"1号学生公寓\"、\"高新校区\"和中国科学技术大学的摄像头数量。"
    },
    {
        "query": "现在有多少人在图书教育中心？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前在“图书教育中心”的人数信息。以下是各部分的解释：\n\n1. `select 人数分布表.num as 人数`：选择`num`列作为返回结果中的`人数`字段。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表名为`a_people_spread_day_building`，并将其简写为`人数分布表`。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置一个条件，即距离现在（now()函数返回的当前时间）不到5小时的时间（以小时为单位）的数据。\n\n4. `and 人数分布表.building_name='图书教育中心'`：限制查询结果为“图书教育中心”的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：限制查询结果为位于“高新校区”的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：限制查询结果为属于“中国科学技术大学”的数据。\n\n7. `order by 人数分布表.stat_time desc`：按照`stat_time`降序排列查询结果，即最近的统计数据在最前面。\n\n8. `limit 1`：限制查询结果的数量，只返回一条数据。\n\n整个查询语句的意思是：查询最近5小时内，位于“图书教育中心”且位于“高新校区”和属于“中国科学技术大学”的统计数据，并且只返回最新的一条。"
    },
    {
        "query": "3号学科楼监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从数据库中获取满足特定条件的监控设备（摄像头）的数量。以下是各子句的详细解释：\n\n1. `select count(*) as 摄像头数量`: 选择摄像头的数量作为结果。使用`count(*)`函数计算摄像头的总数。\n\n2. `from s_camera as 摄像头表`: 从s_camera这张表开始查询，将这张表简称为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接s_room这张表，将这张表简称为\"房间表\"。连接条件是摄像头表的pid字段与房间表的id字段相等。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接s_building这张表，将这张表简称为\"楼栋表\"。连接条件是房间表的pid字段与楼栋表的id字段相等。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接s_region这张表，将这张表简称为\"区域表\"。连接条件是楼栋表的pid字段与区域表的id字段相等。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接s_organization这张表，将这张表简称为\"单位表\"。连接条件是区域表的pid字段与单位表的id字段相等。\n\n7. `where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件。只有当楼栋表的building_name字段等于'3号学科楼'，区域表的region_name字段等于'高新校区'，单位表的org_name字段等于'中国科学技术大学'时，才会返回相应的数据。"
    },
    {
        "query": "有人的室内摄像头有哪些",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个复杂的SQL查询语句，用于从多个表中获取信息。下面是该SQL语句的详细解释：\n\n1. `s_camera`（摄像头表）：存储摄像头的基本信息，如ID、名称等；\n2. `s_room`（房间表）：存储各个房间的信息，包括ID和名称；\n3. `s_building`（楼栋表）：存储各个楼栋的信息，包括ID和名称；\n4. `s_region`（区域表）：存储各个区域的信息，包括ID和名称；\n5. `s_organization`（单位表）：存储各个单位的信息，包括ID和名称；\n6. `d_people`（人员动态表）：存储人员的动态信息，如进出记录；\n7. `moment`：表示人员动态的时间戳字段；\n8. `now()`：当前时间，用于计算与人员动态时间的间隔；\n9. `TIMESTAMPDIFF(MINUTE, moment, now()) < 10`：表示人员最近10分钟内的动态信息；\n10. `inhouse = 1`：表示摄像头是室内的（室外摄像头标记为0）；\n11. `camera_id`：摄像头ID；\n12. `DISTINCT`：去除重复的摄像头ID；\n13. `order by 摄像头表.id asc limit 1000`：按摄像头ID升序排列，并限制返回1000条结果。\n\n这个查询的目的是找出最近10分钟内（以分钟为单位计算）有人员活动记录的室内摄像头，并按照摄像头ID升序排列，同时限制返回的结果数量为1000条。"
    },
    {
        "query": "1号学生公寓的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='1号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定时间段内（即过去5小时内）的\"1号学生公寓\"人数信息。下面是该SQL语句的详细解释：\n\n1. `SELECT 人数分布表.num AS 人数`：选择\"num\"字段作为输出结果的字段名，并将其重命名为\"人数\"。\n\n2. `FROM a_people_spread_day_building as 人数分布表`：指定数据来源表，并为其分配一个别名\"人数分布表\"，以便在后续条件中使用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置筛选条件，只选取在过去5小时内的数据。这里使用`TIMESTAMPDIFF`函数计算当前时间与统计时间之间的时差，确保返回的数据满足时间要求。\n\n4. `and 人数分布表.building_name='1号学生公寓'`：添加条件，限制只查询\"1号学生公寓\"的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：添加条件，限制只查询\"高新校区\"的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：添加条件，限制只查询属于\"中国科学技术大学\"的数据。\n\n7. `ORDER BY 人数分布表.stat_time DESC LIMIT 1`：对查询结果进行排序，按照统计时间降序排列，并限制返回的结果条数为1条。"
    },
    {
        "query": "统计学生食堂一个月内每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于统计学生食堂一个月内每天的平均人数。下面是详细的解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`：选择最小（最近）的统计时间作为结果中的“统计时间”列。\n\n2. `round(avg(人数分布表.num)) as 平均人数`：计算每天的人数平均值并四舍五入保留小数位，将其命名为“平均人数”列。\n\n3. `from a_people_spread_day_building as 人数分布表`：从名为“a_people_spread_day_building”的表格中获取数据，并将其简称为“人数分布表”。\n\n4. `WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：设置筛选条件，只选取与当前日期相差小于30天、位于“高新校区”和属于“中国科学技术大学”的学生食堂的数据。\n\n5. `group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc`：按照统计日期进行分组，并按照统计时间升序排列。"
    },
    {
        "query": "行政办公楼的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政办公楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取\"行政办公楼\"在特定时间段内的人数信息。以下是各部分解释：\n\n1. `a_people_spread_day_building`：数据表名，存储人员分布的数据。\n2. `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：计算当前时间与统计时间之间的小时差，限制查询最近5小时内的数据。\n3. `and 人数分布表.building_name='行政办公楼'`：筛选出建筑名为“行政办公楼”的数据。\n4. `and 人数分布表.region_name='高新校区'`：筛选出地区名为“高新校区”的数据。\n5. `and 人数分布表.org_name='中国科学技术大学'`：筛选出组织名为“中国科学技术大学”的数据。\n6. `order by 人数分布表.stat_time desc`：按统计时间降序排列数据。\n7. `limit 1`：仅返回一条结果（即最新的一条）。"
    },
    {
        "query": "3号学科楼的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='3号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取\"3号学科楼\"的实时人数。以下是各部分的解释：\n\n1. `select 人数分布表.num as 人数`：选择\"人数分布表\"表的\"num\"字段，并将其重命名为\"人数\"。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表为\"a_people_spread_day_building\"，并为其取别名为\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置时间过滤条件，只返回过去5小时内的数据。\n\n4. `and 人数分布表.building_name='3号学科楼'`：设置建筑名称过滤条件，只返回\"3号学科楼\"的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：设置地区名称过滤条件，只返回\"高新校区\"的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置组织名称过滤条件，只返回\"中国科学技术大学\"的数据。\n\n7. `order by 人数分布表.stat_time desc`：按照统计时间降序排列结果，即最新的数据排在最前面。\n\n8. `limit 1`：限制返回结果的数量，这里只返回一条数据。"
    },
    {
        "query": "列出镜头中没有人的室内摄像头的编号",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个关联表中检索特定条件下的摄像头信息。以下是各个部分和子句的详细解释：\n\n1. `SELECT`: 选择要返回的列。这里选择了摄像头表的`id`（摄像头编号）、房间表的`room_name`（安装位置）、楼栋表的`building_name`（所属大楼）。\n\n2. `FROM`: 指定要查询的表。这里是`s_camera`（摄像头表）。\n\n3. `JOIN`: 将其他表与摄像头表连接在一起，基于这些表之间的相关字段。这里是`s_room`（房间表）、`s_building`（楼栋表）、`s_region`（区域表）和`s_organization`（单位表）。\n\n4. `ON`: 定义连接条件。例如，摄像头表的`pid`等于房间表的`id`等。\n\n5. `WHERE`: 设置查询条件。这里筛选出室内摄像头（`inhouse = 1`），并且该摄像头在过去10分钟内没有记录到人（`camera_id`不在人记录中）。此外，还设置了区域名称（`区域表.region_name`）和单位名称（`单位表.org_name`）为“高新校区”和“中国科学技术大学”。\n\n6. `ORDER BY`: 对结果按照摄像头编号（`摄像头表.id`）升序排列。\n\n7. `LIMIT`: 限制返回的记录数量，这里是1000条。\n\n这个查询将返回在指定的\"高新校区\"的中国科学技术大学的室内摄像头的编号、安装位置和所属大楼等信息，且过去10分钟内没有记录到人的摄像头。"
    },
    {
        "query": "信智楼5分钟内识别到多少手中未持物的行人？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询语句，用于在信智楼的摄像头的监控范围内，查找5分钟之内手中未持物的行人人数。以下是各部分的具体解释：\n\n1. `d_people` AS 人员表：存储行人的基本信息和行为的表；\n2. `s_camera` AS 摄像头表：存储摄像头的配置信息和位置信息的表；\n3. `s_room` AS 房间表：存储楼层和具体位置的表；\n4. `s_building` AS 楼栋表：存储楼栋名称的表；\n5. `s_region` AS 区域表：存储校区名称的表；\n6. `s_organization` AS 单位表：存储学校名称的表；\n7. `t_hold_object` AS 持物维表：存储行人所持物品信息的表；\n8. `TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：表示查询最近5分钟内的数据；\n9. `持物维表.name='未持物'`：表示筛选出手中未持物的行人；\n10. `区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学' AND 楼栋表.building_name='信智楼'`：表示限定查询的范围是信智楼。\n\n通过以上条件的联合过滤，可以计算出信智楼5分钟内识别到手中未持物的行人人数。"
    },
    {
        "query": "2号学生公寓安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询和计算“2号学生公寓”的摄像头数量。\n\n以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择摄像头的计数作为结果，并给这个结果起名为 \"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`：从 s_camera 这个表（这里假设是摄像头表）开始查询。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接 s_room 这个表（这里假设是房间表）到查询，条件是摄像头表的 pid 字段等于房间表的 id 字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接 s_building 这个表（这里假设是楼栋表）到查询，条件是房间表的 pid 字段等于楼栋表的 id 字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接 s_region 这个表（这里假设是区域表）到查询，条件是楼栋表的 pid 字段等于区域表的 id 字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接 s_organization 这个表（这里假设是单位表）到查询，条件是区域表的 pid 字段等于单位表的 id 字段。\n\n7. `where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设定查询的条件，即只有满足这三个条件的数据才会被查询出来。\n\n这段 SQL 语句的意思是：找出满足 “2号学生公寓”、“高新校区” 和 “中国科学技术大学” 这些条件的摄像头数量。"
    },
    {
        "query": "信智楼每天最少有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这个SQL语句用于从数据库中查询并返回一个记录集，其中包含“信智楼”在最近30天内每天的最低人数。以下是各部分的具体解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选择最小的统计时间作为结果中的“统计时间”字段。\n2. `round(min(人数分布表.num)) as 平均人数`: 对最小的人数进行四舍五入操作，并将其命名为“平均人数”。\n3. `from a_people_spread_day_building as 人数分布表`: 从名为\"a_people_spread_day_building\"的表中获取数据，将其称为\"人数分布表\"。\n4. `WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 过滤条件，只返回满足以下条件的记录：建筑名称为“信智楼”，统计时间与当前时间的差值小于30天，所在地区为“高新校区”，所属单位为“中国科学技术大学”。\n5. `group by 人数分布表.stat_day`: 根据统计日期对数据进行分组，以便计算每个日期的最小人数。\n6. `order by min(人数分布表.stat_time) asc`: 按照统计时间的最小值升序排列结果，即先列出最早的一天，然后依次往后排。"
    },
    {
        "query": "图教中心的摄像头安装情况",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从多个关联的数据表中获取摄像头的安装信息。以下是各部分的具体含义：\n\n1. `select`：选择需要返回的列。这里选择了摄像头表的id（摄像头编号）、IP地址和房间表的名字（安装位置）。\n\n2. `from`：指定查询的主表，这里是摄像头表（s_camera）。\n\n3. `join`：连接其他数据表。这里连接了四个表：房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）。通过摄像头表与房间表的pid关系，以及房间表与其他表的pid关系进行连接。\n\n4. `where`：设置查询条件。这里要求楼栋名为“图书教育中心”，区域名为“高新校区”，单位为“中国科学技术大学”。\n\n5. `order by`：对查询结果按照摄像头编号进行升序排序。\n\n6. `limit`：限制查询结果的行数，这里是1000。\n\n综合起来，这个查询将返回在特定条件下，图书教育中心的所有摄像头的安装信息。"
    },
    {
        "query": "信智楼每天最多有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一段SQL查询语句，用于查询某座教学楼（在这个例子中是“信智楼”）在最近的30天内的最大平均人数。具体解释如下：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选择最小的时间作为统计时间；\n2. `round(max(人数分布表.num)) as 平均人数`: 计算最大的平均人数；\n3. `from a_people_spread_day_building as 人数分布表`: 从\"a_people_spread_day_building\"表中获取数据；\n4. `WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 筛选出符合条件的记录，即最近30天内、位于“高新校区”且属于“中国科学技术大学”的“信智楼”的数据；\n5. `group by 人数分布表.stat_day`: 根据日期（stat_day）进行分组；\n6. `order by min(人数分布表.stat_time) asc`: 按统计时间的最小值升序排列。"
    },
    {
        "query": "图教中心哪些地方安装了监控？",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这个SQL查询语句的目的是从数据库中获取图书教育中心（假设这是一个学校）的摄像头的详细信息，包括摄像头编号、IP地址以及安装位置等。具体来说：\n\n1. `select`: 选择需要查询的列，包括摄像头表中的摄像头编号和IP地址，房间表中的安装位置。\n2. `from`: 从四个关联的表中查询数据。这些表分别是s_camera（摄像头表），s_room（房间表），s_building（楼栋表），s_region（区域表），s_organization（单位表）。\n3. `join`: 使用连接操作符将这四个表连接在一起，基于每个表的主键和外键关系。例如，摄像头表通过外键与房间表连接，房间表通过外键与楼栋表连接，以此类推。\n4. `where`: 设置查询条件。在这个例子中，要求查询结果满足以下条件：楼栋名称等于“图书教育中心”，区域名称等于“高新校区”，单位名称等于“中国科学技术大学”。\n5. `order by`: 对查询结果按照摄像头编号进行升序排序。\n6. `limit`: 限制查询结果的行数，这里设为1000行。\n\n这个查询语句最后会返回符合条件的前1000条摄像头的详细信息。"
    },
    {
        "query": "运动场监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算满足特定条件的监控摄像头的数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数count(*)作为返回的列，并命名为\"摄像头数量\"，表示我们要计算符合条件的监控摄像头的总数。\n\n2. `from s_camera as 摄像头表`：指定查询的数据来源，这里是从名为s_camera的表中获取数据，为了便于理解，我们将其称为\"摄像头表\"。\n\n3. `join s_room as 房间表`：连接s_room表，将其称为\"房间表\"。这里的连接条件是摄像头表（s_camera）中的pid与房间表（s_room）的id相等。\n\n4. `join s_building as 楼栋表`：连接s_building表，将其称为\"楼栋表\"。这里的连接条件是房间表（s_room）中的pid与楼栋表（s_building）的id相等。\n\n5. `join s_region as 区域表`：连接s_region表，将其称为\"区域表\"。这里的连接条件是楼栋表（s_building）中的pid与区域表（s_region）的id相等。\n\n6. `join s_organization as 单位表`：连接s_organization表，将其称为\"单位表\"。这里的连接条件是区域表（s_region）中的pid与单位表（s_organization）的id相等。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即只有当楼栋表（s_building）的building_name为\"体育场\"、区域表（s_region）的region_name为\"高新校区\"且单位表（s_organization）的org_name为\"中国科学技术大学\"时，才计算相应的摄像头数量。"
    },
    {
        "query": "图书馆哪些地方安装了监控？",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从多个表中获取图书馆内的监控设备安装信息。以下是各子句的解释：\n\n1. `select`: 定义要查询的数据字段。\n2. `摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 选择摄像头表中的id（作为摄像头编号）、ip和房间表中的room_name（作为安装位置）作为查询结果的字段。\n3. `from s_camera as 摄像头表`: 指定查询的主表，即s_camera表，用于存储摄像头信息。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和房间表，根据摄像头的pid等于房间表的id进行关联。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表和楼栋表，根据房间的pid等于楼栋表的id进行关联。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表和区域表，根据楼栋的pid等于区域的id进行关联。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表和单位表，根据区域的pid等于单位的id进行关联。\n8. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只查询名为“图书教育中心”的楼栋，位于“高新校区”的区域，属于“中国科学技术大学”的单位的数据。\n9. `order by 摄像头表.id asc limit 1000`: 按照摄像头编号从小到大排序（asc表示升序），并限制返回结果的数量为1000条。"
    },
    {
        "query": "给出3号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算3号学生公寓安装的摄像头数量。以下是各个部分的作用解释：\n\n1. `SELECT`: 从数据库中选取数据。\n2. `COUNT(*) AS 摄像头数量`: 计算摄像头的总数，并将结果命名为“摄像头数量”。\n3. `FROM s_camera AS 摄像头表`: 指定摄像头数据所在的表格（s_camera），并为其起个别名（摄像头表），便于后续连接操作和简化代码。\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 将摄像头表与房间表通过摄像头所在房间的主键（pid）进行连接。\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 将房间表与楼栋表通过房间所属楼栋的主键（pid）进行连接。\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 将楼栋表与区域表通过楼栋所属区域的主键（pid）进行连接。\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 将区域表与单位表通过区域所属单位的主键（pid）进行连接。\n8. `WHERE 楼栋表.building_name = '3号学生公寓' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 筛选满足特定条件（楼栋名称为3号学生公寓、区域名称为高新校区、单位为“中国科学技术大学”）的数据。\n\n综合以上各部分，该SQL查询语句将返回满足条件的所有摄像头数据，并通过计数函数计算3号学生公寓安装的摄像头数量。"
    },
    {
        "query": "当前信智楼有多少个房间里面没有人？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'     and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一个复杂的SQL查询语句，用于计算某个具体地点（在这里是“信智楼”）在指定时间段内没有人的房间数量。以下是这个SQL语句的详细解析：\n\n1. `select count(房间表.room_name) 有人的房间数量`：这是查询的目标，即计算出信智楼中有人（即有人在监控摄像头范围内）的房间数量。\n\n2. `from s_camera as 摄像头表`：从摄像头表（s_camera）开始查询，摄像头表包含了摄像头的各种信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表与房间表（s_room）通过摄像头的主键（pid）和房间的主键（id）进行连接，这样每个摄像头都能对应到一个或多个房间。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：同样地，通过房间的主键（pid）和楼栋的主键（id）将房间表与楼栋表（s_building）进行连接，以便获取每个房间所在的楼栋信息。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：再通过楼栋的主键（pid）和区域的主键（id）将楼栋表与区域表（s_region）进行连接，以获得每个房间所在区域的详细信息。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：最后，通过区域的主键（pid）和单位的主键（id）将区域表与单位表（s_organization）进行连接，以获取每个房间所属单位的名称。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`：这些条件用于过滤数据，只选择位于\"高新校区\"、属于\"中国科学技术大学\"并且名字为\"信智楼\"的楼栋的数据。\n\n8. `and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：这个子查询用于排除最近10分钟内有人员的摄像头对应的房间。如果摄像头表中的摄像头id不在这个子查询返回的列表中，那么该摄像头就没有人在附近，对应的房间就被视为无人的。"
    },
    {
        "query": "信智楼哪些地方安装了监控",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从数据库中获取特定楼宇（信智楼）的监控设备信息。具体来说：\n\n1. `select`: 从指定的数据表中选取特定的数据列。\n2. `摄像头表.id as 摄像头编号`: 将摄像头表的id字段作为新的列名\"摄像头编号\"返回。\n3. `摄像头表.ip as IP地址`: 将摄像头表的ip字段作为新的列名\"IP地址\"返回。\n4. `房间表.room_name as 安装位置`: 将房间表的room_name字段作为新的列名\"安装位置\"返回。\n5. `from s_camera as 摄像头表`: 声明摄像头表是数据来源之一。\n6. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和房间表，条件是摄像头表的pid等于房间表的id。\n7. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表和楼栋表，条件是房间表的pid等于楼栋表的id。\n8. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表和区域表，条件是楼栋表的pid等于区域表的id。\n9. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表和单位表，条件是区域表的pid等于单位表的id。\n10. `where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设定查询的条件，即需要查询的楼宇名称、区域名称和单位名称。\n11. `order by 摄像头表.id asc limit 1000;`: 按照摄像头表中的id字段升序排列结果集，并限制结果为前1000条。"
    },
    {
        "query": "没拍到人的室外摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从多个表中获取数据。下面是这段SQL的具体解释：\n\n1. select: 从指定的表中选取特定的列和行。\n2. 摄像头表.id as 摄像头编号: 从摄像头表中选取id列作为摄像头编号。\n3. 房间表.room_name as 安装位置: 从房间表中选取room_name列作为摄像头安装的位置。\n4. 楼栋表.building_name as 所属大楼: 从楼栋表中选取building_name列作为摄像头所在的大楼名称。\n5. from: 指定要从中选取数据的表。\n6. s_camera as 摄像头表: 摄像头表是源表之一，包含摄像头的各种信息。\n7. join: 将不同的表通过某个字段关联起来，以方便在查询中同时使用这些表的数据。\n8. s_room as 房间表: 房间表是源表之一，包含各个房间的信息。\n9. on: 指定连接条件，即两个表之间的关联字段。\n10. 摄像头表.pid=房间表.id: 摄像头表中的pid字段与房间表中的id字段相等。\n11. s_building as 楼栋表: 楼栋表是源表之一，包含各个楼栋的信息。\n12. 房间表.pid=楼栋表.id: 房间表中的pid字段与楼栋表中的id字段相等。\n13. s_region as 区域表: 区域表是源表之一，包含各个校区或部门的信息。\n14. 楼栋表.pid=区域表.id: 楼栋表中的pid字段与区域表中的id字段相等。\n15. s_organization as 单位表: 单位表是源表之一，包含各个单位的组织结构信息。\n16. 区域表.pid=单位表.id: 区域表中的pid字段与单位表中的id字段相等。\n17. where: 设置查询条件，即满足哪些条件的记录才会被选取出来。\n18. 摄像头表.inhouse = 0: 只有那些不在室内的摄像头（例如室外的监控摄像头）才会被选中。\n19. 摄像头表.id not in: 排除掉那些在最近10分钟内有人经过的摄像头。\n20. (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10): 这个子查询返回了在最近10分钟内有人经过的摄像头的ID列表。\n21. and: 将这些查询条件组合在一起，只有同时满足这些条件的记录才会被选中。\n22. 区域表.region_name='高新校区': 只选择位于“高新校区”的摄像头。\n23. and 单位表.org_name='中国科学技术大学': 只选择属于“中国科学技术大学”的摄像头。\n24. order by: 对查询结果按照某种顺序进行排序。\n25. 摄像头表.id asc: 按照摄像头的ID升序排列。\n26. limit: 限制查询结果的数量。\n27. 1000: 只返回最多1000条记录。"
    },
    {
        "query": "1号学生公寓安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个 SQL（结构化查询语言）查询语句，用于从多个表中联合查询并计算满足条件的摄像头数量。以下是这个查询的详细解读：\n\n1. `select count(*) as 摄像头数量`：选择函数 `count(*)` 对所有符合条件的记录进行计数，并将结果命名为 \"摄像头数量\"。\n2. `from s_camera as 摄像头表`：指定要查询的表名，这里是 \"s_camera\"，并将其简称为 \"摄像头表\"。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：使用连接条件 `摄像头表.pid = 房间表.id` 将 \"s_camera\" 表和 \"s_room\" 表（也称作 \"房间表\"）连接在一起。这意味着，在查询结果中，每一行数据都将包含来自 \"摄像头表\" 和 \"房间表\" 的对应信息。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：同样地，使用连接条件 `房间表.pid = 楼栋表.id` 将 \"s_building\" 表（也称作 \"楼栋表\"）添加到查询结果中。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过连接条件 `楼栋表.pid = 区域表.id`，将 \"s_region\" 表（也称作 \"区域表\"）与查询结果关联起来。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：最后，通过连接条件 `区域表.pid = 单位表.id`，将 \"s_organization\" 表（也称作 \"单位表\"）与查询结果关联起来。\n7. `where 楼栋表.building_name='1号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，只返回满足以下三个条件的记录：楼栋名称等于 \"1号学生公寓\"、区域名称等于 \"高新校区\"、单位名称等于 \"中国科学技术大学\"。\n\n综上所述，这个查询语句的目的是找出满足特定条件（即位于 \"1号学生公寓\"、\"高新校区\" 和 \"中国科学技术大学\"）的摄像头数量。"
    },
    {
        "query": "统计信智楼每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于计算“信智楼”在特定时间段内（与当前时间相比，时间差小于30天）的每天平均人数。具体解释如下：\n\n1. SELECT子句：选择所需的列和聚合函数。这里选择了最小统计时间（min(stat_time)）和每天的平均人数（round(avg(num))）。\n\n2. FROM子句：指定数据表来源。这里是`a_people_spread_day_building`表，表示人员分布的日数据。\n\n3. WHERE子句：设定筛选条件。这里限制了建筑名称（building_name）为“信智楼”，并且统计时间与当前时间的差值（DATEDIFF）小于30天，以及区域名（region_name）、组织名（org_name）分别为“高新校区”和“中国科学技术大学”。\n\n4. GROUP BY子句：按指定的字段进行分组。这里是`人数分布表.stat_day`，表示按统计日期分组。\n\n5. ORDER BY子句：设置排序规则。这里是按照最小统计时间（min(stat_time)）升序排列。"
    },
    {
        "query": "信智楼最近5分钟内识别到的人员中，不同上衣风格的人数是多少？",
        "script": "```sql\nselect substring(人员表.upper,6) as 上衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.upper  order by 人员表.upper asc;\n```\n这是一个SQL查询语句，用于查询信智楼在最近5分钟内识别到的人员中，不同上衣风格的人数。以下是各部分的功能解释：\n\n1. `select substring(人员表.upper,6) as 上衣风格, count(*) as 人数`: 选择子句，将`人员表`的`upper`字段的前6个字符作为上衣风格，并计算每种上衣风格的总数作为人数。\n\n2. `from d_people as 人员表`: 数据表选择，从`d_people`表中获取数据，并将其简称为`人员表`。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接条件，将`d_people`表和`s_camera`表根据`camera_id`进行连接。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接条件，将`s_camera`表和`s_room`表根据`pid`进行连接。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接条件，将`s_room`表和`s_building`表根据`pid`进行连接。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接条件，将`s_building`表和`s_region`表根据`pid`进行连接。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接条件，将`s_region`表和`s_organization`表根据`pid`进行连接。\n\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 筛选条件，只选择最近5分钟内识别到的人，且地点为中国科学技术大学的高新校区信智楼。\n\n9. `group by 人员表.upper  order by 人员表.upper asc;`: 分组和排序条件，按照上衣风格对结果进行分组，并按照上衣风格升序排列。"
    },
    {
        "query": "现在有多少人在学生食堂？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='学生食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取某个时间段内“学生食堂”的人数信息。下面是该SQL语句的详细解释：\n\n1. `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：计算当前时间与`stat_time`（记录时间的字段）之间的小时差小于5小时的记录。\n2. `AND 人数分布表.building_name='学生食堂'`：只选取`building_name`（建筑名称）为“学生食堂”的记录。\n3. `AND 人数分布表.region_name='高新校区'`：只选取`region_name`（地区名称）为“高新校区”的记录。\n4. `AND 人数分布表.org_name='中国科学技术大学'`：只选取`org_name`（组织名称）为“中国科学技术大学”的记录。\n5. `ORDER BY 人数分布表.stat_time DESC LIMIT 1`：按照`stat_time`降序排列，并仅返回一条记录。"
    },
    {
        "query": "给出4号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算“4号学生公寓”安装摄像头的数量。下面是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数（COUNT）来计算摄像头的总数，并将结果命名为“摄像头数量”。\n2. `from s_camera as 摄像头表`：指定数据源是名为\"s_camera\"的摄像头表，这是摄像头信息的存储表。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过摄像头的project_id（pid）与房间表的id字段进行联接，获取每个摄像头的所属房间信息。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：通过房间表的pid字段与楼栋表的id字段进行联接，获取每个摄像头的所属楼栋信息。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过楼栋表的pid字段与区域表的id字段进行联接，获取每个摄像头的所属区域信息。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：通过区域表的pid字段与单位表的id字段进行联接，获取每个摄像头的所属单位信息。\n7. `where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置筛选条件，只计算位于“4号学生公寓”、“高新校区”和“中国科学技术大学”的摄像头数量。\n\n综合以上，这个SQL查询语句将返回4号学生公寓安装的摄像头数量。"
    },
    {
        "query": "告诉我现在体育馆有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育馆' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL语句的目的是查询当前在\"体育馆\"（假设这是一个数据库中的地点名称）中的人数。具体来说，它执行了以下操作：\n\n1. `SELECT 人数分布表.num AS 人数`: 从数据表中选择一个名为\"人数\"的列，并将其重命名为\"人数\"。\n2. `FROM a_people_spread_day_building AS 人数分布表`: 指定要查询的数据表名称为\"a_people_spread_day_building\"，并为其分配一个别名\"人数分布表\"，以便在后续的操作中使用。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 设定一个条件，即从统计时间到现在的小时数小于5小时。这可能意味着只返回在最近5小时内更新过的记录。\n4. `AND 人数分布表.building_name = '体育馆'`: 添加另一个条件，即记录的建筑物名称必须为\"体育馆\"。\n5. `AND 人数分布表.region_name = '高新校区'`: 添加另一个条件，即记录的所在地区名称为\"高新校区\"。\n6. `AND 人数分布表.org_name = '中国科学技术大学'`: 添加另一个条件，即记录的所属组织名称为\"中国科学技术大学\"。\n7. `ORDER BY 人数分布表.stat_time DESC LIMIT 1`: 根据统计时间降序排列结果，并限制返回的记录数为1条。这意味着它将返回最近5小时内在\"体育馆\"的最后一条记录。"
    },
    {
        "query": "3号学生公寓现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='3号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL查询语句的目的是为了获取3号学生公寓当前的人数。以下是各个子句的解释：\n\n1. `select 人数分布表.num as 人数`：选择字段\"num\"并将其重命名为\"人数\"。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据源是\"a_people_spread_day_building\"表，并为其分配别名\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：过滤条件，只选取在最近的5小时内更新的数据。\n\n4. `and 人数分布表.building_name='3号学生公寓'`：限制只选择\"building_name\"字段值为\"3号学生公寓\"的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：限制只选择\"region_name\"字段值为\"高新校区\"的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：限制只选择\"org_name\"字段值为\"中国科学技术大学\"的数据。\n\n7. `order by 人数分布表.stat_time desc`：按照\"stat_time\"字段的降序排序结果。\n\n8. `limit 1`：限制返回的结果集的大小，只返回一条记录。"
    },
    {
        "query": "信智楼有多少个房间安装了摄像头？",
        "script": "```sql\nselect count(distinct 房间表.id) as 安装了摄像头的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于计算“信智楼”中安装了摄像头的房间数量。以下是各部分解释：\n\n1. `select count(distinct 房间表.id) as 安装了摄像头的房间数量`: 选择并计算房间表的ID（房间号）的唯一值总数，即安装摄像头的房间数量。\n\n2. `from s_camera as 摄像头表`: 定义摄像头表，来源于s_camera表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和房间表，连接条件是摄像头表中的pid（设备ID）等于房间表中的id（房间号）。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表和楼栋表，连接条件是房间表中的pid（楼栋ID）等于楼栋表中的id（楼栋号）。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表和区域表，连接条件是楼栋表中的pid（所属区域ID）等于区域表中的id（区域号）。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表和单位表，连接条件是区域表中的pid（所属单位ID）等于单位表中的id（单位名称）。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 过滤条件，要求区域表中的区域名称为“高新校区”，单位表中的单位名称是“中国科学技术大学”，并且楼栋表中的楼栋名称为“信智楼”。\n\n综上所述，这个查询将返回“信智楼”中安装了摄像头的房间数量。"
    },
    {
        "query": "5号学生公寓的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='5号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中获取特定时间范围内\"5号学生公寓\"的人数信息。以下是关于该SQL语句的各个部分解释：\n\n1. select 人数分布表.num as 人数: 从表格“人数分布表”中选择名为“人数”的列。\n2. from a_people_spread_day_building as 人数分布表: 从名为a_people_spread_day_building的数据表开始执行选择操作。\n3. WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5: 根据当前时间和统计时间计算时间差小于5小时的条件。\n4. and 人数分布表.building_name='5号学生公寓': 限制在\"5号学生公寓\"内进行数据选择。\n5. and 人数分布表.region_name='高新校区': 限制在\"高新校区\"内进行数据选择。\n6. and 人数分布表.org_name='中国科学技术大学': 限制在\"中国科学技术大学\"内进行数据选择。\n7. order by 人数分布表.stat_time desc : 对数据进行排序，按照\"统计时间\"降序排列。\n8. limit 1: 限制返回的结果集数量为1条记录。\n\n这个语句的目的是查询最近5小时内\"5号学生公寓\"的人数信息。"
    },
    {
        "query": "找出信智楼一个月内，每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于查找\"信智楼\"在一个月内每天的平均人数。以下是各部分解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 这行代码选取了日期（以时间形式存储）的最小值作为“统计时间”列。这是因为我们要计算一个月内的数据，所以选择最早的一天开始进行计算。\n\n2. `round(avg(人数分布表.num)) as 平均人数`: 这行代码计算了\"信智楼\"内人数的平均值，并对其进行四舍五入处理。\n\n3. `from a_people_spread_day_building as 人数分布表`: 指定数据来源，即\"a_people_spread_day_building\"这张表格，并将它重命名为\"人数分布表\"以便于后续操作。\n\n4. `WHERE 人数分布表.building_name='信智楼'`: 这行代码筛选出\"信智楼\"的数据。\n\n5. `AND DATEDIFF(now(), 人数分布表.stat_time) < 30`: 这行代码确保我们只考虑过去30天内的数据。其中 \"DATEDIFF(now(), 人数分布表.stat_time)\" 是计算当前时间与统计数据时间之间的差值。\n\n6. `AND 人数分布表.region_name='高新校区'`: 这行代码筛选出\"高新校区\"的数据。\n\n7. `AND 人数分布表.org_name='中国科学技术大学'`: 这行代码筛选出属于\"中国科学技术大学\"的数据。\n\n8. `group by 人数分布表.stat_day`: 对每一天的人数进行求平均值的操作。\n\n9. `order by min(人数分布表.stat_time) asc;`: 这行代码将结果按照最早的日期升序排列。"
    },
    {
        "query": "信智楼的监控安装情况",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于查询\"信智楼\"的监控设备安装情况和相关信息。这个语句涉及到5个表格（s_camera、s_room、s_building、s_region、s_organization），通过多表连接（JOIN）和筛选条件（WHERE）来获取所需数据。以下是各部分的解释：\n\n1. SELECT子句：选择要查询的列，包括摄像头编号(id)、IP地址(ip)、安装位置(room_name)。其中，摄像头编号和IP地址来自摄像头表(s_camera)，安装位置来自房间表(s_room)。\n\n2. FROM子句：指定数据来源，包括摄像头表(s_camera)、房间表(s_room)。\n\n3. JOIN子句：将多个表根据共享的列（在这里是pid）进行连接，以便在同一个查询结果中展示相关数据。具体的连接关系如下：\n   - 摄像头表(s_camera)与房间表(s_room)通过pid字段进行连接。\n   - 房间表(s_room)与楼栋表(s_building)通过pid字段进行连接。\n   - 楼栋表(s_building)与区域表(s_region)通过pid字段进行连接。\n   - 区域表(s_region)与单位表(s_organization)通过pid字段进行连接。\n\n4. WHERE子句：设置筛选条件，只返回满足条件的数据。具体筛选条件为：\n   - \"楼栋表.building_name = '信智楼'\"，即只返回位于“信智楼”的监控设备信息。\n   - \"区域表.region_name = '高新校区'\"，即只返回位于“高新校区”的监控设备信息。\n   - \"单位表.org_name = '中国科学技术大学'\"，即只返回属于“中国科学技术大学”的监控设备信息。\n\n5. ORDER BY子句：对查询结果按照摄像头编号(id)进行升序排列（ASC）。\n\n6. LIMIT子句：限制查询结果的数量，这里限定返回前1000条数据。"
    },
    {
        "query": "师生活动中心现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='师生活动中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取师生活动中心当前的人数。以下是各部分的解释：\n\n1. `select 人数分布表.num as 人数`：选择名为\"num\"的列（表示人数）并将其重命名为\"人数\"。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定要查询的数据表名称为`a_people_spread_day_building`，并为其分配一个别名，即\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置筛选条件，即统计时间与当前时间的小时差小于5小时。\n\n4. `and 人数分布表.building_name='师生活动中心'`：进一步过滤数据，确保仅选择建筑物名称等于“师生活动中心”的记录。\n\n5. `and 人数分布表.region_name='高新校区'`：继续过滤数据，确保仅选择地区名称等于“高新校区”的记录。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：再过滤数据，确保仅选择组织名称等于“中国科学技术大学”的记录。\n\n7. `order by 人数分布表.stat_time desc`：按照统计数据的时间降序排列结果集，最新的记录会排在最前面。\n\n8. `limit 1`：限制返回的结果集数量为1条，也就是只返回最近的一条人数记录。"
    },
    {
        "query": "信智楼有多少行人不戴眼镜？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='未戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这个SQL查询语句的目的是计算信智楼内有多少人没有戴眼镜。它通过多个表格的连接和筛选条件来实现这一目标。以下是对各部分解释：\n\n1. `d_people`（人员表）：存储人员信息的表，包含人员编号、姓名、摄像头像素等信息。\n2. `s_camera`（摄像头表）：存储摄像头信息的表，包含摄像头ID、位置、状态等信息。\n3. `s_room`（房间表）：存储房间信息的表，包含房间ID、名称、所属楼栋等信息。\n4. `s_building`（楼栋表）：存储楼栋信息的表，包含楼栋ID、名称、所属区域等信息。\n5. `s_region`（区域表）：存储区域信息的表，包含区域ID、名称、所属单位等信息。\n6. `s_organization`（单位表）：存储单位信息的表，包含单位ID、名称、所属地区等信息。\n7. `t_glasses`（眼镜维表）：存储眼镜信息的表，包含眼镜ID、名称（如“未戴眼镜”）等。\n\n查询语句的主要逻辑如下：\n\n- 首先，通过JOIN子句将人员表与其他表关联起来，找到每个人员在信智楼的摄像头下的记录。\n- 然后，通过WHERE子句设置筛选条件：\n  - 限制时间差在当前5分钟以内，确保抓拍到的照片是最新的。\n  - 筛选出“未戴眼镜”的人员，即人员表中记录的glasses字段与眼镜维表中的未戴眼镜对应。\n  - 限制区域为高新校区，单位为中国科学技术大学，楼栋为信智楼。\n- 最后，使用COUNT函数计算满足上述条件的总人数，并将结果命名为“戴眼镜人数”。"
    },
    {
        "query": "信智楼有多少行人？",
        "script": "```sql\nselect count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5     and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于计算“信智楼”的当前人流量。下面是对该SQL语句的解释：\n\n1. `select count(*) as 人数`：选择计数(*)作为结果，并命名为“人数”。这将返回满足条件的行人总数。\n\n2. `from d_people as 人员表`：指定数据来源为“d_people”表（可能表示“行人数据”），并将其简写为“人员表”。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：联接“s_camera”表（可能表示“摄像头数据”），联接条件是“人员表”的`camera_id`等于“摄像头表”的`id`。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：联接“s_room”表（可能表示“房间数据”），联接条件是“摄像头表”的`pid`等于“房间表”的`id`。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：联接“s_building”表（可能表示“楼栋数据”），联接条件是“房间表”的`pid`等于“楼栋表”的`id`。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：联接“s_region”表（可能表示“区域数据”），联接条件是“楼栋表”的`pid`等于“区域表”的`id`。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：联接“s_organization”表（可能表示“单位/组织数据”），联接条件是“区域表”的`pid`等于“单位表”的`id`。\n\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：筛选条件是`人员表.moment`（可能是行人的抓拍时间）与当前时间的差值小于5分钟。\n\n9. `and 区域表.region_name='高新校区'`：筛选条件是“区域表”的`region_name`等于“高新校区”。\n\n10. `and 单位表.org_name='中国科学技术大学'`：筛选条件是“单位表”的`org_name`等于“中国科学技术大学”。\n\n11. `and 楼栋表.building_name='信智楼'`：筛选条件是“楼栋表”的`building_name`等于“信智楼”。\n\n综上，这个查询语句会计算“信智楼”中抓拍时间与当前时间差值小于5分钟的行人数量。"
    },
    {
        "query": "信智楼有多少行人挎单肩包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个复杂的SQL查询语句，用于从多个关联表中统计信智楼（假设是某个地点的标识）的单肩包行人数量。具体解释如下：\n\n1. `SELECT COUNT(*) AS 背双肩包的人数`: 选择计数函数COUNT(*)，并为其定义一个别名“背双肩包的人数”，以便在结果集中显示该列名。\n\n2. `FROM d_people AS 人员表`: 从人员表（d_people）开始查询。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`: 通过摄像头的ID（摄像头表的主键）与人员表的camera_id字段建立关联，获取每个人员的摄像头信息。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 通过房间ID（房间表的主键）与摄像头表的pid字段建立关联，获取每个人员的房间信息。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 通过楼栋ID（楼栋表的主键）与房间表的pid字段建立关联，获取每个人员的楼栋信息。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 通过区域ID（区域表的主键）与楼栋表的pid字段建立关联，获取每个人员的区域信息。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 通过单位名称（单位表的主键）与区域表的pid字段建立关联，获取每个人员的单位信息。\n\n8. `JOIN t_bag AS 背包维表 ON 人员表.bag = 背包维表.id`: 通过人员与背包的关系（人员表中的bag字段与背包维表的id字段关联），获取每个人员的背包信息。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 AND 背包维表.name = '单肩包' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学' AND 楼栋表.building_name = '信智楼'`: 这是查询条件，表示仅返回满足以下条件的记录：距离现在的时间（以分钟为单位计算）小于5分钟的、背包类型为单肩包、所在区域为高新校区、所在单位为中国科学技术大学、所在楼栋为信智楼的行人数量。\n\n综上，这个SQL语句的目的是计算信智楼（假设是某个地点的标识）的当前时刻携带单肩包的人数。"
    },
    {
        "query": "信智楼不同下衣风格分别有多少人？",
        "script": "```sql\nselect substring(人员表.lower,6) as 下衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.lower  order by 人员表.lower asc;\n```\n这是一个SQL查询语句，用于查询位于“信智楼”的中国科学技术大学高新校区的下衣风格及其对应的人数。以下是各部分的功能和解释：\n\n1. `select substring(人员表.lower,6) as 下衣风格, count(*) as 人数`: 这部分是查询的结果，其中`substring(人员表.lower,6)`用于提取下衣风格的字符串，然后计算每种下衣风格的人数。\n\n2. `from d_people as 人员表`: 这是数据来源，表示从人员表中获取数据。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 这部分是将摄像头表与人员表进行连接，通过摄像头ID匹配，以便确定每个人员在哪台摄像头下的行为。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这部分将房间表与摄像头表进行连接，通过摄像头所在的房间ID匹配，以便确定每个人员在哪个房间内。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这部分将楼栋表与房间表进行连接，通过房间所在的楼栋ID匹配，以便确定每个人员在哪个楼栋内。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这部分将区域表与楼栋表进行连接，通过楼栋所在的区域ID匹配，以便确定每个人员在哪个区域内。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分将单位表与区域表进行连接，通过区域所属的单位ID匹配，以便确定每个人员在哪个单位内。\n\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 这部分是查询的筛选条件，包括时间范围（最近5分钟内的数据）、地点范围（中国科学技术大学高新校区的信智楼内）。\n\n9. `group by 人员表.lower  order by 人员表.lower asc;`: 这部分是数据分组和排序规则，按人员的下衣风格进行分组，并使用升序排列。"
    },
    {
        "query": "6号学生公寓安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算\"6号学生公寓\"安装了多少个监控（摄像头）。下面是对这个查询语句的详细解析：\n\n1. `select count(*) as 摄像头数量`：选择计数函数`count(*)`作为结果，并将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：从名为\"s_camera\"的表开始查询，将这个表简称为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接\"s_room\"表（简称\"房间表\"），连接条件是\"摄像头表\"中的`pid`字段等于\"房间表\"中的`id`字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接\"s_building\"表（简称\"楼栋表\"），连接条件是\"房间表\"中的`pid`字段等于\"楼栋表\"中的`id`字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接\"s_region\"表（简称\"区域表\"），连接条件是\"楼栋表\"中的`pid`字段等于\"区域表\"中的`id`字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接\"s_organization\"表（简称\"单位表\"），连接条件是\"区域表\"中的`pid`字段等于\"单位表\"中的`id`字段。\n\n7. `where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即\"楼栋表\"中的`building_name`字段值为\"6号学生公寓\"，\"区域表\"中的`region_name`字段值为\"高新校区\"，\"单位表\"中的`org_name`字段值为\"中国科学技术大学\"。\n\n综上所述，这个SQL查询语句的目的是统计\"6号学生公寓\"安装的监控摄像头数量。"
    },
    {
        "query": "体育馆安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算“体育馆”（位于高新校区的中国科学技术大学）内安装的监控摄像头的数量。下面是各部分详细解释：\n\n1. select count(*) as 摄像头数量: 选择计数函数`count(*)`，将结果命名为“摄像头数量”。\n2. from s_camera as 摄像头表: 从名为s_camera的数据表中获取数据，这里将其简称为“摄像头表”。\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接摄像头表和房间表，连接条件是摄像头表的pid字段等于房间表的id字段。\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接房间表和楼栋表，连接条件是房间表的pid字段等于楼栋表的id字段。\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接楼栋表和区域表，连接条件是楼栋表的pid字段等于区域表的id字段。\n6. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接区域表和单位表，连接条件是区域表的pid字段等于单位表的id字段。\n7. where 楼栋表.building_name='体育馆': 设置查询条件，即楼栋表的building_name字段等于'体育馆'。\n8. and 区域表.region_name='高新校区': 继续设置查询条件，即区域表的region_name字段等于'高新校区'。\n9. and 单位表.org_name='中国科学技术大学': 最后一个查询条件，即单位表的org_name字段等于'中国科学技术大学'。\n\n通过这个查询，可以得出体育馆中安装的监控摄像头数量。"
    },
    {
        "query": "当前没拍到人的室外摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中获取满足特定条件的数据。以下是各部分解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`：选择需要查询的列，包括摄像头的ID（摄像头编号）、安装的房间名称和所属大楼名称。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id`：指定查询的起始表（s_camera），并使用JOIN将其与房间表（s_room）连接起来，连接条件是摄像头表的pid等于房间表的id。\n\n3. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将楼栋表（s_building）与前面两个表进行连接，连接条件是房间表的pid等于楼栋表的id。\n\n4. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将区域表（s_region）与前面三个表进行连接，连接条件是楼栋表的pid等于区域表的id。\n\n5. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将单位表（s_organization）与前面四个表进行连接，连接条件是区域表的pid等于单位表的id。\n\n6. `where 摄像头表.inhouse = 0 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：过滤条件，筛选出室内摄像头（inhouse字段为0）并且不在最近10分钟内有人经过的摄像头（通过子查询排除）。\n\n7. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：进一步筛选，只选择位于“高新校区”且属于“中国科学技术大学”的摄像头数据。\n\n8. `order by 摄像头表.id asc limit 1000;`：按照摄像头ID从小到大排序，并限制返回的结果数量为1000条。"
    },
    {
        "query": "行政与师生服务中心安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算位于“行政与师生服务中心”（假设这是某个建筑物名称）、属于“高新校区”（假设这是某个地理位置名称）并且隶属于“中国科学技术大学”（假设这是某个单位的名称）的摄像头的数量。\n\n具体解释如下：\n\n1. `select count(*) as 摄像头数量`：选择计数函数COUNT()来计算满足条件的摄像头的数量，并将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：指定查询的主表是s_camera表，也就是存储摄像头信息的表。这里将s_camera表简称为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：联接s_room表（存储房间信息的表，这里将其简称为“房间表”），连接条件是摄像头表的pid字段等于房间表的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：联接s_building表（存储楼栋信息的表，这里将其简称为“楼栋表”），连接条件是房间表的pid字段等于楼栋表的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：联接s_region表（存储区域信息的表，这里将其简称为“区域表”），连接条件是楼栋表的pid字段等于区域表的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：联接s_organization表（存储单位信息的表，这里将其简称为“单位表”），连接条件是区域表的pid字段等于单位表的id字段。\n\n7. `where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询的条件，要求楼栋表的building_name字段等于“行政与师生服务中心”，区域表的区域名region_name字段等于“高新校区”，以及单位表的org_name字段等于“中国科学技术大学”。\n\n通过这个查询语句，可以获取到满足这些条件的摄像头的数量。"
    },
    {
        "query": "近期异常行为",
        "script": "```sql\nselect 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) <1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 异常行为表.moment desc limit 10;\n```\n这是一个SQL查询语句，用于从多个表（d_abnormal_behavior，s_camera，s_room，s_building，s_region，s_organization，t_abnormal_type）中获取特定条件下的数据。下面是对这个查询语句的详细解释：\n\n1. select 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型: 从这些表中选择了四个字段，分别是摄像头编号、异常发生地点、异常发生时刻和异常类型。\n\n2. from d_abnormal_behavior as 异常行为表: 从d_abnormal_behavior表中开始查询，将其简称为“异常行为表”。\n\n3.  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id: 将s_camera表与异常行为表通过camera_id字段连接起来。\n\n4.  join s_room as 房间表 on 摄像头表.pid=房间表.id: 将s_room表与摄像头表通过pid字段连接起来。\n\n5.  join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 将s_building表与房间表通过pid字段连接起来。\n\n6.  join s_region as 区域表 on 楼栋表.pid=区域表.id: 将s_region表与楼栋表通过pid字段连接起来。\n\n7.  join s_organization as 单位表 on 区域表.pid=单位表.id: 将s_organization表与区域表通过pid字段连接起来。\n\n8.  join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id: 将t_abnormal_type表与异常行为表通过abnormal_type字段连接起来。\n\n9.  where DATEDIFF(now(), 异常行为表.moment) <1: 设置一个条件，即异常行为表中的moment字段与当前时间的差值小于1天（24小时）。\n\n10. and 区域表.region_name='高新校区': 设置另一个条件，即区域表中的region_name字段等于“高新校区”。\n\n11. and 单位表.org_name='中国科学技术大学': 设置另一个条件，即单位表中的org_name字段等于“中国科学技术大学”。\n\n12. order by 异常行为表.moment desc: 对查询结果按照异常发生时刻进行降序排列，即先列出最近发生的异常行为。\n\n13. limit 10: 最后限制查询结果为前10条记录。"
    },
    {
        "query": "师生活动中心的摄像头安装情况",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从数据库中获取与\"师生活动中心\"相关的摄像头的详细信息。下面是对这个SQL语句的逐行解释：\n\n1. select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置: 从摄像头表中选择摄像头编号、IP地址和安装位置的列。\n2. from s_camera as 摄像头表: 指定摄像头表作为数据来源。\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接摄像头表和房间表，基于摄像头表中的pid（父ID）等于房间表中的id。\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接房间表和楼栋表，基于房间表中的pid等于楼栋表中的id。\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接楼栋表和区域表，基于楼栋表中的pid等于区域表中的id。\n6. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接区域表和单位表，基于区域表中的pid等于单位表中的id。\n7. where 楼栋表.building_name='师生活动中心': 设置查询条件，即楼栋表的名称必须等于“师生活动中心”。\n8. and 区域表.region_name='高新校区': 继续添加查询条件，即区域表的名称必须等于“高新校区”。\n9. and 单位表.org_name='中国科学技术大学': 继续添加查询条件，即单位表的名称必须等于“中国科学技术大学”。\n10. order by 摄像头表.id asc: 对查询结果按照摄像头编号进行升序排列。\n11. limit 1000: 限制查询结果的数量为1000条。"
    },
    {
        "query": "当前拍到人的室外摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，主要用于查询满足特定条件的摄像头的详细信息。下面是对这个SQL语句的逐条解读：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`: 这句是选择需要查询的列，包括摄像头的ID（用于标识摄像头）、安装位置的名称（表示摄像头所在的房间）和所属大楼的名称。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分是定义了各个表的连接方式。通过摄像头表与房间表、楼栋表、区域表和单位表之间的外键关系建立连接。\n\n3. `where 摄像头表.inhouse = 0 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10) and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是设定查询条件。其中，`摄像头表.inhouse = 0`表示要查询的是室外摄像头；`摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`表示只查询过去10分钟内有检测到人的摄像头；`区域表.region_name='高新校区'`和`单位表.org_name='中国科学技术大学'`则表示只查询位于“高新校区”且归属于“中国科学技术大学”的摄像头。\n\n4. `order by 摄像头表.id asc limit 1000;`: 这部分是设定查询结果的排序方式和返回数量。按照摄像头的ID从小到大排序，并限制返回的数量最多为1000条。"
    },
    {
        "query": "1号学生公寓摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算\"1号学生公寓\"的摄像头数量。该查询通过联接多个表格（s_camera, s_room, s_building, s_region和s_organization）来获取摄像头信息。以下是各表格及其字段的简要说明：\n\n1. `s_camera`（摄像头表）: 存储摄像头的详细信息；字段包括`id`等。\n2. `s_room`（房间表）: 存储房间的信息；字段包括`id`, `pid`等。\n3. `s_building`（楼栋表）: 存储楼栋的信息；字段包括`id`, `pid`, `building_name`等。\n4. `s_region`（区域表）: 存储校区、学院等信息；字段包括`id`, `pid`, `region_name`等。\n5. `s_organization`（单位表）: 存储学校、公司等单位的信息；字段包括`id`, `pid`, `org_name`等。\n\n这个查询的目的是找出\"1号学生公寓\"的摄像头数量，所以它联接了这些表并根据条件筛选出满足条件的数据。具体来说，它将`s_camera`（摄像头表）、`s_room`（房间表）、`s_building`（楼栋表）、`s_region`（区域表）和`s_organization`（单位表）进行联接。联接依据是`s_camera.pid=s_room.id`、`s_room.pid=s_building.id`、`s_building.pid=s_region.id`以及`s_region.pid=s_organization.id`。\n\n然后，查询根据以下条件筛选数据：`楼栋表.building_name='1号学生公寓'`，`区域表.region_name='高新校区'`以及`单位表.org_name='中国科学技术大学'`。最后，查询使用`count(*) as 摄像头数量`来计算符合条件的摄像头数量，并将结果命名为“摄像头数量”。"
    },
    {
        "query": "统计食堂每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于统计食堂每天的平均人数。下面是各部分的解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 这部分选择了人数分布表中的最小日期作为“统计时间”列。\n\n2. `round(avg(人数分布表.num)) as 平均人数`: 这部分计算了人数分布表中人数的平均值，并四舍五入保留小数点后的位数，结果放在“平均人数”列。\n\n3. `from a_people_spread_day_building as 人数分布表`: 这部分指定了查询的表名，即“a_people_spread_day_building”，并将此表简称为“人数分布表”。\n\n4. `WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 这部分是查询条件，要求食堂名称等于“学生食堂”，且统计时间与当前时间的差值小于30天，地区为“高新校区”，组织名为“中国科学技术大学”。\n\n5. `group by 人数分布表.stat_day`: 这部分将结果按照“统计日”进行分组。\n\n6. `order by min(人数分布表.stat_time) asc`: 这部分按“统计时间”升序排列查询结果。"
    },
    {
        "query": "找出近期标记的行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从多个表中联合查询并获取满足条件的行人轨迹数据。下面是对这个查询语句的详细解析：\n\n1. `a_people_trail`: 行人轨迹表，存储了行人的轨迹信息，包括开始和结束的时间、虚拟人名和经过的摄像头ID列表。\n2. `s_camera`: 摄像头表，存储了摄像头的ID和其所在的房间、楼栋、区域的详细信息。\n3. `s_room`: 房间表，存储了每个房间的详细信息，包括其所在的楼栋和区域。\n4. `s_building`: 楼栋表，存储了每个楼栋的详细信息，包括其所在的区域。\n5. `s_region`: 区域表，存储了每个区域的详细信息，包括其所在的单位。\n6. `s_organization`: 单位表，存储了每个单位的详细信息。\n\n查询条件：\n- `区域表.region_name='高新校区'`: 限制查询的区域为“高新校区”。\n- `单位表.org_name='中国科学技术大学'`: 限制查询的单位为“中国科学技术大学”。\n\n排序方式：按轨迹的开始时间降序排列（最近的轨迹在最前面）。\n\n返回结果：返回满足条件的最近10条行人轨迹数据。"
    },
    {
        "query": "体育馆安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于统计体育馆内安装的监控设备（摄像头）的数量。以下是各个子句的说明：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数`count(*)`作为结果集，并将返回的值命名为`摄像头数量`。\n\n2. `from s_camera as 摄像头表`: 定义数据源，即从`s_camera`表（摄像头表）中获取数据。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接`s_room`表（房间表）与`s_camera`表（摄像头表），连接条件是`摄像头表.pid`等于`房间表.id`。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接`s_building`表（楼栋表）与`s_room`表（房间表），连接条件是`房间表.pid`等于`楼栋表.id`。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接`s_region`表（区域表）与`s_building`表（楼栋表），连接条件是`楼栋表.pid`等于`区域表.id`。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接`s_organization`表（单位表）与`s_region`表（区域表），连接条件是`区域表.pid`等于`单位表.id`。\n\n7. `where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只返回满足以下条件的记录：楼栋名称为“体育馆”，区域名称为“高新校区”，单位名称（组织机构名称）为“中国科学技术大学”。\n\n通过这个查询，可以得到满足这些条件的体育馆内的摄像头数量。"
    },
    {
        "query": "安装了监控的房间有多少个？",
        "script": "```sql\nselect count(distinct 房间表.id) as 安装了摄像头的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是计算某个特定区域的某个单位的房间里安装了监控摄像头的数量。以下是各子句的详细解释：\n\n1. `SELECT`: 选择特定的数据列和聚合函数。这里选择了`count()`函数和`distinct`关键字，用于计算并去除重复的`id`值。\n\n2. `COUNT(DISTINCT room_table.id) AS installed_cameras_rooms_count`: 计算安装了摄像头的房间数量。使用`DISTINCT`关键字确保只计算每个不同房间的数量一次。\n\n3. `FROM s_camera AS camera_table`: 指定数据来源表，这里是监控摄像头（s_camera）表，简写为`camera_table`。\n\n4. `JOIN s_room AS room_table ON camera_table.pid = room_table.id`: 连接摄像头表（s_camera）和房间表（s_room），其中摄像头表的`pid`字段与房间表的`id`字段相等。\n\n5. `JOIN s_building AS building_table ON room_table.pid = building_table.id`: 连接房间表（s_room）和楼栋表（s_building），其中房间表的`pid`字段与楼栋表的`id`字段相等。\n\n6. `JOIN s_region AS region_table ON building_table.pid = region_table.id`: 连接楼栋表（s_building）和区域表（s_region），其中楼栋表的`pid`字段与区域表的`id`字段相等。\n\n7. `JOIN s_organization AS org_table ON region_table.pid = org_table.id`: 连接区域表（s_region）和单位表（s_organization），其中区域表的`pid`字段与单位表的`id`字段相等。\n\n8. `WHERE region_table.region_name = '高新校区' AND org_table.org_name = '中国科学技术大学'`: 设置查询条件，即仅返回满足特定区域和单位名称的数据。\n\n总结：这个SQL查询语句将摄像头表（s_camera）、房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）连接在一起，以计算特定区域（高新校区）和单位（中国科学技术大学）内安装了监控摄像头的房间数量。"
    },
    {
        "query": "建筑列表",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称 from s_building as 楼栋表  join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid = 单位表.id where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'  order by 楼栋表.building_name asc;\n```\n这是一个SQL查询语句，用于从数据库中获取满足特定条件的建筑物信息。以下是各部分解释：\n\n1. `select`: 选择要返回的列。这里选择了`building_name`列，并为其指定了一个别名`楼宇名称`，以便在结果集中更容易识别。\n\n2. `from`: 指定查询的表。这里使用了两个关联表`s_building`（楼栋表）和`s_region`（区域表）。\n\n3. `join`: 连接多个表。这里使用`join`子句将`s_building`和`s_region`表连接在一起，通过`pid`字段进行连接。\n\n4. `on`: 定义连接条件。这里指定了`楼栋表.pid=区域表.id`的条件。\n\n5. `join`: 再次连接另一个表。这里将`s_organization`（单位表）也加入进来，同样通过`pid`字段进行连接，连接条件为`区域表.pid = 单位表.id`。\n\n6. `where`: 设定筛选条件。只有满足这些条件的记录才会出现在结果集中。这里设定了两个条件，即`单位表.org_name='中国科学技术大学'`和`区域表.region_name='高新校区'`。\n\n7. `order by`: 按照指定的列对结果集进行排序。这里按`楼栋表.building_name`升序排列，即从小到大排序。"
    },
    {
        "query": "安装了哪些摄像头",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) desc;\n```\n这是一条复杂的SQL查询语句，用于查询某个特定区域内的某个单位的摄像头安装情况。以下是各子句的详细解释：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量`: 选择楼宇名称（来自楼栋表）和摄像头数量作为查询结果中的字段。其中count(*)计算每个楼宇的摄像头数量。\n\n2. `from s_camera as 摄像头表`: 从s_camera表开始查询，这个表保存了摄像头的详细信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将s_room表（存储房间信息）与摄像头表进行连接，连接条件是摄像头表的pid等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将s_building表（存储楼栋信息）与房间表进行连接，连接条件是房间表的pid等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将s_region表（存储区域信息）与楼栋表进行连接，连接条件是楼栋表的pid等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将s_organization表（存储单位信息）与区域表进行连接，连接条件是区域表的pid等于单位表的id。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，限制只查询名为“高新校区”的区域和名为“中国科学技术大学”的单位的信息。\n\n8. `group by 楼栋表.building_name`: 对查询结果按照楼宇名称进行分组，以便统计每个楼宇的摄像头数量。\n\n9. `order by count(*) desc`: 对查询结果按照摄像头数量进行降序排列，即摄像头数量最多的楼宇排在最前面。"
    },
    {
        "query": "现在有多少人在图教中心？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前在“图书教育中心”（building_name字段值为\"图书教育中心\"）的中国科学技术大学高新校区（region_name字段值为\"高新校区\"）的人数信息。具体来说，这个查询会返回一个名为\"人数\"的列（来自于\"a_people_spread_day_building\"表格，别名设为\"人数分布表\"），其中\"人数\"是通过将\"人数分布表\"中的\"stat_time\"字段减去当前的系统时间（now()函数获取）再除以小时数（TIMESTAMPDIFF函数的第二个参数设置为5表示以小时为单位）计算得出的。然后根据这些条件进行筛选并排序，最终只返回满足条件的最新的一条记录。"
    },
    {
        "query": "给出图书教育中心安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个 SQL 查询语句，用于统计图书教育中心的摄像头数量。以下是各子句的解释：\n\n1. select count(*) as 摄像头数量: 选择函数 `count(*)` 的计算结果作为输出列，命名为 \"摄像头数量\"；\n2. from s_camera as 摄像头表: 从 `s_camera` 表（假设是摄像头信息表）开始查询；\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id: 将 `s_room` 表（假设是房间信息表）与 `s_camera` 表通过摄像头表中的 `pid` 字段和房间表的 `id` 字段进行内连接；\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 将 `s_building` 表（假设是楼栋信息表）与 `s_room` 表通过房间表中的 `pid` 字段和楼栋表的 `id` 字段进行内连接；\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id: 将 `s_region` 表（假设是区域信息表）与 `s_building` 表通过楼栋表中的 `pid` 字段和区域表的 `id` 字段进行内连接；\n6. join s_organization as 单位表 on 区域表.pid=单位表.id: 将 `s_organization` 表（假设是单位信息表）与 `s_region` 表通过区域表中的 `pid` 字段和单位表的 `id` 字段进行内连接；\n7. where 楼栋表.building_name='图书教育中心': 根据条件过滤出楼栋名称为 \"图书教育中心\" 的记录；\n8. and 区域表.region_name='高新校区': 加上条件过滤出区域名称为 \"高新校区\" 的记录；\n9. and 单位表.org_name='中国科学技术大学': 加上条件过滤出单位名称（机构名）为 \"中国科学技术大学\" 的记录。"
    },
    {
        "query": "告诉我现在图书教育中心有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取某个特定时间（比如现在的时间）在“图书教育中心”的“高新校区”的中国科学技术大学里的人数。以下是各部分的具体解释：\n\n1. `SELECT 人数分布表.num AS 人数`: 选择字段，这里选择了\"num\"字段并命名为\"人数\"；\n2. `FROM a_people_spread_day_building AS 人数分布表`: 指定数据表，这里是\"a_people_spread_day_building\"，并为其取名为\"人数分布表\"；\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 筛选条件，这个条件表示只选择在过去5小时内统计的数据；\n4. `AND 人数分布表.building_name = '图书教育中心'`: 筛选条件，只选择\"building_name\"字段值为\"图书教育中心\"的数据；\n5. `AND 人数分布表.region_name = '高新校区'`: 筛选条件，只选择\"region_name\"字段值为\"高新校区\"的数据；\n6. `AND 人数分布表.org_name = '中国科学技术大学'`: 筛选条件，只选择\"org_name\"字段值为\"中国科学技术大学\"的数据；\n7. `ORDER BY 人数分布表.stat_time DESC`: 对结果进行排序，按照\"stat_time\"字段降序排列；\n8. `LIMIT 1`: 限制返回的结果数量，只返回一条记录。"
    },
    {
        "query": "信智楼近期识别到多少背双肩包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段 SQL 查询语句，用于从数据库中获取信智楼附近在最近的五分钟里被检测到背着双肩包的行人数量。\n\n具体来说：\n\n1. `select count(*) as 背双肩包的人数`: 选择计数函数 `COUNT`，将查询结果表示为一个名为 \"背双肩包的人数\" 的字段；\n2. `from d_people as 人员表`: 定义数据表 `d_people` 为 \"人员表\"，其中存储着行人的信息；\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 联接 `摄像头表`（可能包含摄像头的参数和位置等信息），基于 `人员表.camera_id` 与 `摄像头表.id` 的相等关系进行联接；\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接 `房间表`（可能包含摄像头所在的房间信息），基于 `摄像头表.pid` 与 `房间表.id` 的相等关系进行联接；\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接 `楼栋表`（可能包含摄像头所在的楼层或楼栋信息），基于 `房间表.pid` 与 `楼栋表.id` 的相等关系进行联接；\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接 `区域表`（可能包含摄像头所在的区域信息），基于 `楼栋表.pid` 与 `区域表.id` 的相等关系进行联接；\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接 `单位表`（可能包含摄像头所在单位的组织结构信息），基于 `区域表.pid` 与 `单位表.id` 的相等关系进行联接；\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`: 联接 `背包维表`（可能包含行人的背包类型信息），基于 `人员表.bag` 与 `背包维表.id` 的相等关系进行联接；\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 设置查询条件，要求行人被检测到的时刻距离当前时刻不超过五分钟；\n10. `and 背包维表.name='背包'`: 设置查询条件，要求行人背着的是双肩包；\n11. `and 区域表.region_name='高新校区'`: 设置查询条件，要求摄像头所在的区域是高新校区；\n12. `and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求摄像头所在的单位是中国科学技术大学；\n13. `and 楼栋表.building_name='信智楼'`: 设置查询条件，要求摄像头所在的楼栋是信智楼。\n\n这段 SQL 语句的目的是查询并统计信智楼附近的背着双肩包的行人数量，并且限定在最近五分钟内。"
    },
    {
        "query": "图书馆摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算某个特定条件下的摄像头数量。以下是各子句的解读：\n\n1. `SELECT COUNT(*) AS 摄像头数量`：选择函数COUNT(*)作为结果集，其含义是统计满足后续WHERE子句中条件的数据行数。这里的AS关键字表示将这个计数命名为“摄像头数量”。\n\n2. `FROM s_camera AS 摄像头表`：指定查询的数据源为s_camera表，并为其赋予别名\"摄像头表\"，以便在后续JOIN和WHERE子句中方便引用。\n\n3. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`：将s_room表（房间表）与摄像头表通过ON子句中的条件进行连接，即摄像头的pid等于房间表的id时连接这两张表。\n\n4. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`：将s_building表（楼栋表）与房间表通过ON子句中的条件进行连接，即房间表的pid等于楼栋表的id时连接这两张表。\n\n5. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`：将s_region表（区域表）与楼栋表通过ON子句中的条件进行连接，即楼栋表的pid等于区域表的id时连接这两张表。\n\n6. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`：将s_organization表（单位表）与区域表通过ON子句中的条件进行连接，即区域表的pid等于单位表的id时连接这两张表。\n\n7. `WHERE 楼栋表.building_name = '图书教育中心' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`：设定查询的条件，即楼栋名称必须是\"图书教育中心\"、区域名称必须是\"高新校区\"且单位名称必须是\"中国科学技术大学\"，只有满足这些条件的摄像头才会被计入总数。"
    },
    {
        "query": "近期识别到的人员中，不戴帽子的有多少？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='未戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于从多个表中联合查询并统计不戴帽子的人员数量。下面是对该SQL的解释：\n\n1. `select count(*) as 戴帽子人数`: 选择计数（*）作为“戴帽子人数”，即统计不戴帽子的人数。\n2. `from d_people as 人员表`: 从\"d_people\"表（人员表）开始查询。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接\"s_camera\"表（摄像头表），依据条件是“人员表”的\"camera_id\"等于\"摄像头表\"的\"id\"。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接\"s_room\"表（房间表），依据条件是“摄像头表”的\"pid\"等于“房间表”的\"id\"。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接\"s_building\"表（楼栋表），依据条件是“房间表”的\"pid\"等于“楼栋表”的\"id\"。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接\"s_region\"表（区域表），依据条件是“楼栋表”的\"pid\"等于“区域表”的\"id\"。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接\"s_organization\"表（单位表），依据条件是“区域表”的\"pid\"等于“单位表”的\"id\"。\n8. `join t_hat as 帽子维表 on 人员表.hat=帽子维表.id`: 连接\"t_hat\"表（帽子维表），依据条件是“人员表”的\"hat\"等于“帽子维表”的\"id\"。\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='未戴帽子'`: 设定查询条件，要求时间差（人员表的时间记录与当前时间的分钟数差）小于5分钟，并且帽子维表的名称字段为“未戴帽子”。\n10. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 进一步限制查询范围，要求区域表的区域名称为“高新校区”，且单位表的单位名称为“中国科学技术大学”。"
    },
    {
        "query": "图书馆人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一段SQL查询语句，用于从数据库中获取某个特定条件下的信息。以下是这段SQL语句的各个部分及其作用：\n\n1. `select 人数分布表.num as 人数`：选择字段。这里选择了`num`字段并将其别名为`人数`，以便在结果集中显示。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定查询的表名。这里将表命名为`a_people_spread_day_building`并为其分配一个别名`人数分布表`，以便在查询中方便引用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置筛选条件。这里使用`TIMESTAMPDIFF`函数计算当前时间（通过`now()`函数获取）与`stat_time`字段之间的小时差，并设置该差值小于5小时的记录为有效。\n\n4. `and 人数分布表.building_name='图书教育中心'`：添加筛选条件。这里要求`building_name`字段的值为`'图书教育中心'`。\n\n5. `and 人数分布表.region_name='高新校区'`：添加筛选条件。这里要求`region_name`字段的值为`'高新校区'`。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：添加筛选条件。这里要求`org_name`字段的值为`'中国科学技术大学'`。\n\n7. `order by 人数分布表.stat_time desc`：设定排序规则。这里按照`stat_time`字段的降序排列结果集。\n\n8. `limit 1`：设定返回结果的数量。这里只返回一条结果。"
    },
    {
        "query": "办公楼安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段用于查询某办公楼监控摄像头数量的SQL语句。下面是各子句的含义：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数`count(*)`来计算摄像头的数量，并将结果命名为`摄像头数量`。\n\n2. `from s_camera as 摄像头表`: 从`s_camera`表（摄像头表）开始查询。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接`摄像头表`和`房间表`，连接条件是`摄像头表`的`pid`字段等于`房间表`的`id`字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接`房间表`和`楼栋表`，连接条件是`房间表`的`pid`字段等于`楼栋表`的`id`字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接`楼栋表`和`区域表`，连接条件是`楼栋表`的`pid`字段等于`区域表`的`id`字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接`区域表`和`单位表`，连接条件是`区域表`的`pid`字段等于`单位表`的`id`字段。\n\n7. `where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设定查询条件，要求`楼栋表`的`building_name`字段值为\"行政办公楼\"，`区域表`的`region_name`字段值为\"高新校区\"，`单位表`的`org_name`字段值为\"中国科学技术大学\"。"
    },
    {
        "query": "给出行政办公楼安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于查询满足特定条件的行政办公楼的摄像头数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数count()作为查询结果，并将返回的结果命名为\"摄像头数量\"。\n2. `from s_camera as 摄像头表`：指定数据源，即摄像头表，别名设为“摄像头表”。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，依据条件是摄像头表的pid等于房间表的id。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，依据条件是房间表的pid等于楼栋表的id。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，依据条件是楼栋表的pid等于区域表的id。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，依据条件是区域表的pid等于单位表的id。\n7. `where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，要求楼栋名称为“行政办公楼”、区域名称为“高新校区”并且单位名称为“中国科学技术大学”。\n\n这个查询语句的目的是计算在满足上述所有条件的行政办公楼内的摄像头数量。"
    },
    {
        "query": "办公楼人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政办公楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一段 SQL 语言查询代码，用于从数据库中查询某个时间范围内的办公楼人数信息。以下是各部分解释：\n\n1. `select 人数分布表.num as 人数`: 选择 num 列并将其重命名为 \"人数\"。\n2. `from a_people_spread_day_building as 人数分布表`: 从名为 \"a_people_spread_day_building\" 的表中读取数据，并为其分配一个别名 \"人数分布表\"，以便在后续的查询条件中使用。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 限制查询的数据范围，即只返回过去五个小时内（以当前时间为基准）的办公楼人数信息。\n4. `and 人数分布表.building_name='行政办公楼'`: 过滤出指定的办公楼名称，即仅返回\"行政办公楼\"的人数信息。\n5. `and 人数分布表.region_name='高新校区'`: 过滤出指定的地域名称，即仅返回\"高新校区\"的人数信息。\n6. `and 人数分布表.org_name='中国科学技术大学'`: 过滤出指定的学校名称，即仅返回\"中国科学技术大学\"的人数信息。\n7. `order by 人数分布表.stat_time desc`: 对查询结果按照统计时间的降序排序，即最新的时间信息排在最前面。\n8. `limit 1`: 限制查询结果的数量，即仅返回一条记录。"
    },
    {
        "query": "统计图书教育中心一个月内每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于统计一个月内每天图书教育中心的平均人数。以下是各部分解释：\n\n1. select min(人数分布表.stat_time) as 统计时间: 选取最小的时间（最近的一次记录）作为统计时间；\n2. round(avg(人数分布表.num)) as 平均人数: 计算平均人数并四舍五入保留小数点位数；\n3. from a_people_spread_day_building as 人数分布表: 数据来源于a_people_spread_day_building这张表，这里将其简称为“人数分布表”；\n4. WHERE 人数分布表.building_name='图书教育中心': 限定建筑名为“图书教育中心”的记录；\n5. AND DATEDIFF(now(), 人数分布表.stat_time) < 30: 限制记录的统计时间（即记录时间）与当前时间的差值小于30天；\n6. AND 人数分布表.region_name='高新校区': 限定地区名为“高新校区”的记录；\n7. AND 人数分布表.org_name='中国科学技术大学': 限定机构名为“中国科学技术大学”的记录；\n8. GROUP BY 人数分布表.stat_day: 根据统计数据日期（stat_day）进行分组；\n9. ORDER BY min(人数分布表.stat_time) ASC: 对每组按统计时间从小到大排序。"
    },
    {
        "query": "信智楼有多少行人未背包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询语句，用于计算在“信智楼”的高新校区的中国科学技术大学中，在过去五分钟里未背包的行人数量。具体解析如下：\n\n1. `select count(*) as 背双肩包的人数`: 这是查询的目标，即计算未背包的行人数量。\n\n2. `from d_people as 人员表`: 从d_people（人员表）中获取数据。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接s_camera（摄像头表），连接条件是人员表的camera_id等于摄像头表的id。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room（房间表），连接条件是摄像头表的pid等于房间表的id。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building（楼栋表），连接条件是房间表的pid等于楼栋表的id。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region（区域表），连接条件是楼栋表的pid等于区域表的id。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization（单位表），连接条件是区域表的pid等于单位表的id。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`: 连接t_bag（背包维表），连接条件是人员表的bag等于背包维表的id。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包'`: 设置查询条件，即在过去五分钟里且未背包的行人才符合条件。\n\n10. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 进一步限制查询范围，只统计在信智楼、高新校区的中国科学技术大学的行人数量。\n\n综上，这个查询语句的目的是计算过去五分钟内在信智楼、高新校区的中国科学技术大学中未背包的行人数量。"
    },
    {
        "query": "信智楼有多少个房间安装了摄像头？",
        "script": "```sql\nselect count(distinct 房间表.id) as 安装了摄像头的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询代码，用于计算信智楼（假设是一个建筑名称）安装摄像头的房间数量。以下是各个子句和表的解释：\n\n1. `select`: 从数据库中选取特定的数据字段。\n2. `count(distinct 房间表.id)`: 计算并返回具有唯一值的字段（即房间ID）的数量。这里使用`distinct`关键字去除重复的ID，以确保每个房间只计数一次。\n3. `as 安装了摄像头的房间数量`: 为结果设置一个别名，以便在查询结果中更清晰地识别这个数量。\n4. `from s_camera as 摄像头表`: 从名为\"s_camera\"的表中选取数据，将其简称为\"摄像头表\"。该表存储了摄像头的相关信息，例如房间ID（`pid`）等。\n5. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将\"s_room\"表（存储房间信息）与\"摄像头表\"进行连接。连接条件是摄像头表中的房间ID（`pid`）等于房间表的主键（假设为`id`）。\n6. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将\"s_building\"表（存储楼栋信息）与房间表进行连接。连接条件是房间表中的楼栋ID（假设为`pid`）等于楼栋表的主键（假设为`id`）。\n7. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将\"s_region\"表（存储区域信息）与楼栋表进行连接。连接条件是楼栋表中的区域ID（假设为`pid`）等于区域表的主键（假设为`id`）。\n8. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将\"s_organization\"表（存储单位名称信息）与区域表进行连接。连接条件是区域表中的单位ID（假设为`pid`）等于单位表的主键（假设为`id`）。\n9. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 筛选出满足特定条件的数据。在这个例子中，要求区域的名称是“高新校区”，单位的名称是“中国科学技术大学”，并且楼栋的名称是“信智楼”。这些条件确保了查询结果是针对特定建筑和单位的摄像头统计。"
    },
    {
        "query": "5号学生公寓安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='5号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于查询“5号学生公寓”安装了多少个监控（摄像头）。以下是各子句的详细解释：\n\n1. select count(*) as 摄像头数量：选择计数函数count(*)作为结果集，并为其赋予别名\"摄像头数量\"。\n\n2. from s_camera as 摄像头表：从s_camera表开始查询，并将其简写为\"摄像头表\"。\n\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id：连接s_room表（简写为\"房间表\"）与s_camera表，连接条件是摄像头表的pid等于房间表的id。\n\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：连接s_building表（简写为\"楼栋表\"）与房间表，连接条件是房间表的pid等于楼栋表的id。\n\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id：连接s_region表（简写为\"区域表\"）与楼栋表，连接条件是楼栋表的pid等于区域表的id。\n\n6. join s_organization as 单位表 on 区域表.pid=单位表.id：连接s_organization表（简写为\"单位表\"）与区域表，连接条件是区域表的pid等于单位表的id。\n\n7. where 楼栋表.building_name='5号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'：设置查询条件，即要求楼栋表的building_name为\"5号学生公寓\"、区域表的region_name为\"高新校区\"且单位表的org_name为\"中国科学技术大学\"。\n\n这个查询语句将返回满足这些条件的摄像头数量。"
    },
    {
        "query": "体育场现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中查询当前体育场的总人数。下面是各部分解释：\n\n1. select 人数分布表.num as 人数: 选择\"人数分布表\"中的\"num\"字段作为结果集中的\"人数\"字段。\n2. from a_people_spread_day_building as 人数分布表: 从名为\"a_people_spread_day_building\"的表中获取数据，并将此表称为\"人数分布表\"。\n3. WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5: 过滤条件，只返回在过去5小时内的数据。其中，TIMESTAMPDIFF()函数计算两个时间之间的差值，这里以小时为单位。\n4. and 人数分布表.building_name='体育场': 过滤条件，只返回建筑物名称为\"体育场\"的数据。\n5. and 人数分布表.region_name='高新校区': 过滤条件，只返回地区名称为\"高新校区\"的数据。\n6. and 人数分布表.org_name='中国科学技术大学': 过滤条件，只返回组织名称为\"中国科学技术大学\"的数据。\n7. order by 人数分布表.stat_time desc: 按照\"stat_time\"字段的降序排列结果集，即最近的记录将排在最前面。\n8. limit 1: 限制结果集只返回一条记录。"
    },
    {
        "query": "7号学生公寓现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='7号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取7号学生公寓当前的人数信息。以下是各个部分的解释：\n\n1. `SELECT 人数分布表.num AS 人数`: 从数据表中选择名为`num`的列，并将其重命名为`人数`。\n2. `FROM a_people_spread_day_building AS 人数分布表`: 从名为`a_people_spread_day_building`的数据表中选择数据，并将该表称为`人数分布表`。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 设置一个条件，即`stat_time`（记录时间）与当前时间（通过`now()`函数获取）的时间差小于5小时。这个条件确保了查询到的数据是最近的（在过去5小时内记录的）。\n4. `and 人数分布表.building_name='7号学生公寓'`: 设置另一个条件，即`building_name`（建筑名称）等于‘7号学生公寓’。\n5. `and 人数分布表.region_name='高新校区'`: 设置另一个条件，即`region_name`（区域名称）等于‘高新校区’。\n6. `and 人数分布表.org_name='中国科学技术大学'`: 设置另一个条件，即`org_name`（组织名称）等于‘中国科学技术大学’。\n7. `ORDER BY 人数分布表.stat_time DESC`: 对结果进行排序，按照`stat_time`（记录时间）降序排列。这意味着最新的记录将首先显示。\n8. `LIMIT 1`: 限制查询结果为一条记录。\n\n综合以上条件，这个SQL查询语句将从7号学生公寓（高新校区，中国科学技术大学）获取最近5小时内的最新人数信息。"
    },
    {
        "query": "找出师生活动中心一个月内，每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于查找师生活动中心一个月内每天的平均人数。以下是各部分的解释：\n\n1. `select`: 选择要返回的列。在这个例子中，选择了两个列：`统计时间`和`平均人数`。\n\n2. `min(人数分布表.stat_time) as 统计时间`: 获取每一天的最小统计时间作为该天的日期。`as 统计时间`是将这个字段重命名为“统计时间”。\n\n3. `round(avg(人数分布表.num)) as 平均人数`: 计算每一天的平均人数。`round()`函数用于四舍五入结果。`as 平均人数`是将这个字段重命名为“平均人数”。\n\n4. `from a_people_spread_day_building as 人数分布表`: 从名为`a_people_spread_day_building`的表中获取数据，并将此表简称为“人数分布表”。\n\n5. `WHERE`: 设置筛选条件。在这个例子中，筛选的条件是：建筑名称为“师生活动中心”，距离现在的时间小于30天（一个月），地区名称为“高新校区”，机构名称为“中国科学技术大学”。\n\n6. `group by`: 对结果进行分组，按照统计日期（`人数分布表.stat_day`）进行分组。\n\n7. `order by`: 对结果进行排序，按照统计时间从小到大排序（ASC表示升序）。\n\n综上所述，这个SQL查询将返回师生活动中心一个月内每天的平均人数，并按照统计时间从小到大排序。"
    },
    {
        "query": "近期识别到多少戴眼镜的行人？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段SQL查询语句，用于从多个关联表格中获取某个特定条件的数据。以下是各子句的解析：\n\n1. `select count(*) as 戴眼镜人数`: 选择计数函数（count）对满足条件的记录进行计数，并将结果命名为“戴眼镜人数”。\n\n2. `from d_people as 人员表`: 从d_people表开始查询，并为其指定一个别名“人员表”，便于后续引用。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接s_camera表，连接条件是人员表中的camera_id与摄像头表中的id相等。同时为s_camera表指定一个别名“摄像头表”。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表，连接条件是摄像头表中的pid与房间表中的id相等。同时为s_room表指定一个别名“房间表”。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表，连接条件是房间表中的pid与楼栋表中的id相等。同时为s_building表指定一个别名“楼栋表”。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表，连接条件是楼栋表中的pid与区域表中的id相等。同时为s_region表指定一个别名“区域表”。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表，连接条件是区域表中的pid与单位表中的id相等。同时为s_organization表指定一个别名“单位表”。\n\n8. `join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id`: 连接t_glasses表，连接条件是人员表中的glasses与眼镜维表中的id相等。同时为t_glasses表指定一个别名“眼镜维表”。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='戴眼镜' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设定查询条件，包括：当前时间距离人员表的moment字段的时间差小于5分钟；眼镜维表的name字段值为“戴眼镜”；区域表的区域名称为“高新校区”；单位表的单位名称为“中国科学技术大学”。\n\n整个SQL语句的意思是：从多个关联表格中查找在最近的5分钟时间内、位于“高新校区”且所在单位为“中国科学技术大学”的、佩戴了眼镜的人员数量。"
    },
    {
        "query": "近期识别到多少拿手提包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段SQL查询语句，用于计算在特定时间和地点范围内，携带手提包行人的数量。以下是各部分的具体解释：\n\n1. `select count(*) as 背双肩包的人数`：选择计数函数（count）对结果集进行计数，并将计数值命名为\"背双肩包的人数\"。\n\n2. `from d_people as 人员表`：定义源数据表为d_people，并为其分配一个别名\"人员表\"，以便后续在查询中使用。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：将s_camera表与人员表连接起来，连接条件是两者之间存在camera_id和id的对应关系。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将s_room表与摄像头表连接起来，连接条件是摄像头表的pid与房间表的id相对应。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将s_building表与房间表连接起来，连接条件是房间表的pid与楼栋表的id相对应。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将s_region表与楼栋表连接起来，连接条件是楼栋表的pid与区域表的id相对应。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将s_organization表与区域表连接起来，连接条件是区域表的pid与单位表的id相对应。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`：将t_bag表与人员表连接起来，连接条件是人员表的bag字段与背包维表的id字段相对应。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，限制查询结果中时间差（当前时间与人员表中的moment字段的时间差）小于5分钟，并且背包类型为\"手提包\"，同时要求区域名和所在单位名分别为\"高新校区\"和\"中国科学技术大学\"。"
    },
    {
        "query": "给出教工食堂的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询教工食堂的摄像头数量。下面是对这段 SQL 的解释：\n\n1. `SELECT COUNT(*) AS 摄像头数量`: 这行代码用于计算满足后续条件的摄像头的总数。\n\n2. `FROM s_camera AS 摄像头表`: 定义了数据查询的基础表，即摄像头信息存储的表格（s_camera），并为其取名为\"摄像头表\"，方便后续引用。\n\n3. `JOIN s_room AS 房间表 ON 摄像头表.pid=房间表.id`: 这行代码用于将摄像头表与房间表通过 pid 和 id 字段进行关联，得到每个摄像头对应的房间信息。\n\n4. `JOIN s_building AS 楼栋表 ON 房间表.pid=楼栋表.id`: 这行代码用于将房间表与楼栋表通过 pid 和 id 字段进行关联，得到每个摄像头对应的楼栋信息。\n\n5. `JOIN s_region AS 区域表 ON 楼栋表.pid=区域表.id`: 这行代码用于将楼栋表与区域表通过 pid 和 id 字段进行关联，得到每个摄像头对应的区域信息。\n\n6. `JOIN s_organization AS 单位表 ON 区域表.pid=单位表.id`: 这行代码用于将区域表与单位表通过 pid 和 id 字段进行关联，得到每个摄像头对应的单位名称。\n\n7. `WHERE 楼栋表.building_name='教工食堂' AND 区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学'`: 这行代码用于筛选出位于“教工食堂”、“高新校区”且属于“中国科学技术大学”的摄像头记录。\n\n综上，这段 SQL 语句的目的是找出位于特定校园区域的特定建筑物的摄像头数量。"
    },
    {
        "query": "8号学生公寓安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于查询8号学生公寓的监控摄像头数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择摄像头的数量作为结果集的一个字段，命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：指定摄像头表的名称（s_camera）。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表（s_room）和摄像头表（s_camera），基于摄像头表中的`pid`等于房间表中的`id`进行连接。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表（s_building）和房间表（s_room），基于房间表中的`pid`等于楼栋表中的`id`进行连接。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表（s_region）和楼栋表（s_building），基于楼栋表中的`pid`等于区域表中的`id`进行连接。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表（s_organization）和区域表（s_region），基于区域表中的`pid`等于单位表中的`id`进行连接。\n\n7. `where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，要求楼栋表中的`building_name`等于“8号学生公寓”，区域表中的`region_name`等于“高新校区”，单位表中的`org_name`等于“中国科学技术大学”。"
    },
    {
        "query": "5分钟内识别到多少不戴帽子的行人？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='未戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于在5分钟时间内识别到的不戴帽子的行人总数。以下是各个子句和表的解释：\n\n1. `select count(*) as 戴帽子人数`：选择行数（即计数）作为结果，并将其命名为“戴帽子人数”。\n2. `from d_people as 人员表`：从d_people表开始查询，这里将它重命名为“人员表”以便于理解。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：将s_camera表与d_people表通过相机ID进行连接。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将s_room表与s_camera表通过房间ID进行连接。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将s_building表与s_room表通过楼栋ID进行连接。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将s_region表与s_building表通过区域ID进行连接。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将s_organization表与s_region表通过单位ID进行连接。\n8. `join t_hat as 帽子维表 on 人员表.hat=帽子维表.id`：将t_hat表与d_people表通过帽子ID进行连接。\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：筛选出在5分钟时间范围内的数据。\n10. `and 帽子维表.name='未戴帽子'`：进一步筛选出未戴帽子的行。\n11. `and 区域表.region_name='高新校区'`：限制查询结果为高新校区的数据。\n12. `and 单位表.org_name='中国科学技术大学'`：限制查询结果为“中国科学技术大学”的数据。"
    },
    {
        "query": "当前信智楼有人的房间有多少？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'     and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一段SQL查询语句，用于计算\"信智楼\"（假设是某个建筑的名字）现在有人在的房间数量。以下是各部分解释：\n\n1. `select count(房间表.room_name)`：这是要查询的列，即通过计数每个房间的人数来得到总的房间数。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表`：这两张表用于关联摄像头的位置和房间的关系，以便知道哪些摄像头在哪个房间。\n\n3. `on 摄像头表.pid=房间表.id`：这个连接条件就是摄像头和房间之间的关联关系。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这张表用于将摄像头和房间进一步与具体的建筑关联起来。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这张表用于获取建筑的地理位置信息。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这张表用于获取建筑所属单位的名称信息。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`：这些条件用于筛选出位于\"高新校区\"的\"中国科学技术大学\"的\"信智楼\"的信息。\n\n8. `and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：这部分用于判断是否有人员在房间内。它先通过子查询找到最近10分钟内有活动的摄像头ID，然后在外层查询中筛选出这些摄像头对应的房间。\n\n9. `生成sql为...`：这段SQL语句最后会计算出\"信智楼\"内现在有人的房间数量。"
    },
    {
        "query": "告诉我现在体育场有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前在“体育场”的人数信息。以下是各个部分的解释：\n\n1. `select 人数分布表.num as 人数`: 选择名为`num`的列（表示人数）作为查询结果中的列名。\n\n2. `from a_people_spread_day_building as 人数分布表`: 从名为`a_people_spread_day_building`的表（可能是一个存储人员分布数据的表）中选择数据。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 过滤条件，只选择统计时间距离现在时间不到5小时的数据。\n\n4. `and 人数分布表.building_name='体育场'`: 过滤条件，只选择建筑名称为“体育场”的数据。\n\n5. `and 人数分布表.region_name='高新校区'`: 过滤条件，只选择地区名称为“高新校区”的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 过滤条件，只选择组织名称为“中国科学技术大学”的数据。\n\n7. `order by 人数分布表.stat_time desc limit 1`: 对筛选后的数据进行排序（按统计时间降序排列）并限制返回的结果数量为1条。"
    },
    {
        "query": "有多少人不戴眼镜？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='未戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于计算满足特定条件的“不戴眼镜”的人数。以下是各子句的解释：\n\n1. `select count(*) as 戴眼镜人数`: 选择计数函数COUNT()，并为其赋予别名“戴眼镜人数”，用于返回满足条件的记录数。\n2. `from d_people as 人员表`: 从人员表（可能是一个名为d_people的表格）开始查询。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接摄像头表，以获取每个人员的摄像头信息。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接房间表，以便了解每个摄像头的房间信息。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接楼栋表，以获取每个房间所在的楼栋信息。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接区域表，以便了解每个楼栋所在的区域信息。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接单位表，以获取每个区域的单位信息。\n8. `join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id`: 连接眼镜维表，以获取每个人员的眼镜信息。\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 限制条件，要求查询的时间范围在最近5分钟内。\n10. `and 眼镜维表.name='未戴眼镜'`: 限制条件，要求查询的人员是不戴眼镜的状态。\n11. `and 区域表.region_name='高新校区'`: 限制条件，要求查询的区域是“高新校区”。\n12. `and 单位表.org_name='中国科学技术大学'`: 限制条件，要求查询的单位是“中国科学技术大学”。"
    },
    {
        "query": "找出近期从食堂出发的一些行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于查找近期从食堂出发的一些行人的轨迹信息。以下是各个子句的详细解释：\n\n1. select：选择需要返回的数据字段。在这个查询中，选择了轨迹起始时间（start_time）、轨迹结束时间（end_time）、虚拟人名（name）和经过的摄像头ID列表（camera_id_list）。\n\n2. from：指定数据来源表。在这个查询中，使用了a_people_trail表（行人轨迹表）作为数据来源。\n\n3. join：用于将两个或多个表的行组合在一起。在这个查询中，使用了5个连接操作，分别是：\n\n- 与s_camera表（摄像头表）进行连接，连接条件是行人轨迹表的start_camera_id等于摄像头表的id；\n- 与s_room表（房间表）进行连接，连接条件是摄像头表的pid等于房间表的id；\n- 与s_building表（楼栋表）进行连接，连接条件是房间表的pid等于楼栋表的id；\n- 与s_region表（区域表）进行连接，连接条件是楼栋表的pid等于区域表的id；\n- 与s_organization表（单位表）进行连接，连接条件是区域表的pid等于单位表的id。\n\n4. where：设置筛选条件。在这个查询中，设置了以下筛选条件：\n\n- 区域表的region_name等于'高新校区'；\n- 单位表的org_name等于'中国科学技术大学'；\n- 楼栋表的building_name等于'学生食堂'。\n\n5. order by：按照某个字段对结果进行排序。在这个查询中，按照行人轨迹表的start_time字段降序排序。\n\n6. limit：限制返回的结果数量。在这个查询中，限制了返回的结果数量为10条。"
    },
    {
        "query": "找出近期发现的10条行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一段SQL查询语句，用于从数据库中检索最近发现的10条行人轨迹信息。以下是各部分的具体解释：\n\n1. `select 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id`：这部分是查询的字段列表，包括轨迹的开始和结束时间、虚拟人的名称以及经过的摄像头ID。\n\n2. `from a_people_trail as 行人轨迹表`：定义了查询的主表，即行人轨迹表。\n\n3. `join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id`：连接摄像头表，通过行人轨迹表的起始摄像头ID与摄像头表的ID进行关联。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表，通过摄像头表的父ID（即楼栋ID）与房间表的ID进行关联。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表，通过房间表的父ID（即区域ID）与楼栋表的ID进行关联。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表，通过楼栋表的父ID（即单位ID）与区域表的ID进行关联。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表，通过区域表的父ID（即单位ID）与单位表的ID进行关联。\n\n8. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，只返回属于“高新校区”且属于“中国科学技术大学”的行人轨迹信息。\n\n9. `order by 行人轨迹表.start_time desc`：按照轨迹开始时间的降序排列查询结果。\n\n10. `limit 10`：限制查询结果的数量，仅返回最近的10条行人轨迹信息。"
    },
    {
        "query": "高新校区室外现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='高新校区室外' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中查询当前（时间戳减去五个小时内）在高新校区室外的人数。具体来说：\n\n1. `SELECT 人数分布表.num AS 人数`: 从表格`a_people_spread_day_building`中选择列`num`作为查询结果中的字段`人数`。\n2. `FROM 人数分布表`: 指定数据来源的表格名称为`a_people_spread_day_building`。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 设置查询条件，即只选择过去五个小时内的数据。这个条件通过`TIMESTAMPDIFF`函数实现，计算统计时间（`stat_time`）与当前时间（`now()`）之间的小时差，并确保该值小于5。\n4. `and 人数分布表.building_name='高新校区室外' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 进一步限定查询范围，仅选择高新校区室外、高新校区和中国科学技术大学的统计数据。\n5. `order by 人数分布表.stat_time desc limit 1`: 对查询结果进行排序，按统计时间的降序排列（最近的统计信息优先），并限制返回的结果条数为1条。\n\n整个查询语句的目的是获取高新校区室外最近五个小时内的人数统计信息。"
    },
    {
        "query": "有多少人未持物？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于统计特定条件下（如“高新校区”的中国科学技术大学内）的未持物人数。以下是各子句的解释：\n\n1. `SELECT count(*) as 手里拿东西的人数`：选择计数函数count(*)，计算符合条件的人数的和，并将结果命名为\"手里拿东西的人数\"。\n\n2. `FROM d_people AS 人员表`：定义数据源是人员表（可能是一个记录人员信息的表格）。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`：将摄像头表（可能记录了每个摄像头的信息）与人员表连接起来，条件是人员表的camera_id（即该人员在哪个摄像头下的信息）等于摄像头表的id。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`：将房间表（可能记录了每个房间的信息）与摄像头表连接起来，条件是摄像头表的pid（即该摄像头的房间号）等于房间表的id。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`：将楼栋表（可能记录了每栋建筑的信息）与房间表连接起来，条件是房间表的pid（即该房间所属的楼栋号）等于楼栋表的id。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`：将区域表（可能记录了每个地区的信息）与楼栋表连接起来，条件是楼栋表的pid（即该楼栋所属的地区号）等于区域表的id。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`：将单位表（可能记录了每个组织的信息）与区域表连接起来，条件是区域表的pid（即该地区所属的组织号）等于单位表的id。\n\n8. `JOIN t_hold_object AS 持物维表 ON 人员表.hold_obj = 持物维表.id`：将持物维表（可能记录了每个人持有的物品的信息）与人员表连接起来，条件是人员表的hold_obj（即该人员当前是否持有物品的状态字段）等于持物维表的id。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 AND 持物维表.name = '未持物' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`：设置查询的条件，要求时间差（人员表中记录的抓拍时刻到当前时间的分钟数）小于5分钟（可能是判断是否为实时抓拍的条件），并且持物维表中的物品名称为\"未持物\"，同时区域表的区域名和单位表的组织名分别为\"高新校区\"和\"中国科学技术大学\"。\n\n综上所述，这个查询语句的目的是计算特定时间和地点下（\"高新校区\"的中国科学技术大学内）的未持物人数。"
    },
    {
        "query": "图教中心每天最多有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取“图书教育中心”（可能是一个图书馆或教育设施）在最近30天内每天的最高人数。这个查询语句的主要部分如下：\n\n1. `SELECT`: 从指定的表中选择数据列。\n2. `MIN(人数分布表.stat_time) as 统计时间`: 选择最近的数据记录的时间作为“统计时间”。`MIN()`函数在这里用于获取最近的记录。\n3. `ROUND(MAX(人数分布表.num)) as 平均人数`: 计算并返回在所选日期内的最大人数作为“平均人数”。`MAX()`函数用于获取最大的数字（即人数），`ROUND()`函数用于将结果四舍五入到最接近的整数。\n4. `FROM a_people_spread_day_building as 人数分布表`: 从名为`a_people_spread_day_building`的表中选择数据。\n5. `WHERE`: 设置筛选条件，只选取符合条件的数据。这里筛选的条件包括：\n   - `building_name = '图书教育中心'`: 限制选择的建筑名称是“图书教育中心”。\n   - `DATEDIFF(now(), 人数分布表.stat_time) < 30`: 限制选择的记录距离当前时间的天数小于30天。`DATEDIFF()`函数用于计算两个日期之间的差值。\n   - `region_name = '高新校区'`和`org_name = '中国科学技术大学'`: 限制选择的区域名和机构名分别是“高新校区”和“中国科学技术大学”。\n6. `GROUP BY`: 根据指定的条件对数据进行分组。这里根据`人数分布表.stat_day`进行分组。\n7. `ORDER BY`: 对分组后的数据进行排序。这里按照`min(人数分布表.stat_time)`升序排列。\n\n通过这个查询，我们可以得到过去30天内，“图书教育中心”每天的最大容纳人数。"
    },
    {
        "query": "低频异常行为类型",
        "script": "```sql\nselect 异常行为类型表.name from t_abnormal_type as 异常行为类型表 where name not in( select 异常类型表.name as 异常行为类型 from d_abnormal_behavior as 异常行为表 join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by count(*) desc  ) limit 10;\n```\n这是一段SQL查询语句，用于从数据库中筛选出特定的“低频异常行为类型”。以下是该SQL的各个部分和它们所执行的操作的简要说明：\n\n1. `select 异常行为类型表.name`: 选择要查询的字段（在这个例子中是“异常行为类型表”的“名称”）。\n\n2. `from t_abnormal_type as 异常行为类型表`: 指定查询数据的来源表（在这个例子中是“t_abnormal_type”，别名是“异常行为类型表”）。\n\n3. `where name not in`: 设置一个条件，只返回满足这个条件的数据。在这里，条件是“名称”不在下面的子查询结果集中。\n\n4. `( select 异常类型表.name as 异常行为类型 from d_abnormal_behavior as 异常行为表`: 开始一个子查询。\n\n5. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`: 将“s_camera”表（别名是“摄像头表”）与“d_abnormal_behavior”表（别名是“异常行为表”）连接起来，连接条件是它们的“camera_id”相等。\n\n6. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将“s_room”表（别名是“房间表”）与“摄像头表”连接起来，连接条件是它们的“pid”相等。\n\n7. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将“s_building”表（别名是“楼栋表”）与“房间表”连接起来，连接条件是它们的“pid”相等。\n\n8. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将“s_region”表（别名是“区域表”）与“楼栋表”连接起来，连接条件是它们的“pid”相等。\n\n9. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将“s_organization”表（别名是“单位表”）与“区域表”连接起来，连接条件是它们的“pid”相等。\n\n10. `join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id`: 将“t_abnormal_type”表（别名是“异常类型表”）与“d_abnormal_behavior”表连接起来，连接条件是它们的“abnormal_type”相等。\n\n11. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置子查询的过滤条件，只考虑“高新校区”且属于“中国科学技术大学”的数据。\n\n12. `group by 异常类型表.name`: 对子查询结果按照“异常类型表.name”进行分组。\n\n13. `order by count(*) desc`: 对每个组按照其成员数量（即异常行为的次数）进行降序排序。\n\n14. `limit 10`: 在主查询中，限制返回的结果集的大小，只取前10条记录。"
    },
    {
        "query": "行政办公楼安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于查询某个特定建筑的摄像头数量。下面是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数count(*)作为结果集的一个字段，并命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`: 从名为s_camera的数据表中获取数据，这里将其简称为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头表的pid字段和房间表的id字段进行连接，生成一个新的临时表，这里将房间表简称为“房间表”。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间表的pid字段和楼栋表的id字段进行连接，生成另一个新的临时表，这里将楼栋表简称为“楼栋表”。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋表的pid字段和区域表的id字段进行连接，生成又一个新的临时表，这里将区域表简称为“区域表”。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域表的pid字段和单位表的id字段进行连接，生成最后一个新的临时表，这里将单位表简称为“单位表”。\n\n7. `where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 筛选条件，只有当楼栋表中的建筑名称是“行政办公楼”、区域表中的地区名称为“高新校区”且单位表中的单位名称是“中国科学技术大学”的情况下，才返回相关数据。"
    },
    {
        "query": "2号学科楼安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于查询\"2号学科楼\"安装了摄像头的数量。这个语句涉及到5个表格（s_camera, s_room, s_building, s_region, s_organization），通过多表连接和条件筛选来获取结果。下面是对这个语句的详细解释：\n\n1. `select count(*) as 摄像头数量`: 这是查询的目标，即计算摄像头的总数。使用`count(*)`函数对符合条件的摄像头进行计数。\n\n2. `from s_camera as 摄像头表`: 这是查询的起点，表示从这个名为\"s_camera\"的表中开始查询。为了方便阅读，我们给这个表起了别名\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这是第一个联接（JOIN）子句，表示将\"摄像头表\"与另一个名为\"s_room\"的表（我们称之为\"房间表\"）联接起来。联接条件是摄像头表的`pid`字段等于房间表的`id`字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这是第二个联接子句，表示将\"房间表\"与另一个名为\"s_building\"的表（我们称之为\"楼栋表\"）联接起来。联接条件是房间表的`pid`字段等于楼栋表的`id`字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这是第三个联接子句，表示将\"楼栋表\"与另一个名为\"s_region\"的表（我们称之为\"区域表\"）联接起来。联接条件是楼栋表的`pid`字段等于区域表的`id`字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这是第四个联接子句，表示将\"区域表\"与另一个名为\"s_organization\"的表（我们称之为\"单位表\"）联接起来。联接条件是区域表的`pid`字段等于单位表的`id`字段。\n\n7. `where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这是WHERE子句，用于过滤联接后的数据。只有满足这些条件的摄像头才会被计入计数。在这个例子中，只计算位于\"2号学科楼\"、\"高新校区\"并且属于\"中国科学技术大学\"的摄像头的数量。\n\n综上所述，这个SQL语句的目的是查询\"2号学科楼\"安装了摄像头的数量，通过多表联接和条件筛选来获取结果。"
    },
    {
        "query": "教师食堂人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据表中检索满足特定条件的信息。下面是关于该SQL查询语句的每个部分的详细解释：\n\n1. `SELECT 人数分布表.num AS 人数`: 从数据表中选择名为“num”的列，并将其命名为“人数”。\n\n2. `FROM a_people_spread_day_building AS 人数分布表`: 指定数据来源，即\"a_people_spread_day_building\"表，并为其分配一个别名，以便在后续的查询条件中引用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 设置一个时间过滤条件，仅返回过去5小时内的数据。\n\n4. `AND 人数分布表.building_name = '教工食堂'`: 设定第二个筛选条件，要求所选建筑的名称是“教工食堂”。\n\n5. `AND 人数分布表.region_name = '高新校区'`: 设定第三个筛选条件，要求所选地区名称为“高新校区”。\n\n6. `AND 人数分布表.org_name = '中国科学技术大学'`: 设定第四个筛选条件，要求所选组织的名称为“中国科学技术大学”。\n\n7. `ORDER BY 人数分布表.stat_time DESC`: 对检索到的数据进行排序，按照统计时间降序排列（即最近的记录在最前面）。\n\n8. `LIMIT 1`: 限制返回的结果集数量，只返回一条记录。"
    },
    {
        "query": "信智楼有人房间数量",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'     and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一个SQL查询语句，用于统计\"信智楼\"里现在有人在的房间数量。这个查询涉及到5个表格（s_camera, s_room, s_building, s_region, s_organization），通过多表连接和子查询来获取数据。下面是对这个查询的详细解释：\n\n1. `s_camera`：摄像头表，存储摄像头的基本信息，如ID（cam_id）、名称（camera_name）等；\n2. `s_room`：房间表，存储房间的基本信息，如ID（room_id）、名称（room_name）等；\n3. `s_building`：楼栋表，存储楼栋的基本信息，如ID（building_id）、名称（building_name）等；\n4. `s_region`：区域表，存储区域的基本信息，如ID（region_id）、名称（region_name）等；\n5. `s_organization`：单位表，存储单位的基本信息，如ID（org_id）、名称（org_name）等；\n6. `d_people`：人员表，存储人员的基本信息，如摄像头ID（camera_id）、人员状态（moment）、时间（now）等。\n\n查询过程如下：\n\n1. 首先，将摄像头表（s_camera）、房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）通过pid字段进行连接；\n\n2. 然后，设置查询条件，即：\n   - 区域表的region_name等于\"高新校区\"；\n   - 单位表的单位名称为\"中国科学技术大学\"；\n   - 楼栋表的building_name为\"信智楼\"；\n   - 从人员表（d_people）中筛选出最近10分钟内有活动的人员（即TIMESTAMPDIFF(MINUTE, moment, now()) < 10）；\n\n3. 接着，从筛选出的摄像头ID（camera_id）列表中，统计在\"信智楼\"内现在有人在的房间数量。这是通过子查询实现的，子查询先找出满足条件的摄像头ID（camera_id），主查询再根据这些ID统计对应的房间数量。\n\n最后，返回统计得到的房间数量作为结果。"
    },
    {
        "query": "查一下图书馆的所有摄像头的基本信息",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于查询图书馆内所有摄像头的基本信息。下面是对这段SQL的详细解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 这部分是选择要查询的字段，包括摄像头的ID（摄像头编号）、IP地址以及安装位置（来自房间表中的room_name字段）。\n\n2. `from s_camera as 摄像头表`: 从s_camera（摄像头表）这张数据表中查询数据。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这句表示将摄像头表与房间表进行连接，连接条件是摄像头表的pid字段等于房间表的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这句表示将房间表与楼栋表进行连接，连接条件是房间表的pid字段等于楼栋表的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这句表示将楼栋表与区域表进行连接，连接条件是楼栋表的pid字段等于区域表的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这句表示将区域表与单位表进行连接，连接条件是区域表的pid字段等于单位表的id字段。\n\n7. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是设置查询条件，只返回满足以下条件的摄像头记录：安装在“图书教育中心”的楼栋里，位于“高新校区”的区域中，所属单位为“中国科学技术大学”。\n\n8. `order by 摄像头表.id asc limit 1000`: 这部分是设置排序和取值限制。按照摄像头表的id字段从小到大（升序）排列，并仅返回前1000条记录。"
    },
    {
        "query": "学生食堂每天平均有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于计算\"学生食堂\"在特定时间段内（距离现在小于30天的数据）的平均人数。\n\n具体解析如下：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选择最小的统计时间作为结果。\n2. `round(avg(人数分布表.num)) as 平均人数`: 计算平均人数，并四舍五入保留两位小数。\n3. `from a_people_spread_day_building as 人数分布表`: 指定数据来源表为\"a_people_spread_day_building\"，别名设为\"人数分布表\"。\n4. `WHERE 人数分布表.building_name='学生食堂'`: 筛选条件之一是建筑名为\"学生食堂\"。\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`: 筛选条件之二是统计时间与当前日期的差值小于30天。\n6. `and 人数分布表.region_name='高新校区'`: 筛选条件之三是地区名称为\"高新校区\"。\n7. `and 人数分布表.org_name='中国科学技术大学'`: 筛选条件之四是机构名称为\"中国科学技术大学\"。\n8. `group by 人数分布表.stat_day`: 对日期进行分组，以计算每日的平均人数。\n9. `order by min(人数分布表.stat_time) asc`: 对结果按照统计时间的最小值升序排列。"
    },
    {
        "query": "1号学科楼人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='1号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取“1号学科楼”的人数信息。下面是该查询语句的详细解析：\n\n1. `select 人数分布表.num as 人数`：选择字段\"num\"作为查询结果中的\"人数\"。\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表名为a_people_spread_day_building（可能是一个存储了人员分布信息的表），并为这个表起了一个别名“人数分布表”，以便在后续的条件和排序中使用。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置一个时间条件，即距离当前时间的小时数小于5，意味着只查询过去5小时内的数据。\n4. `and 人数分布表.building_name='1号学科楼'`：设置建筑名称为“1号学科楼”的条件。\n5. `and 人数分布表.region_name='高新校区'`：设置地区名称为“高新校区”的条件。\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置组织名称为“中国科学技术大学”的条件。\n7. `order by 人数分布表.stat_time desc`：按统计时间降序排列，即先显示最新的数据。\n8. `limit 1`：限制查询结果为一条记录。\n\n综上所述，这个SQL查询语句的目的是查询过去5小时内，“1号学科楼”的中国科学技术大学高新校区的人数信息，并返回最新的1条记录。"
    },
    {
        "query": "列出镜头中有人的室内摄像头的编号",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中筛选出满足特定条件的数据。以下是各部分的具体解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`: 这是查询的结果字段，包括摄像头的ID（摄像头编号）、安装的房间名称（安装位置）以及所在的大楼名称（所属大楼）。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分是连接各个表的条件，将摄像头表、房间表、楼栋表、区域表和单位表通过主键关联起来。\n\n3. `where 摄像头表.inhouse = 1 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 这是过滤条件，只返回摄像头表中标记为“inhouse”（表示室内摄像头）且其ID在d_people表中的摄像头ID集合中（即这些摄像头捕捉到的人），同时要求人与摄像头的距离（以分钟为单位）小于10分钟。\n\n4. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是额外的过滤条件，只返回位于“高新校区”并且属于“中国科学技术大学”的摄像头及其相关信息。\n\n5. `order by 摄像头表.id asc limit 1000`: 最后这部分是排序和限制结果，按照摄像头ID从小到大排列（升序），并只返回前1000条结果。"
    },
    {
        "query": "行政与师生服务中心监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 查询语句，用于计算满足特定条件的摄像头数量。各子句和连接关系如下：\n\n1. `select count(*) as 摄像头数量`: 选择函数 COUNT 和星号 (*) 来统计符合条件的摄像头的总数，并将结果命名为 \"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`: 指定摄像头信息的数据表名为 s_camera，并为其分配一个别名 \"摄像头表\"，便于在后续的查询中使用。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头表的 pid 字段与房间表的 id 字段相等联接两个数据表。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 同样通过房间表的 pid 字段与楼栋表的 id 字段相等联接另两个数据表。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 再通过楼栋表的 pid 字段与区域表的 id 字段相等联接又一个数据表。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 最后通过区域表的 pid 字段与单位表的 id 字段相等联接最后一个数据表。\n\n7. `where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置筛选条件，只选取满足这三个条件的摄像头信息。\n\n整个查询语句的目的是计算位于“行政与师生服务中心”的、属于“高新校区”且归属“中国科学技术大学”的所有摄像头的数量。"
    },
    {
        "query": "查一下师生活动中心的所有摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中检索与特定条件匹配的数据。在这个例子中，该语句用于查找名为“师生活动中心”的建筑物中的所有摄像头的详细信息。以下是这个SQL语句的各个部分的详细解释：\n\n1. `select`: 开始一个选择数据的过程。\n2. `摄像头表.id as 摄像头编号`: 从摄像头表中选取id字段，并将它命名为\"摄像头编号\"。\n3. `摄像头表.ip as IP地址`: 从摄像头表中选取ip字段，并将它命名为\"IP地址\"。\n4. `房间表.room_name as 安装位置`: 从房间表中选取room_name字段，并将它命名为\"安装位置\"。\n5. `from s_camera as 摄像头表`: 指定数据来源是s_camera表，并将其简写为“摄像头表”。\n6. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头表的pid字段和房间表的id字段的相等性将两个表联接在一起。\n7. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间表的pid字段和楼栋表的id字段的相等性将两个表联接在一起。\n8. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋表的pid字段和区域表的id字段的相等性将两个表联接在一起。\n9. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域表的pid字段和单位表的id字段的相等性将两个表联接在一起。\n10. `where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，即只有满足这些条件的记录才会被选中。\n11. `order by 摄像头表.id asc limit 1000;`: 按照摄像头表的id字段升序排列结果集（从小到大排序），并限制返回的结果集的数量最多为1000条。"
    },
    {
        "query": "老师食堂总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算教工食堂（假设是某个学校或机构的一个地点）在高新校区（假设是某个学校或机构的地理区域之一）的中国科学技术大学（假设是某个单位）内安装了摄像头的数量。\n\n具体解析如下：\n1. `SELECT count(*) as 摄像头数量`：选择函数COUNT(*)作为查询结果，并给这个结果起一个别名“摄像头数量”；\n2. `FROM s_camera as 摄像头表`：从s_camera这张表（这里假设是存储摄像头信息的数据库表）开始查询；\n3. `JOIN s_room as 房间表 on 摄像头表.pid=房间表.id`：连接s_room这张表（假设是存储各个房间信息的表格），连接条件是两个表的id字段相等（即每个摄像头都对应一个特定的房间）；\n4. `JOIN s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接s_building这张表（假设是存储各个楼栋信息的表格），连接条件是房间表的外键pid与楼栋表的主键id相等（即每个房间都属于一个特定的楼栋）；\n5. `JOIN s_region as 区域表 on 楼栋表.pid=区域表.id`：连接s_region这张表（假设是存储各个区域信息的表格），连接条件是楼栋表的外键pid与区域表的主键id相等（即每个楼栋都属于一个特定的区域）；\n6. `JOIN s_organization as 单位表 on 区域表.pid=单位表.id`：连接s_organization这张表（假设是存储各单位信息的表格），连接条件是区域表的外键pid与单位表的主键id相等（即每个区域都属于一个特定的单位）；\n7. `WHERE 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，只有当楼栋表中的building_name字段值为“教工食堂”，区域表中的region_name字段值为“高新校区”，单位表中的org_name字段值为“中国科学技术大学”时，才返回对应的摄像头信息。\n\n最后，这段查询语句将返回满足上述条件的摄像头数量。"
    },
    {
        "query": "师生活动中心摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于统计“师生活动中心”的摄像头数量。以下是各个部分和条件的解释：\n\n1. `select count(*) as 摄像头数量`: 这行代码用来计算摄像头的总数。`count(*)`是SQL的聚合函数，用于计算满足条件的行数；将结果命名为`摄像头数量`，以便在后续的查询中引用。\n\n2. `from s_camera as 摄像头表`: 这行定义了数据来源，即摄像头信息所在的表格（假设名为`s_camera`），并在后面将其简称为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这行代码表示摄像头表和房间表通过`pid`字段进行连接，也就是一个摄像头对应一个房间。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这行代码表示房间表和楼栋表通过`pid`字段进行连接，也就是说一个房间属于一个楼栋。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这行代码表示楼栋表和区域表通过`pid`字段进行连接，也就是一个楼栋属于一个区域。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这行代码表示区域表和单位表通过`pid`字段进行连接，也就是说一个区域属于一个单位。\n\n7. `where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这行条件语句限制了查询的数据范围，只选择“师生活动中心”、“高新校区”和“中国科学技术大学”的摄像头数据。\n\n综上，这个SQL查询的目的是找出位于“师生活动中心”、“高新校区”且属于“中国科学技术大学”的所有摄像头的数量。"
    },
    {
        "query": "信智楼不同朝向分别有多少人？",
        "script": "```sql\nselect 朝向维表.name as 朝向, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 朝向维表.name  order by 朝向维表.name asc;\n```\n这个SQL查询语句的目的是统计信智楼不同朝向的人数。下面是各子句的详细解释：\n\n1. `select 朝向维表.name as 朝向, count(*) as 人数`: 这部分定义了查询结果，即各个朝向的人数。\n\n2. `from d_people as 人员表`: 从d_people这张人员信息表作为起点进行查询。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 通过摄像头表连接d_people表，确定每个人员在哪个摄像头下。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过房间表连接摄像头表，确定每个摄像头所在的房间。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过楼栋表连接房间表，确定每个房间所在的楼栋。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过区域表连接楼栋表，确定每个楼栋所在的区域。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过单位表连接区域表，确定每个区域所属的单位。\n\n8. `join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id`: 通过朝向维表连接人员表，确定每个人的朝向。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 这个条件设置了一些过滤规则，例如只计算距离现在时间不超过5分钟的人员、区域为“高新校区”、单位为“中国科学技术大学”以及楼栋为“信智楼”的数据。\n\n10. `group by 朝向维表.name`: 按照朝向进行分组统计人数。\n\n11. `order by 朝向维表.name asc`: 对统计结果按照朝向进行升序排序。"
    },
    {
        "query": "信智楼近期识别到多少人？",
        "script": "```sql\nselect count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5     and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询语句，用于计算在“信智楼”附近（具体距离由TIMESTAMPDIFF函数控制）的某高校（中国科学技术大学）的高新区的人的数量。以下是各部分的具体含义：\n\n1. select count(*) as 人数: 选择总人数作为查询结果，并命名为“人数”；\n2. from d_people as 人员表: 从人员数据表（d_people）开始查询；\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 连接摄像头数据表（s_camera），通过摄像头ID（camera_id）进行关联；\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接房间数据表（s_room），通过房间ID（pid）进行关联；\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接楼栋数据表（s_building），通过楼栋ID（pid）进行关联；\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接区域数据表（s_region），通过区域ID（pid）进行关联；\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接单位数据表（s_organization），通过单位ID（pid）进行关联；\n8. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5: 限制条件，要求从人员信息记录时间（moment）到当前时间的分钟差小于5分钟；\n9. and 区域表.region_name='高新校区': 限定区域为学校高新区；\n10. and 单位表.org_name='中国科学技术大学': 限定单位为“中国科学技术大学”；\n11. and 楼栋表.building_name='信智楼': 限定楼栋为“信智楼”。"
    },
    {
        "query": "2号学生公寓安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算2号学生公寓（'2号学生公寓'）中安装的监控摄像头的数量。以下是各个子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数值作为结果列的名称，并返回摄像头的数量。\n\n2. `from s_camera as 摄像头表`：从名为s_camera的数据表中获取数据，将其命名为“摄像头表”以便于后续连接操作。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表和另一个名为s_room的表（这里被命名为“房间表”）通过摄像头表的pid字段和房间表的id字段进行连接。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将房间表和另一个名为s_building的表（这里被命名为“楼栋表”）通过房间表的pid字段和楼栋表的id字段进行连接。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将楼栋表和另一个名为s_region的表（这里被命名为“区域表”）通过楼栋表的pid字段和区域表的id字段进行连接。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将区域表和另一个名为s_organization的表（这里被命名为“单位表”）通过区域表的pid字段和单位表的id字段进行连接。\n\n7. `where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置筛选条件，只返回满足这些条件的记录。这里是指定了具体的楼栋名、区域名和单位名称。"
    },
    {
        "query": "给出学生食堂安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算学生食堂（具体是高新校区的中国科学技术大学的学生食堂）安装的摄像头数量。以下是各个子句和表的解释：\n\n1. `SELECT count(*) as 摄像头数量`: 选择函数count(*)，用于计算满足查询条件的摄像头的总数，并将结果命名为\"摄像头数量\"。\n2. `FROM s_camera as 摄像头表`: 从s_camera表中获取数据，该表存储了所有摄像头的信息。这里将其简称为\"摄像头表\"。\n3. `JOIN s_room as 房间表 ON 摄像头表.pid = 房间表.id`: 连接s_room表（存储所有房间信息的表）到摄像头表，基于摄像头所在的房间ID进行连接。\n4. `JOIN s_building as 楼栋表 ON 房间表.pid = 楼栋表.id`: 连接s_building表（存储所有楼栋信息的表）到摄像头表，基于摄像头所在楼栋的ID进行连接。\n5. `JOIN s_region as 区域表 ON 楼栋表.pid = 区域表.id`: 连接s_region表（存储所有区域信息的表）到摄像头表，基于摄像头所在区域的ID进行连接。\n6. `JOIN s_organization as 单位表 ON 区域表.pid = 单位表.id`: 连接s_organization表（存储所有单位信息的表）到摄像头表，基于摄像头所在单位的ID进行连接。\n7. `WHERE 楼栋表.building_name = '学生食堂' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 设定查询条件，只返回满足以下条件数据的摄像头数量：摄像头所在楼栋的名称为“学生食堂”，摄像头所在区域的名称为“高新校区”，摄像头所在单位的名称为“中国科学技术大学”。"
    },
    {
        "query": "教工食堂安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个关联的表格中统计教工食堂安装了多少个摄像头。具体解释如下：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数`count(*)`作为结果集，并给这个字段取名为\"摄像头数量\"。\n2. `from s_camera as 摄像头表`: 从`s_camera`（假设这是摄像头数据所在的表）开始查询。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接`s_room`（假设这是存储房间信息的表），连接条件是摄像头表中的`pid`等于房间表的`id`。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接`s_building`（假设这是存储楼栋信息的表），连接条件是房间表的`pid`等于楼栋表的`id`。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接`s_region`（假设这是存储区域信息的表），连接条件是楼栋表的`pid`等于区域表的`id`。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接`s_organization`（假设这是存储单位信息的表），连接条件是区域表的`pid`等于单位表的`id`。\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设定查询条件，即查找满足楼栋名称是\"教工食堂\"、所在区域是\"高新校区\"且属于单位\"中国科学技术大学\"的数据。\n\n执行该查询后，将返回符合条件的摄像头数量。"
    },
    {
        "query": "5分钟内识别到多少拿手提包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于从多个表中获取特定条件下的数据。下面是对这个SQL语句的逐行解释：\n\n1. select count(*) as 背双肩包的人数: 这句是选择计数(*)作为\"背双肩包的人数\"列。\n2. from d_people as 人员表: 从d_people表（这里简称为“人员表”）开始查询。\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 连接s_camera表（简称“摄像头表”），基于人员表的camera_id和摄像头表的id相等。\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接s_room表（简称“房间表”），基于摄像头表的pid和房间表的id相等。\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接s_building表（简称“楼栋表”），基于房间表的pid和楼栋表的id相等。\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接s_region表（简称“区域表”），基于楼栋表的pid和区域表的id相等。\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接s_organization表（简称“单位表”），基于区域表的pid和单位表的id相等。\n8. join t_bag as 背包维表 on 人员表.bag=背包维表.id: 连接t_bag表（简称“背包维表”），基于人员表的bag和背包维表的id相等。\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5: 筛选出人员表的moment字段和当前时间now()之间的差值（以分钟为单位）小于5的数据。\n10. and 背包维表.name='手提包': 并且背包维表的name字段值为'手提包'。\n11. and 区域表.region_name='高新校区': 并且区域表的region_name字段值为'高新校区'。\n12. and 单位表.org_name='中国科学技术大学': 并且单位表的org_name字段值为'中国科学技术大学'。\n\n整个语句的目的是在指定的时间范围内（过去5分钟内），统计在'高新校区'且属于'中国科学技术大学'的单位里，携带'手提包'的行人人数。"
    },
    {
        "query": "找出经常发生异常行为的房间",
        "script": "```sql\nselect 房间表.room_name as 房间名称, count(*) as 5天内异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(),异常行为表.moment) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' GROUP by 房间表.room_name  ORDER by count(*) desc  limit 10;\n```\n这是一个SQL查询语句，用于找出在5天内的特定地点（高新校区的中国科学技术大学）经常发生异常行为的房间。以下是各部分的功能解释：\n\n1. `select`: 从数据表中选取特定的列和行。\n2. `room_name`: 选取房间的名称作为\"房间名称\"字段。\n3. `count(*)`: 对每个房间计算异常行为发生的次数。\n4. `as`: 定义一个别名以便在查询结果中更方便地识别某个字段。\n5. `d_abnormal_behavior`: 异常行为数据表。\n6. `join`: 将两个或多个数据表通过公共键连接在一起。\n7. `s_camera`: 摄像头数据表。\n8. `on`: 指定连接条件。\n9. `id`: 摄像头的主键。\n10. `s_room`: 房间数据表。\n11. `pid`: 房间的主键。\n12. `s_building`: 楼栋数据表。\n13. `DATEDIFF()`: 计算两个日期之间的差值。\n14. `now()`: 获取当前日期和时间。\n15. `<`: 小于号，表示比较运算符。\n16. `5`: 限制时间范围在最近5天内。\n17. `s_region`: 区域数据表。\n18. `region_name`: 区域的名称。\n19. `高新校区`: 指定的区域名。\n20. `s_organization`: 单位数据表。\n21. `org_name`: 单位的名称。\n22. `中国科学技术大学`: 指定单位名称。\n23. `GROUP by`: 根据某一字段对数据进行分组。\n24. `ORDER by`: 对分组后的数据按照某一字段进行排序。\n25. `desc`: 降序排序。\n26. `limit`: 限制查询结果的条数。\n27. `10`: 返回前10条结果。\n\n这个查询的目的是找出最近5天内，在高新校区的中国科学技术大学内，发生异常行为次数最多的前10个房间。"
    },
    {
        "query": "给出师生服务中心的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询某个特定地点（这里是“行政与师生服务中心”）的摄像头数量。具体解释如下：\n\n1. `SELECT count(*) as 摄像头数量`: 这条语句用于计算满足后续条件要求的摄像头的总数。\n\n2. `FROM s_camera as 摄像头表`: 这是摄像头的数据表，用来获取摄像头信息。\n\n3. `JOIN s_room as 房间表 ON 摄像头表.pid = 房间表.id`: 将摄像头表和房间表通过房间ID关联起来，这样可以通过房间表获取到摄像头所在的具体房间信息。\n\n4. `JOIN s_building as 楼栋表 ON 房间表.pid = 楼栋表.id`: 将房间表和楼栋表通过楼栋ID关联起来，这样可以通过楼栋表获取到摄像头所在的具体楼栋信息。\n\n5. `JOIN s_region as 区域表 ON 楼栋表.pid = 区域表.id`: 将楼栋表和区域表通过区域ID关联起来，这样可以通过区域表获取到摄像头所在的具体区域信息。\n\n6. `JOIN s_organization as 单位表 ON 区域表.pid = 单位表.id`: 将区域表和单位表通过单位ID关联起来，这样可以通过单位表获取到摄像头所在的单位的名称信息。\n\n7. `WHERE 楼栋表.building_name = '行政与师生服务中心' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 这部分是筛选条件，只选择位于“行政与师生服务中心”、“高新校区”且属于“中国科学技术大学”的摄像头。\n\n最后，这段 SQL 的执行结果会返回一个包含摄像头数量的记录，表示满足上述条件的摄像头数量。"
    },
    {
        "query": "找出很少发生异常行为的房间",
        "script": "```sql\nselect 房间表.room_name as 房间名称, count(*) as 5天内异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(),异常行为表.moment) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' GROUP by 房间表.room_name  ORDER by count(*) asc  limit 10;\n```\n这个SQL查询语句的目的是找出在过去5天内，异常行为较少的10个房间（按异常行为次数从少到多排序）。具体来说，它执行了以下操作：\n\n1. 从d_abnormal_behavior表（异常行为表）开始，与s_camera表（摄像头表）进行连接，条件是两表的camera_id和id相等；\n2. 接着，将s_camera表（摄像头表）与s_room表（房间表）进行连接，条件是摄像头表中的pid等于房间表中的id；\n3. 同样地，将s_room表（房间表）与s_building表（楼栋表）进行连接，条件是房间表中的pid等于楼栋表中的id；\n4. 然后，将s_building表（楼栋表）与s_region表（区域表）进行连接，条件是楼栋表中的pid等于区域表中的id；\n5. 最后，将s_region表（区域表）与s_organization表（单位表）进行连接，条件是区域表中的pid等于单位表中的id；\n6. 在连接完所有表格后，对数据进行筛选，只选择过去5天内发生的异常行为数据，即DATEDIFF(now(), 异常行为表.moment) < 5的记录；\n7. 同时，还限制了区域表的区域名称为\"高新校区\"，单位表的单位名称为\"中国科学技术大学\"；\n8. 对筛选后的数据按照房间表中的room_name进行分组，并计算每个房间的异常行为数量；\n9. 使用GROUP BY子句对分组后的数据进行排序，按照异常行为数量的多少从小到大排序；\n10. 最后，通过LIMIT子句限制结果集的大小，仅返回前10个结果。\n\n这个查询的结果就是异常行为最少的10个房间及其异常行为次数。"
    },
    {
        "query": "师生服务中心的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政与师生服务中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中检索“行政与师生服务中心”在\"高新校区\"的最近5小时内的人数信息。\n\n以下是各部分的具体含义：\n\n1. `select 人数分布表.num as 人数`：选择字段`num`作为结果集的列名`人数`。`num`应该是表示人数的数值字段。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定查询的数据表名为`a_people_spread_day_building`，并为该数据表起个别名为`人数分布表`，以便在后续的查询条件中使用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置时间过滤条件，只选取在过去5小时内的记录（现在的时间减去`stat_time`字段的值小于5小时）。\n\n4. `and 人数分布表.building_name='行政与师生服务中心'`：设置空间过滤条件，只选取`building_name`字段值为“行政与师生服务中心”的记录。\n\n5. `and 人数分布表.region_name='高新校区'`：设置区域过滤条件，只选取`region_name`字段值为“高新校区”的记录。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置组织过滤条件，只选取`org_name`字段值为“中国科学技术大学”的记录。\n\n7. `order by 人数分布表.stat_time desc`：按照`stat_time`字段的值降序排列结果集，即最近的记录排在最前面。\n\n8. `limit 1`：限制返回的结果集只有一条记录。"
    },
    {
        "query": "统计学生食堂每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。下面是该SQL语句的各个部分的解释：\n\n1. `select`: 开始一个选择数据的命令。\n2. `min(人数分布表.stat_time) as 统计时间`: 选择最小的时间值作为\"统计时间\"列。\n3. `round(max(人数分布表.num)) as 平均人数`: 计算最大的数值并四舍五入，作为\"平均人数\"列。\n4. `from a_people_spread_day_building as 人数分布表`: 从名为\"a_people_spread_day_building\"的表中获取数据，并将此表简称为\"人数分布表\"。\n5. `WHERE`: 设置查询条件的开始标志。\n6. `人数分布表.building_name='学生食堂'`: 筛选出\"building_name\"字段值为\"学生食堂\"的数据。\n7. `DATEDIFF(now(), 人数分布表.stat_time) < 30`: 筛选出\"stat_time\"字段距离当前时间（NOW()函数返回当前时间）在30天以内的数据。\n8. `and 人数分布表.region_name='高新校区'`: 筛选出\"region_name\"字段值为\"高新校区\"的数据。\n9. `and 人数分布表.org_name='中国科学技术大学'`: 筛选出\"org_name\"字段值为\"中国科学技术大学\"的数据。\n10. `group by 人数分布表.stat_day`: 对\"stat_day\"字段进行分组操作，以便对每天的统计数据进行分析。\n11. `order by min(人数分布表.stat_time) asc`: 对结果按照\"stat_time\"字段的值从小到大排序。"
    },
    {
        "query": "找出图教中心一个月内，每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于查找一个月内“图书教育中心”每天的最大人数。以下是各部分的解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选择最小的时间（即最早的一天）作为统计时间。\n\n2. `round(max(人数分布表.num)) as 平均人数`: 计算每天的平均人数，并四舍五入取整。\n\n3. `from a_people_spread_day_building as 人数分布表`: 从表格“a_people_spread_day_building”中获取数据，将其命名为“人数分布表”。\n\n4. `WHERE 人数分布表.building_name='图书教育中心'`: 限制条件，只返回名为“图书教育中心”的数据。\n\n5. `AND DATEDIFF(now(), 人数分布表.stat_time) < 30`: 限制条件，只返回过去30天的数据。DATEDIFF是计算两个日期之间差异的函数。\n\n6. `AND 人数分布表.region_name='高新校区'`: 限制条件，只返回位于“高新校区”的数据。\n\n7. `AND 人数分布表.org_name='中国科学技术大学'`: 限制条件，只返回属于“中国科学技术大学”的数据。\n\n8. `group by 人数分布表.stat_day`: 对每天的人数进行分组。\n\n9. `order by min(人数分布表.stat_time) asc`: 对结果按照时间从小到大排序。"
    },
    {
        "query": "信智楼有多少人拿手提包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于计算在\"信智楼\"内有多少人拿着“手提包”。以下是各部分的功能和关系说明：\n\n1. `d_people`（人员表）: 存储人员信息的表，包含字段如姓名、性别、年龄等，以及一个关联摄像头的字段（camera_id）；\n2. `s_camera`（摄像头表）: 存储摄像头的信息表，包含字段如摄像头ID（id）、摄像头位置信息等，以及与对应人员关联的字段（camera_id）;\n3. `s_room`（房间表）: 存储房间信息的表，包含字段如房间ID（id）、房间名称、房间类型等，以及对应楼栋的关联字段（pid）;\n4. `s_building`（楼栋表）: 存储楼栋信息的表，包含字段如楼栋ID（id）、楼栋名称等，以及对应区域的关联字段（pid）;\n5. `s_region`（区域表）: 存储区域信息的表，包含字段如区域ID（id）、区域名称等，以及对应单位的关联字段（pid）;\n6. `s_organization`（单位表）: 存储单位信息的表，包含字段如单位ID（id）、单位名称等，以及对应区域的关联字段（pid）;\n7. `t_bag`（背包维表）: 存储背包种类信息的表，包含字段如背包ID（id）、背包名称等，以及对应人员的关联字段（bag）;\n8. `now()`: 当前时间；\n9. `TIMESTAMPDIFF(MINUTE, moment, now()) < 5`: 表示人员出现在摄像头中的时间距离当前时间小于5分钟；\n10. `背包维表.name='手提包'`: 表示只有手提包的人员会被统计；\n11. `区域表.region_name='高新校区'`: 表示只计算位于高新校区的信智楼的人数；\n12. `单位表.org_name='中国科学技术大学'`: 表示只计算位于中国科学技术大学的信智楼的人数；\n13. `楼栋表.building_name='信智楼'`: 表示只计算位于信智楼的人数。\n\n这个查询语句通过连接多个表，筛选出在信智楼且携带手提包的人，然后计算这些人的人数。"
    },
    {
        "query": "高新校区室外的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='高新校区室外' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中检索特定条件下的数据。以下是各部分解释：\n\n1. `select 人数分布表.num as 人数`: 选择\"人数分布表\"的\"num\"字段作为查询结果中的\"人数\"字段。\n\n2. `from a_people_spread_day_building as 人数分布表`: 从名为\"a_people_spread_day_building\"的数据表（在查询中简写为\"人数分布表\"）中选择数据。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 筛选出\"stat_time\"（记录时间）与当前时间（\"now()\"）的时间差小于5小时的记录。\n\n4. `and 人数分布表.building_name='高新校区室外'`: 限制筛选出的记录中的\"building_name\"（建筑名称）等于\"高新校区室外\"。\n\n5. `and 人数分布表.region_name='高新校区'`: 进一步限制筛选出的记录中的\"region_name\"（地区名称）等于\"高新校区\"。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 再一步限制筛选出的记录中的\"org_name\"（组织机构名称）等于\"中国科学技术大学\"。\n\n7. `order by 人数分布表.stat_time desc`: 对筛选出的记录按照\"stat_time\"降序排列，即最新的记录在最前面。\n\n8. `limit 1`: 只返回一条满足上述所有条件的记录。"
    },
    {
        "query": "信智楼安装了监控的房间有多少个？",
        "script": "```sql\nselect count(distinct 房间表.id) as 安装了摄像头的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询语句，用于计算\"信智楼\"安装监控摄像头的房间数量。以下是各部分的具体解释：\n\n1. `select count(distinct 房间表.id) as 安装了摄像头的房间数量`: 选择并计算不重复的\"房间表\"中ID的数量，作为\"安装了摄像头的房间数量\"。\n\n2. `from s_camera as 摄像头表`: 指定数据来源是摄像头表（s_camera）。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和房间表，依据条件是摄像头表的父级ID等于房间表的ID。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表和楼栋表，依据条件是房间表的父级ID等于楼栋表的ID。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表和区域表，依据条件是楼栋表的父级ID等于区域表的ID。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表和单位表，依据条件是区域表的父级ID等于单位表的ID。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 设定筛选条件，即要求区域名称为“高新校区”、单位名称是“中国科学技术大学”以及楼栋名称是“信智楼”的数据才会被查询。"
    },
    {
        "query": "信智楼近期内识别到的人员中，挎单肩包的有多少？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这个SQL查询语句的目的是计算信智楼（假设是某栋楼的名字）在最近的五分钟里，识别到的人员中有多少人挎着单肩包。\n\n以下是各个部分的具体解释：\n\n1. select count(*) as 背双肩包的人数: 这句是查询的主体，用于返回挎单肩包的人员数量。\n\n2. from d_people as 人员表: 这是数据表，存储了每个人的信息。\n\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 这是将摄像头表与人员表关联，因为每个人都需要通过摄像头被识别到。\n\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 这是将房间表与摄像头表关联，因为每个摄像头都属于一个特定的房间。\n\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 这是将楼栋表与房间表关联，因为每个房间都属于一个特定的楼栋。\n\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 这是将区域表与楼栋表关联，因为每个楼栋都属于一个特定的区域。\n\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 这是将单位表与区域表关联，因为每个区域都属于一个特定的单位。\n\n8. join t_bag as 背包维表 on 人员表.bag=背包维表.id: 这是将背包维表与人员表关联，因为每个人需要携带一种类型的背包。\n\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5: 这是过滤条件，只保留最近五分钟内被识别到的人的信息。\n\n10. and 背包维表.name='单肩包': 这是过滤条件，只保留挎着单肩包的人的信息。\n\n11. and 区域表.region_name='高新校区': 这是过滤条件，只保留位于高新校区的信息。\n\n12. and 单位表.org_name='中国科学技术大学': 这是过滤条件，只保留属于中国科学技术大学的信息。\n\n13. and 楼栋表.building_name='信智楼': 这是过滤条件，只保留信智楼的信息。"
    },
    {
        "query": "图书馆的监控安装情况",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这个SQL查询语句的目的是获取特定图书馆（假设是“中国科学技术大学的图书教育中心”）的摄像头信息以及它们所在的房间、楼栋和区域。具体来说：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：选择摄像头表的摄像头编号，摄像头IP地址，和房间表中的安装位置作为返回的结果。\n\n2. `from s_camera as 摄像头表`：指定摄像头的数据来源于s_camera表，并给这个表起了别名\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过摄像头表的外键字段（PID）与房间表的内键字段（ID）进行联接操作。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：同样，通过房间表的外键字段（PID）与楼栋表的内键字段（ID）进行联接操作。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：继续，通过楼栋表的外键字段（PID）与区域表的内键字段（ID）进行联接操作。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：最后，通过区域表的外键字段（PID）与单位表的内键字段（ID）进行联接操作。\n\n7. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，限制返回的数据必须满足这三个条件：楼栋名为“图书教育中心”，所在区域为“高新校区”，所属单位为“中国科学技术大学”。\n\n8. `order by 摄像头表.id asc limit 1000;`：按照摄像头表的主键（ID）从小到大排序，并限制返回结果的数量为1000条。"
    },
    {
        "query": "给出2号学科楼的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算2号学科楼的摄像头数量。首先，它连接了5个表格（s_camera, s_room, s_building, s_region和s_organization），这些表格分别对应摄像头的数据、房间的数据、楼栋的数据、区域的数据和单位的数据。然后，通过WHERE条件筛选出满足条件的记录，即“2号学科楼”的摄像头数量。具体来说：\n\n1. `from s_camera as 摄像头表`：从摄像头数据表（s_camera）开始查询。\n2. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头数据表（s_camera）和房间数据表（s_room）通过摄像头的pid和房间的id关联起来。\n3. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将房间数据表（s_room）和楼栋数据表（s_building）通过房间的pid和楼栋的id关联起来。\n4. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将楼栋数据表（s_building）和区域数据表（s_region）通过楼栋的pid和区域的id关联起来。\n5. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将区域数据表（s_region）和单位数据表（s_organization）通过区域的pid和单位的id关联起来。\n6. `where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，只返回满足这三个条件的记录。\n7. `select count(*) as 摄像头数量`：计算满足上述条件的摄像头数量。"
    },
    {
        "query": "摄像头安装情况",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) desc;\n```\n这是一条SQL查询语句，用于统计高新校区中国科学技术大学的各个楼宇的摄像头数量，并按摄像头数量的多少进行排序。具体解释如下：\n\n1. `select`: 选择要获取的数据字段。这里选择的是楼宇名称（building_name）和摄像头数量（count(*））。\n2. `from`: 指定数据来源表。这里是s_camera（摄像头表）。\n3. `join`: 连接多个数据表。这里连接到s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。\n4. `on`: 指定连接条件。例如，摄像头表（s_camera）与房间表（s_room）的连接条件是摄像头表的pid等于房间表的id；房间表（s_room）与楼栋表（s_building）的连接条件是房间表的pid等于楼栋表的id。\n5. `where`: 设定筛选条件。这里的筛选条件是区域表（s_region）的region_name等于'高新校区'且单位表（s_organization）的org_name等于'中国科学技术大学'。\n6. `group by`: 对结果进行分组。这里的分组依据是楼栋表（s_building）的building_name。\n7. `order by`: 对结果进行排序。这里的排序依据是摄像头数量（count(*））的多少，按降序排列。\n\n执行这条SQL语句后，将会得到一张包含高新校区中国科学技术大学的各个楼宇的摄像头数量以及楼宇名称的数据表，并按照摄像头数量的多少进行降序排序。"
    },
    {
        "query": "信智楼不同年龄段分别有多少人？",
        "script": "```sql\nselect case 人员表.age_group when 'AgeLess18' then '小于18岁' when 'Age18-60' then '18-60岁' else '大于60岁' end as '年龄组', count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.age_group  order by 人员表.age_group asc;\n```\n这是一个SQL查询语句，用于统计“信智楼”内不同年龄段的人数。以下是各个部分的功能解释：\n\n1. `select case 人员表.age_group`: 设置查询的字段内容，通过case函数将年龄分组转换为易于理解的文字表述。\n2. `when 'AgeLess18' then '小于18岁'`: 当年龄分组为\"AgeLess18\"时，返回的描述为\"小于18岁\"。\n3. `when 'Age18-60' then '18-60岁'`: 当年龄分组为\"Age18-60\"时，返回的描述为\"18-60岁\"。\n4. `else '大于60岁' end as '年龄组'`: 否则（即年龄分组为\"AgeMore60\"），返回的描述为\"大于60岁\"。\n5. `count(*) as 人数`: 对每个年龄段进行计数，得到该年龄段的人数。\n6. `from d_people as 人员表`: 从\"d_people\"表开始查询，此表可能包含人员基本信息，如姓名、性别、年龄等。\n7. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 联接\"s_camera\"表，基于\"人员表.camera_id\"等于\"摄像头表.id\"的条件进行连接，可能表示摄像头记录了人员的进出信息。\n8. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接\"s_room\"表，基于\"摄像头表.pid\"等于\"房间表.id\"的条件进行连接，可能表示摄像头所在房间的信息。\n9. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接\"s_building\"表，基于\"房间表.pid\"等于\"楼栋表.id\"的条件进行连接，可能表示摄像头所在楼栋的信息。\n10. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接\"s_region\"表，基于\"楼栋表.pid\"等于\"区域表.id\"的条件进行连接，可能表示摄像头所在校区或学院的信息。\n11. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接\"s_organization\"表，基于\"区域表.pid\"等于\"单位表.id\"的条件进行连接，可能表示摄像头所在学校或单位的名称。\n12. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 过滤条件，要求查询时间距离当前时间小于5分钟，可能表示只查询最近5分钟内的数据。\n13. `and 区域表.region_name='高新校区'`: 过滤条件，要求查询地点为\"高新校区\"。\n14. `and 单位表.org_name='中国科学技术大学'`: 过滤条件，要求查询单位为\"中国科学技术大学\"。\n15. `and 楼栋表.building_name='信智楼'`: 过滤条件，要求查询楼栋为\"信智楼\"。\n16. `group by 人员表.age_group`: 按人员表的年龄段进行分组统计，生成每段年龄的人数。\n17. `order by 人员表.age_group asc;`: 按照年龄段升序排列，使得结果从小于18岁到大于60岁依次展示。"
    },
    {
        "query": "最近识别到的人员中，不同上衣风格分别有多少人？",
        "script": "```sql\nselect substring(人员表.upper,6) as 上衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.upper  order by 人员表.upper asc;\n```\n这是一个SQL查询语句，用于统计高新校区中国科学技术大学的不同上衣风格的人数。以下是各子句的解释：\n\n1. select substring(人员表.upper,6) as 上衣风格, count(*) as 人数：选择上衣风格的子串（从第六位开始）作为上衣风格列，并计算每种上衣风格的总数作为人数列。\n\n2. from d_people as 人员表：从人员表（d_people）中选择数据。\n\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id：将摄像头表（s_camera）与人员表通过camera_id关联起来。\n\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id：将房间表（s_room）与摄像头表通过pid关联起来。\n\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：将楼栋表（s_building）与房间表通过pid关联起来。\n\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id：将区域表（s_region）与楼栋表通过pid关联起来。\n\n7. join s_organization as 单位表 on 区域表.pid=单位表.id：将单位表（s_organization）与区域表通过pid关联起来。\n\n8. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'：筛选出最近5分钟内的记录，并且所在区域为“高新校区”和单位为“中国科学技术大学”的数据。\n\n9. group by 人员表.upper  order by 人员表.upper asc：按照上衣风格进行分组，并按照上衣风格的字母顺序进行排序。"
    },
    {
        "query": "告诉我所有室外摄像头的编号",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse=0 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id  limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中获取和展示室外摄像头的数据信息。以下是各子句的解析：\n\n1. `select`：选择需要返回的数据列。\n2. `摄像头表.id as 摄像头编号`：选择摄像头表中的id字段，并为其起别名“摄像头编号”。\n3. `房间表.room_name as 安装位置`：选择房间表中的room_name字段，并为其起别名“安装位置”。\n4. `楼栋表.building_name as 所在大楼`：选择楼栋表中的building_name字段，并为其起别名“所在大楼”。\n5. `from`：指定数据来源表。\n6. `s_camera as 摄像头表`：将摄像头表简称为摄像头表。\n7. `join`：连接其他表，以获得所需的数据。\n8. `s_room as 房间表`：将房间表简称为房间表。\n9. `on`：设置连接条件，即摄像头表中的pid等于房间表的id。\n10. `s_building as 楼栋表`：将楼栋表简称为楼栋表。\n11. `on`：设置连接条件，即房间表中的pid等于楼栋表的id。\n12. `s_region as 区域表`：将区域表简称为区域表。\n13. `on`：设置连接条件，即楼栋表中的pid等于区域表的id。\n14. `s_organization as 单位表`：将单位表简称为单位表。\n15. `on`：设置连接条件，即区域表中的pid等于单位表的id。\n16. `where`：设置过滤条件。\n17. `摄像头表.inhouse=0`：筛选出室内摄像头（值为0表示室外摄像头）。\n18. `and`：表示接下来还有其他的过滤条件。\n19. `区域表.region_name='高新校区'`：筛选出位于“高新校区”的摄像头。\n20. `and`：表示接下来还有其他的过滤条件。\n21. `单位表.org_name='中国科学技术大学'`：筛选出属于“中国科学技术大学”的摄像头。\n22. `order by`：按照某种规则对结果进行排序。\n23. `摄像头表.id`：按照摄像头表的id字段升序排列。\n24. `limit`：限制返回的结果数量。\n25. `1000`：只返回前1000条结果。"
    },
    {
        "query": "室内摄像头有哪些？",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse=1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id  limit 1000;\n```\n这是一段SQL查询语句，用于从数据库中获取特定条件下的摄像头信息。以下是各部分解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼`：这是查询的列，包括摄像头的ID（摄像头编号）、安装位置的名称（房间名）和所在大楼的名称。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid=单位表.id`：这是查询的数据来源，通过连接不同表（s_camera、s_room、s_building、s_region、s_organization）来获取数据。连接条件是各个表之间的关联字段相等。\n\n3. `where 摄像头表.inhouse=1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是查询的条件，只返回满足这些条件的数据。这里表示只查询校内（摄像头表.inhouse=1）、位于高新校区（区域表.region_name='高新校区'）和中国科学技术大学（单位表.org_name='中国科学技术大学'）的摄像头信息。\n\n4. `order by 摄像头表.id`：这是查询结果的排序方式，按照摄像头的ID进行升序排列。\n\n5. `limit 1000;`：这是查询结果的数量限制，只返回前1000条数据。"
    },
    {
        "query": "告诉我现在1号学生公寓有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='1号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前（即最近5小时内的数据）在1号学生公寓的人数信息。具体来说，这个查询做了以下几件事：\n\n1. `select 人数分布表.num as 人数`: 选择名为`num`的列并将其重命名为`人数`，该列为人数分布表中的数值字段。\n\n2. `from a_people_spread_day_building as 人数分布表`: 指定数据来源表为`a_people_spread_day_building`，并为其起个别名为`人数分布表`，以便后续使用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 限制返回的数据必须是最近5小时之内的，通过`TIMESTAMPDIFF()`函数计算统计时间（`stat_time`）与当前时间的小时差（以小时为单位），小于5小时的数据才会被保留。\n\n4. `and 人数分布表.building_name='1号学生公寓'`: 筛选出满足条件的宿舍楼名称为“1号学生公寓”的数据。\n\n5. `and 人数分布表.region_name='高新校区'`: 筛选出满足条件的地区名称为“高新校区”的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 筛选出满足条件的组织名称为“中国科学技术大学”的数据。\n\n7. `order by 人数分布表.stat_time desc limit 1`: 对结果按照统计时间降序排列，并仅返回第一条记录（即最新的数据）。"
    },
    {
        "query": "给出师生活动中心安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是计算“师生活动中心”摄像头数量。以下是详细的解析步骤：\n\n1. 首先，通过`s_camera`（摄像头表）、`s_room`（房间表）、`s_building`（楼栋表）、`s_region`（区域表）和`s_organization`（单位表）五个表进行连接操作。\n2. `s_camera`表和`s_room`表通过`pid`字段进行连接；`s_room`表和`s_building`表通过`pid`字段进行连接；`s_building`表和`s_region`表通过`pid`字段进行连接；`s_region`表和`s_organization`表通过`pid`字段进行连接。\n3. 然后，通过WHERE条件筛选出位于“师生活动中心”的摄像头数据。这里使用了`building_name`字段等于“师生活动中心”来定位楼栋名称。\n4. 再通过WHERE条件筛选出位于“高新校区”的摄像头数据。这里使用了`region_name`字段等于“高新校区”来定位校区名称。\n5. 最后，再通过WHERE条件筛选出属于“中国科学技术大学”的摄像头数据。这里使用了`org_name`字段等于“中国科学技术大学”来定位单位名称。\n6. 使用COUNT(*)函数统计满足上述条件的摄像头数量，并将结果命名为`摄像头数量`。\n7. 最终，返回的结果集将包含满足所有条件的摄像头数量。"
    },
    {
        "query": "不同下衣风格的人数",
        "script": "```sql\nselect substring(人员表.lower,6) as 下衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.lower  order by 人员表.lower asc;\n```\n这个SQL查询语句的主要功能是统计不同下衣风格的人数。具体解释如下：\n\n1. select子句：选择字段和聚合函数count()。substring(人员表.lower,6)用于提取人员表中下衣风格的字符串，从第6个字符开始，count(*)计算每种下衣风格的人数。\n\n2. from子句：连接多个表格，包括d_people（人员表）、s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。这些表通过on关键字连接在一起，基于不同的条件匹配数据。\n\n3. where子句：设置查询条件，限制返回的数据。TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5表示只返回距离现在五分钟以内的人脸抓拍记录；区域表.region_name='高新校区'和单位表.org_name='中国科学技术大学'分别限制了区域和单位。\n\n4. group by子句：按照人员表.lower分组，即按每个人对应的下衣风格进行分组。\n\n5. order by子句：按照人员表.lower升序排列结果，即按照下衣风格从小到大排序。"
    },
    {
        "query": "师生服务中心摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，主要用于计算特定条件下摄像头的数量。下面是对这段SQL的详细解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数count(*)作为结果集，并将其命名为\"摄像头数量\"。这行代码将返回满足后续条件的摄像头总数。\n\n2. `from s_camera as 摄像头表`: 从名为s_camera的数据表中读取数据，并简称为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 使用内连接(INNER JOIN)将s_camera表和s_room表根据它们的主键(PID)进行关联。这将允许我们基于房间来查找相关的摄像头信息。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 同样使用内连接将s_room表和s_building表根据它们的主键进行关联，这样我们就可以获取到每个摄像头的楼栋信息。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 再次使用内连接将s_building表和s_region表根据它们的主键进行关联，从而我们可以获取到每个摄像头的区域信息。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 最后一次使用内连接将s_region表和s_organization表根据它们的主键进行关联，以便我们能获取到每个摄像头的单位（组织）信息。\n\n7. `where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是查询条件，表示只考虑满足这些条件的摄像头。具体来说，我们需要找到位于“行政与师生服务中心”的楼栋、位于“高新校区”的区域以及属于“中国科学技术大学”的单位的所有摄像头。"
    },
    {
        "query": "目前人数最多的建筑是哪些？",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num desc  limit 10;\n```\n这是一段SQL查询语句，用于从数据库中获取特定条件下的信息。以下是这段SQL语句的各个部分及其作用：\n\n1. `select 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数`：选择要查询的列，即建筑名称和人数。这里使用了`as`关键字为列设置了别名，方便后续操作。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定查询的表，名为`a_people_spread_day_building`，并将其别名为`人数分布表`。\n\n3. `where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：设置查询条件。这里是通过时间差（小时）来计算查询的时间范围，即过去五小时内。同时，还限定了区域名（高新校区）和组织名（中国科学技术大学）。\n\n4. `order by 人数分布表.num desc`：按照人数进行降序排序，即从多到少排列。\n\n5. `limit 10`：限制查询结果的数量，仅返回前10条记录。\n\n综上，这段SQL语句的目的是查询过去五小时内，中国科学技术大学高新校区内人数最多的前10栋建筑的名称和对应的人数。"
    },
    {
        "query": "给出老师食堂安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是计算并返回教工食堂（位于高新校区的中国科学技术大学）安装的摄像头的数量。以下是各个子句的作用解释：\n\n1. SELECT子句：选择要查询的列，即count(*)和as关键字用于将计数结果重命名为“摄像头数量”。\n2. FROM子句：指定要从中获取数据的表，这里是s_camera（摄像头表），s_room（房间表），s_building（楼栋表），s_region（区域表）和s_organization（单位表）。\n3. JOIN子句：用于连接这些表，以便根据条件从多个表中检索数据。这里的连接顺序是首先将s_camera表与s_room表通过pid字段连接在一起，然后将s_room表与s_building表通过pid字段连接，依此类推。\n4. WHERE子句：设置查询条件。在这里，要求楼栋表中的building_name等于\"教工食堂\"，区域表中的region_name等于\"高新校区\"，单位表中的org_name等于\"中国科学技术大学\"。满足这些条件的记录将会被包含在查询结果中。"
    },
    {
        "query": "7号学生公寓总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句是用来计算7号学生公寓总共安装了多少个摄像头。以下是各个部分的作用解释：\n\n1. `s_camera as 摄像头表`：这是摄像头信息的数据表，用于存储每个摄像头的详细信息。\n2. `s_room as 房间表`：这是房间信息的数据表，用于存储每个房间的详细信息，包括与摄像头关联的房间ID。\n3. `s_building as 楼栋表`：这是楼栋信息的数据表，用于存储每个楼栋的详细信息，包括与房间关联的楼栋ID。\n4. `s_region as 区域表`：这是区域信息的数据表，用于存储每个区域的详细信息，包括与楼栋关联的区域ID。\n5. `s_organization as 单位表`：这是单位信息的数据表，用于存储每个单位的详细信息，包括与区域关联的单位ID。\n6. `where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这部分是查询条件，只选择7号学生公寓、位于高新校区并且属于中国科学技术大学的摄像头的记录。\n7. `count(*) as 摄像头数量`：使用COUNT函数计算满足上述条件的摄像头的总数。"
    },
    {
        "query": "最近一个月内发生了哪些异常？",
        "script": "```sql\nselect 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) <30 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 异常行为表.moment desc limit 1000;\n```\n这是一段 SQL 语言的数据库查询语句。它用于从多个表中检索数据并返回满足特定条件的记录。下面是这段 SQL 的详细解释：\n\n1. `select`: 从数据库中选择特定的字段和数据。\n2. `d_abnormal_behavior as 异常行为表`, `s_camera as 摄像头表`, `s_room as 房间表`, `s_building as 楼栋表`, `s_region as 区域表`, `s_organization as 单位表`, `t_abnormal_type as 异常类型表`: 定义了需要连接的表格。\n3. `camera_id as 摄像头编号`, `room_name as 异常发生地点`, `moment as 异常发生时刻`, `name as 异常类型`: 选择了要返回的字段名称。\n4. `join`: 用于将不同的表格通过共同的字段进行连接，以便在一个查询中获取相关的信息。\n5. `on`: 指定了连接条件，即两个表格中的共同字段。\n6. `where`: 用于过滤结果集，只返回满足特定条件的记录。\n7. `DATEDIFF(now(), moment) <30`: 计算当前时间（now）与异常发生时刻（moment）之间的差值，限制结果集中时间差小于30天（一个月）的记录。\n8. `and`: 用于组合多个条件，只有当所有条件都满足时，才返回对应的记录。\n9. `order by`: 按照某个字段对结果集进行排序，这里按照异常发生时刻（moment）降序排列。\n10. `limit`: 限制结果集的记录数量，这里限制结果为1000条。\n\n整句SQL的意思是在一个月（30天内）内，检索出发生在“高新校区”和“中国科学技术大学”范围内的异常行为数据，并按照异常发生时刻降序排列，最多返回1000条记录。"
    },
    {
        "query": "行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从多个表中获取并排序行人轨迹数据。以下是各子句的含义：\n\n1. `select`：选择要返回的列。这里选择了“轨迹起始时间”、“轨迹结束时间”、“虚拟人名”和“经过的摄像头Id”等列。\n\n2. `from`：指定要查询的表。这里是`a_people_trail`（行人轨迹表）。\n\n3. `join`：用于将多个表连接在一起。这里是将`s_camera`（摄像头表）、`s_room`（房间表）、`s_building`（楼栋表）、`s_region`（区域表）和`s_organization`（单位表）与`a_people_trail`表连接。\n\n4. `on`：定义连接条件。例如，`行人轨迹表.start_camera_id=摄像头表.id`表示根据摄像头Id进行连接。\n\n5. `where`：设置查询条件。这里设置了“区域表.region_name='高新校区'”和“单位表.org_name='中国科学技术大学'”两个条件。\n\n6. `order by`：设置排序规则。这里按照“行人轨迹表.start_time”倒序排列。\n\n7. `limit`：限制查询结果的数量。这里限制返回的结果为前10条。"
    },
    {
        "query": "找出图书教育中心一个月内，每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于在一个月内（即DATEDIFF(now(), 人数分布表.stat_time) < 30）从数据库中检索“图书教育中心”每天的最低人数。以下是该查询的详细解释：\n\n1. `SELECT`: 这是开始查询的关键词，表示要从数据库中选择特定的数据列和行。\n2. `MIN(人数分布表.stat_time) AS 统计时间`: 这行代码将返回每一天（即人数分布表中的stat_time字段）的最低值，并将这些值命名为\"统计时间\"。\n3. `ROUND(MIN(人数分布表.num)) AS 平均人数`: 这行代码将返回与上述同一天的最小人数（即人数分布表中的num字段），并对结果进行四舍五入（使用round函数），然后将其命名为\"平均人数\"。\n4. `FROM a_people_spread_day_building AS 人数分布表`: 这行代码指定了数据来源，即表格a_people_spread_day_building，并将其简称为\"人数分布表\"。\n5. `WHERE`: 这是一个过滤条件，用于筛选出满足特定条件的数据。本例中，它筛选出building_name等于\"图书教育中心\"的数据。\n6. `AND`: 这是一个逻辑连接符，用于组合多个WHERE子句以形成更复杂的过滤条件。\n7. `DATEDIFF(now(), 人数分布表.stat_time) < 30`: 这行代码计算当前日期（现在）和stat_time之间的差值，并确保这个差值小于30天。\n8. `AND`: 这行代码和上一行的意思是\"同时满足这两个条件\"，也就是说，只有当building_name等于\"图书教育中心\"且天数差小于30天时，才考虑下面的其他条件。\n9. `AND 人数分布表.region_name='高新校区'`: 这行代码进一步限制数据，只考虑那些属于\"高新校区\"的数据。\n10. `AND 人数分布表.org_name='中国科学技术大学'`: 这行代码再进一步限制数据，只考虑那些属于\"中国科学技术大学\"的数据。\n11. `GROUP BY 人数分布表.stat_day`: 这行代码按照stat_day对数据进行分组，以便在后续的聚合函数（如MIN()）中对每个不同的stat_day分别计算最小值。\n12. `ORDER BY min(人数分布表.stat_time) ASC`: 这行代码按照最小值（即统计时间）对结果进行排序，默认是升序（ASC），所以结果将按日期从小到大排列。"
    },
    {
        "query": "拿手提包的人数",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于统计在指定时间范围内、位于特定区域和单位并且携带手提包的人数。以下是各个子句的详细解释：\n\n1. `select count(*) as 背双肩包的人数`：计算满足条件的总人数。\n2. `from d_people as 人员表`：从人员表（假设名为d_people）中获取数据。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：将摄像头表（假设名为s_camera）与人员表通过相机ID关联起来，以便知道每个人是在哪个摄像头的监控下。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将房间表（假设名为s_room）与摄像头表通过房间ID关联起来，以便知道每个人是在哪个房间里。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将楼栋表（假设名为s_building）与房间表通过楼栋ID关联起来，以便知道每个人是在哪个楼栋里。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将区域表（假设名为s_region）与楼栋表通过区域ID关联起来，以便知道每个人是在哪个区域里。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将单位表（假设名为s_organization）与区域表通过单位ID关联起来，以便知道每个人是在哪个单位里。\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`：将背包维表（假设名为t_bag）与人员表通过背包ID关联起来，以便知道每个人是背什么样的包。\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：限制条件，要求人员表中的记录距离现在的时间不超过5分钟。\n10. `and 背包维表.name='手提包'`：进一步限制条件，要求每个人携带的是手提包。\n11. `and 区域表.region_name='高新校区'`：进一步限制条件，要求每个人在高新校区内。\n12. `and 单位表.org_name='中国科学技术大学'`：进一步限制条件，要求每个人在中国科学技术大学内。"
    },
    {
        "query": "近期识别到多少不戴眼镜的行人？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='未戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段基于数据库的SQL查询语句，用于计算在特定时间和地点内不戴眼镜的行人数量。以下是各部分解释：\n\n1. `SELECT count(*) as 戴眼镜人数`: 这行代码用于返回满足条件的行数（即不戴眼镜的行人）。count函数用于计算满足条件的行数。\n\n2. `FROM d_people as 人员表`: 这是查询的起始部分，表示数据来自“d_people”表，这里将其称为“人员表”以方便理解。\n\n3. `JOIN s_camera as 摄像头表 ON 人员表.camera_id = 摄像头表.id`: 这行代码用于将“d_people”表和“s_camera”表通过“camera_id”字段进行连接。这里的“摄像头表”是“s_camera”表的别名。\n\n4. `JOIN s_room as 房间表 ON 摄像头表.pid = 房间表.id`: 这行代码继续执行连接操作，将“s_camera”表和“s_room”表通过“pid”字段连接起来。这里的“房间表”是“s_room”表的别名。\n\n5. `JOIN s_building as 楼栋表 ON 房间表.pid = 楼栋表.id`: 这行代码继续执行连接操作，将“s_room”表和“s_building”表通过“pid”字段连接起来。这里的“楼栋表”是“s_building”表的别名。\n\n6. `JOIN s_region as 区域表 ON 楼栋表.pid = 区域表.id`: 这行代码继续执行连接操作，将“s_building”表和“s_region”表通过“pid”字段连接起来。这里的“区域表”是“s_region”表的别名。\n\n7. `JOIN s_organization as 单位表 ON 区域表.pid = 单位表.id`: 这行代码继续执行连接操作，将“s_region”表和“s_organization”表通过“pid”字段连接起来。这里的“单位表”是“s_organization”表的别名。\n\n8. `JOIN t_glasses as 眼镜维表 ON 人员表.glasses = 眼镜维表.id`: 这行代码继续执行连接操作，将“d_people”表和“t_glasses”表通过“glasses”字段连接起来。这里的“眼镜维表”是“t_glasses”表的别名。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 AND 眼镜维表.name = '未戴眼镜' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 这行代码设置了查询条件，即限制时间范围在最近5分钟之内，并且地点位于\"高新校区\"且属于\"中国科学技术大学\"的单位。同时，还筛选出不戴眼镜的行人（眼镜维表中名为“未戴眼镜”）。\n\n综合以上分析，这段SQL代码的目的是计算最近5分钟内，位于“高新校区”且属于“中国科学技术大学”的不戴眼镜的行人总数。"
    },
    {
        "query": "告诉我现在老师食堂有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前（时间接近现在）的“教工食堂”的人数。以下是各部分解释：\n\n1. select 人数分布表.num as 人数：选择名为“人数分布表”的表的“num”字段，并将其重命名为“人数”。\n\n2. from a_people_spread_day_building as 人数分布表：指定要查询的表名，并为其分配一个别名“人数分布表”。\n\n3. WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5：筛选条件，只选取与现在相隔不到5小时的记录。其中TIMESTAMPDIFF是计算时间差函数。\n\n4. and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'：进一步限制筛选条件，确保只查询特定地点、组织的信息。\n\n5. order by 人数分布表.stat_time desc：按“stat_time”（记录时间）降序排列结果集，即最近的数据排在最前面。\n\n6. limit 1；：限制返回结果的数量，仅返回一条记录（因为只需要获取当前人数）。"
    },
    {
        "query": "运动场人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定时间段内某个地点的运动场人数。下面是对这个查询语句的详细解读：\n\n1. `select 人数分布表.num as 人数`：选择`num`字段作为查询结果中的\"人数\"列。\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表名为`a_people_spread_day_building`（可能是一个存储了各建筑物人员数量数据的表），并为其分配一个别名“人数分布表”。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置查询条件，只返回在5小时以内统计的数据。\n4. `and 人数分布表.building_name='体育场'`：限制查询结果只包含名为“体育场”的建筑物的数据。\n5. `and 人数分布表.region_name='高新校区'`：限制查询结果只包含位于“高新校区”的数据。\n6. `and 人数分布表.org_name='中国科学技术大学'`：限制查询结果只包含属于“中国科学技术大学”的数据。\n7. `order by 人数分布表.stat_time desc`：按照统计数据的时间戳降序排列查询结果。\n8. `limit 1`：限定返回的记录数为一条，即只返回最近5小时内的人数信息。"
    },
    {
        "query": "信智楼监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算\"信智楼\"的摄像头数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择函数count(*)，返回满足条件的摄像头的总数。这里的*代表所有行，count(*)即统计所有行的数量。\n\n2. `from s_camera as 摄像头表`: 从名为s_camera的数据表中获取数据，将其简称为摄像头表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将s_camera表（摄像头表）与s_room表（房间表）通过on子句中的条件进行连接。这个条件是摄像头表中的字段pid等于房间表中的字段id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将房间表与s_building表（楼栋表）进行连接，连接条件是房间表中的字段pid等于楼栋表中的字段id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将楼栋表与s_region表（区域表）进行连接，连接条件是楼栋表中的字段pid等于区域表中的字段id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将区域表与s_organization表（单位表）进行连接，连接条件是区域表中的字段pid等于单位表中的字段id。\n\n7. `where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，即只有当楼栋表的building_name等于'信智楼'、区域表的region_name等于'高新校区'且单位表的org_name等于'中国科学技术大学'时，才返回对应的摄像头数量。"
    },
    {
        "query": "4号学生公寓监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个 SQL（结构化查询语言）查询语句，用于从多个关联表中统计并返回满足特定条件的摄像头的数量。具体解释如下：\n\n1. `select count(*) as 摄像头数量`: 选择函数 `count(*)` 对结果进行计数，将计数的结果命名为 \"摄像头数量\"。\n2. `from s_camera as 摄像头表`: 从名为 \"s_camera\" 的表开始查询，将其简写为 \"摄像头表\"。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接 \"摄像头表\" 和 \"s_room\" 表，连接条件是 \"摄像头表\" 的 \"pid\" 字段等于 \"房间表\" 的 \"id\" 字段。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接 \"房间表\" 和 \"s_building\" 表，连接条件是 \"房间表\" 的 \"pid\" 字段等于 \"楼栋表\" 的 \"id\" 字段。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接 \"楼栋表\" 和 \"s_region\" 表，连接条件是 \"楼栋表\" 的 \"pid\" 字段等于 \"区域表\" 的 \"id\" 字段。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接 \"区域表\" 和 \"s_organization\" 表，连接条件是 \"区域表\" 的 \"pid\" 字段等于 \"单位表\" 的 \"id\" 字段。\n7. `where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设定查询条件，只有当 \"楼栋表\" 的 \"building_name\" 字段等于 '4号学生公寓'、\"区域表\" 的 \"region_name\" 字段等于 '高新校区' 以及 \"单位表\" 的 \"org_name\" 字段等于 '中国科学技术大学' 时，才返回相应的摄像头信息。\n\n综上所述，该查询语句的目的是查找满足特定条件的 \"4号学生公寓\" 中（即位于 \"高新校区\"，属于 \"中国科学技术大学\" 的楼宇）的摄像头数量。"
    },
    {
        "query": "找出图书教育中心一个月内，每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这个SQL查询语句的目的是计算并返回在指定的“图书教育中心”（building_name）、“高新校区”（region_name）和“中国科学技术大学”（org_name）的条件下，过去30天内每天的平均人数。以下是各部分的解释：\n\n1. select min(人数分布表.stat_time) as 统计时间: 选择每日统计时间中的最小值作为“统计时间”列，用于确定查询数据的起始日期；\n2. round(avg(人数分布表.num)) as 平均人数: 对每日的人数求平均值，并将结果保留到整数位，作为“平均人数”列；\n3. from a_people_spread_day_building as 人数分布表: 从a_people_spread_day_building表中获取数据，将其简称为“人数分布表”；\n4. WHERE 人数分布表.building_name='图书教育中心': 限制查询仅针对名为“图书教育中心”的建筑；\n5. and DATEDIFF(now(), 人数分布表.stat_time) < 30: 限制查询仅针对过去30天的数据；\n6. and 人数分布表.region_name='高新校区': 限制查询仅针对位于“高新校区”的数据；\n7. and 人数分布表.org_name='中国科学技术大学': 限制查询仅针对属于“中国科学技术大学”的数据；\n8. group by 人数分布表.stat_day: 根据统计日对数据进行分组；\n9. order by min(人数分布表.stat_time) asc: 根据统计时间的最小值对查询结果进行升序排序，使得每天的统计数据按时间顺序排列。"
    },
    {
        "query": "给出运动场的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个关联表中获取并统计体育场的摄像头数量。下面是对这个查询语句的详细解析：\n\n1. `select count(*) as 摄像头数量`: 这句代码是查询的目标，即获取摄像头的总数。`count(*)` 是计数函数，用于计算满足条件的行数。这里将其结果命名为 `摄像头数量`，以便在后续处理中引用。\n\n2. `from s_camera as 摄像头表`: 指定数据来源，即摄像头表（s_camera）。这里的 `as` 关键字用于给表起一个别名，便于后续使用。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这是连接摄像头表和房间表的条件，表示当摄像头表的 `pid` 字段与房间表的 `id` 字段相等时，将这两个表中的行进行匹配。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 同样，这行代码用于连接房间表和楼栋表。当房间表的 `pid` 字段与楼栋表的 `id` 字段相等时，将两个表中的行进行匹配。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这行代码用于连接楼栋表和区域表。当楼栋表的 `pid` 字段与区域表的 `id` 字段相等时，将两个表中的行进行匹配。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这行代码用于连接区域表和单位表。当区域表的 `pid` 字段与单位表的 `id` 字段相等时，将两个表中的行进行匹配。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是查询条件，只有当楼栋表的 `building_name` 等于 \"体育场\"，区域表的 `region_name` 等于 \"高新校区\"，并且单位表的 `org_name` 等于 \"中国科学技术大学\" 时，才会返回相应的数据。\n\n综上所述，这个查询语句的目的是通过多表连接和筛选条件，获取满足特定条件的体育场的摄像头数量。"
    },
    {
        "query": "异常行为数量分布",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 楼栋表.building_name  order by count(*) desc;\n```\n这个SQL查询语句的目的是统计并展示某个指定区域内的某个单位（比如\"中国科学技术大学\"在\"高新校区\"）的楼宇内过去一周内的异常行为发生的次数。以下是各子句的解释：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) 异常行为数量`: 选择楼宇名称和对应异常行为数量的组合作为结果集的输出列。\n\n2. `from d_abnormal_behavior as 异常行为表`: 从异常行为表（d_abnormal_behavior）开始查询数据。\n\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`: 通过摄像头表（s_camera）中的camera_id与异常行为表的camera_id关联，以获取发生异常行为的摄像头信息。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头表（s_camera）中的pid与房间表（s_room）的pid关联，以获取发生异常行为的具体房间信息。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间表（s_room）中的pid与楼栋表（s_building）的pid关联，以获取发生异常行为的楼宇信息。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋表（s_building）中的pid与区域表（s_region）的pid关联，以获取发生异常行为所在的区域信息。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域表（s_region）中的pid与单位表（s_organization）的pid关联，以获取发生异常行为所在区域的单位信息。\n\n8. `where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只返回过去一周内（DATEDIFF计算时间差，now()表示当前日期，异常行为表.moment表示异常行为发生的时间）发生在\"高新校区\"且属于\"中国科学技术大学\"的异常行为记录。\n\n9. `group by 楼栋表.building_name`: 对结果集按照楼宇名称进行分组，以便对每个楼宇的异常行为次数进行统计。\n\n10. `order by count(*) desc`: 对结果集按照异常行为次数进行降序排列，使得异常行为次数最多的楼宇排在最前面。"
    },
    {
        "query": "给出老师食堂的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询某个学校食堂的摄像头数量。以下是各部分解释：\n\n1. `select count(*) as 摄像头数量`：这是查询的目标，即获取摄像头的总数。使用 `count(*)` 函数计算满足条件的摄像头数量，并命名为 `摄像头数量`。\n\n2. `from s_camera as 摄像头表`：从 `s_camera` 这个表（假设它是存储摄像头信息的表）开始查询，并将其简称为 `摄像头表`。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过 `join` 子句将 `摄像头表` 和 `s_room` 表连接在一起，其中 `on` 关键字后面的条件是 `摄像头表` 的 `pid` 列和 `房间表` 的 `id` 列相等。这个连接的结果可以让我们知道每个摄像头对应的房间信息。同时，将 `s_room` 表简称为 `房间表`。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：同样的方式，将 `房间表` 和 `s_building` 表（假设它是存储楼栋信息的表）进行连接，条件是 `房间表.pid` 等于 `楼栋表.id`。这个连接的结果可以让我们知道每个摄像头所在的楼栋信息。同时，将 `s_building` 表简称为 `楼栋表`。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：同样方式，将 `楼栋表` 和 `s_region` 表（假设它是存储区域信息的表）进行连接，条件是 `楼栋表.pid` 等于 `区域表.id`。这个连接的结果可以让我们知道每个摄像头所在区域的范围信息。同时，将 `s_region` 表简称为 `区域表`。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：同样方式，将 `区域表` 和 `s_organization` 表（假设它是存储单位信息的表）进行连接，条件是 `区域表.pid` 等于 `单位表.id`。这个连接的结果可以让我们知道每个摄像头所在单位的信息。同时，将 `s_organization` 表简称为 `单位表`。\n\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是一个过滤条件，只有满足这三个条件的摄像头才会被统计到结果中。这里分别限定了摄像头所在的楼栋、区域和单位。\n\n综上，这段 SQL 语句的目的是查询位于特定楼栋、区域和单位的中国科学技术大学的教工食堂的摄像头数量。"
    },
    {
        "query": "目前有多少个房间是有人的？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'      and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一个SQL查询语句，用于计算某个特定时间和区域内的有人的房间数量。下面是各个子句的简要解释：\n\n1. `select count(房间表.room_name) 有人的房间数量`: 返回满足条件的房间数量。\n2. `from s_camera as 摄像头表`: 从s_camera表中获取数据，作为摄像头表。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将摄像头表和房间表通过摄像头与房间的关联字段（这里是pid）进行连接。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将房间表和楼栋表通过房间与楼栋的关联字段（这里是pid）进行连接。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将楼栋表和区域表通过楼栋与区域的关联字段（这里是pid）进行连接。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将区域表和单位表通过区域与单位的关联字段（这里是pid）进行连接。\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 过滤出特定区域和单位的信息，这里以\"高新校区\"和\"中国科学技术大学\"为例。\n8. `and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 筛选出在过去10分钟内有人员的摄像头信息。\n\n这个查询语句的目的是找出过去10分钟内有人在的摄像头对应的房间数量，以便了解特定时间和区域内有多少人。"
    },
    {
        "query": "安装在室内的摄像头有哪些？",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse=1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id  limit 1000;\n```\n这是一段SQL查询语句，用于从数据库中获取安装在室内的摄像头的信息。以下是各部分解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼`：这是查询的列，包括摄像头编号、安装位置和所在大楼。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid=单位表.id`：这是连接各个表的语句。s_camera是摄像头表，s_room是房间表，s_building是楼栋表，s_region是区域表，s_organization是单位表。通过摄像头表与房间表、楼栋表、区域表和单位表的关联条件（摄像头表的pid等于房间表的id，房间表的pid等于楼栋表的id，楼栋表的pid等于区域表的id，区域表的pid等于单位表的id）将这些表连接起来。\n\n3. `where 摄像头表.inhouse=1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是筛选条件，只选择摄像头表中的inhouse字段值为1（表示安装在室内的摄像头），并且区域表中的region_name字段值为'高新校区'，单位表中的org_name字段值为'中国科学技术大学'的数据。\n\n4. `order by 摄像头表.id`：这是排序条件，按照摄像头表中的id字段从小到大进行排序。\n\n5. `limit 1000`：这是限制返回的结果数量，只返回前1000条数据。"
    },
    {
        "query": "找出图书教育中心一个月内，每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于计算“图书教育中心”在一个月内每天的平均人数。具体解释如下：\n\n1. `SELECT`: 选择要查询的列和聚合函数结果。\n2. `MIN(人数分布表.stat_time) as 统计时间`: 获取最近一个月（现在时间与统计时间差小于30天）内的最早统计时间作为分组依据。\n3. `ROUND(AVG(人数分布表.num)) as 平均人数`: 对每一天的人数进行平均计算并四舍五入保留小数位。\n4. `FROM`: 指定数据来源表名为`a_people_spread_day_building`，别名设为`人数分布表`。\n5. `WHERE`: 设置查询条件，只返回满足以下条件的记录：建筑名称为“图书教育中心”、所在区域为“高新校区”、组织机构为“中国科学技术大学”。\n6. `AND`: 逻辑运算符，表示上述查询条件是并列关系，必须同时满足。\n7. `GROUP BY`: 按日期（`人数分布表.stat_day`）进行分组，以便对每组数据计算平均人数。\n8. `ORDER BY`: 对分组结果按照最早的统计时间升序排列（ASC）。"
    },
    {
        "query": "哪栋楼安装的监控最多？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) desc  limit 1;\n```\n这是一个SQL查询语句，用于从多个表中获取并统计某校区某单位中楼宇安装监控的数量。下面是各子句的解释：\n\n1. select: 选择要输出的列。这里选择了\"楼宇名称\"（来自\"楼栋表\"）和\"摄像头数量\"（通过计数得到）。\n\n2. building_name: \"楼栋表\"中的\"建筑名称\"列，表示每个楼宇的名称。\n\n3. count(*): 对\"摄像头表\"中的所有记录进行计数，即计算每个楼宇安装的摄像头数量。\n\n4. as 摄像头数量: 将count(*)的结果命名为\"摄像头数量\"。\n\n5. from: 从哪些表中选择数据。这里有四个连接的表：摄像头表、房间表、楼栋表和区域表。\n\n6. join: 将这些表通过公共字段（如ID）进行连接。例如，摄像头表和房间表通过PID进行连接，房间表和楼栋表也通过PID进行连接等。\n\n7. on: 指定连接条件。例如，摄像头表的PID等于房间表的ID，房间表的PID等于楼栋表的ID等。\n\n8. where: 过滤条件。这里只考虑位于\"高新校区\"并且属于\"中国科学技术大学\"的单位。\n\n9. group by: 按照指定的列（这里是楼栋表的\"楼宇名称\"）对数据进行分组。\n\n10. order by: 对分组后的结果按照\"摄像头数量\"进行降序排列，即摄像头数量最多的楼宇排在最前面。\n\n11. limit 1: 限制输出结果只返回一条记录，即摄像头数量最多的那栋楼宇。"
    },
    {
        "query": "师生活动中心安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从数据库中获取“师生活动中心”安装的摄像头数量。以下是各部分解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数count(*)作为结果，并将其命名为摄像头数量。这将返回满足后续条件的摄像头的总数。\n\n2. `from s_camera as 摄像头表`：指定数据来源为s_camera表，并为其取名为摄像头表，便于理解。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表与房间表通过on子句连接在一起。其中，摄像头表的pid字段等于房间表的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将房间表与楼栋表通过on子句连接在一起。其中，房间表的pid字段等于楼栋表的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将楼栋表与区域表通过on子句连接在一起。其中，楼栋表的pid字段等于区域表的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将区域表与单位表通过on子句连接在一起。其中，区域表的pid字段等于单位表的id字段。\n\n7. `where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：定义查询条件，即只有当楼栋表的building_name字段值等于“师生活动中心”、区域表的region_name字段值等于“高新校区”以及单位表的org_name字段值等于“中国科学技术大学”时，才会被包含在查询结果中。\n\n这个查询语句的目的是统计位于“师生活动中心”、“高新校区”且属于“中国科学技术大学”的摄像头数量。"
    },
    {
        "query": "告诉我所有室内摄像头的编号",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse=1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id  limit 1000;\n```\n这是一段SQL查询语句。它用于从数据库中获取所有安装在室内的摄像头信息。以下是各部分详细解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼`: 这是选择要返回的列，包括摄像头编号、安装位置和所在大楼。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分是连接多个表的语法。通过`join`关键字将摄像头表（s_camera）与房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）进行联接。这些表之间存在父子关系，通过主键外键关联在一起。\n\n3. `where 摄像头表.inhouse=1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这是查询条件，筛选出摄像头类型为“室内”（`inhouse=1`）且位于\"高新校区\"和属于\"中国科学技术大学\"的数据。\n\n4. `order by 摄像头表.id`: 根据摄像头编号对结果进行排序。\n\n5. `limit 1000`: 限制返回的结果数量，最多返回1000条数据。"
    },
    {
        "query": "师生活动中心每天最多有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一段SQL查询语句，用于查询某个特定建筑（在这里是“师生活动中心”）在指定时间段内（当前日期减去30天之内）的最大平均人数。以下是各部分的具体解释：\n\n1. `min(人数分布表.stat_time) as 统计时间`: 这句代码将返回每一天的起始时间，即最早进入建筑物的时间。\n\n2. `round(max(人数分布表.num)) as 平均人数`: 这句代码将返回每一天的平均人数。这里的\"max\"函数和\"round\"函数一起使用，以确保结果是一个整数。\n\n3. `FROM a_people_spread_day_building as 人数分布表`: 这句代码定义了数据源，即\"a_people_spread_day_building\"表，并将这个表简称为\"人数分布表\"。\n\n4. `WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 这句代码设置了查询条件，包括建筑名称、校区、组织名称以及时间范围。\n\n5. `GROUP BY 人数分布表.stat_day`: 这句代码按日期对数据进行分组，以便对每一天的数据进行聚合操作。\n\n6. `ORDER BY min(人数分布表.stat_time) asc`: 这句代码按照统计时间的升序对查询结果进行排序，即先显示最早的日期。"
    },
    {
        "query": "最近5分钟内识别到的人员中，不同年龄段的人数是多少？",
        "script": "```sql\nselect case 人员表.age_group when 'AgeLess18' then '小于18岁' when 'Age18-60' then '18-60岁' else '大于60岁' end as '年龄组', count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.age_group  order by 人员表.age_group asc;\n```\n这是一个SQL查询语句，用于统计最近5分钟内识别到的人员中，不同年龄段的人数。以下是各部分解释：\n\n1. `select`: 选择字段和统计结果。\n2. `case 人员表.age_group`: 根据年龄分组。\n3. `when 'AgeLess18'`: 当年龄小于18岁时，将其归为“小于18岁”的年龄组。\n4. `when 'Age18-60'`: 当年龄在18-60岁之间时，将其归为“18-60岁”的年龄组。\n5. `else '大于60岁'`: 当年龄大于60岁时，将其归为“大于60岁”的年龄组。\n6. `end as '年龄组'`: 为年龄分组设置别名，方便在查询结果中查看。\n7. `count(*) as 人数`: 对每个年龄组进行计数，得到该年龄组的人数。\n8. `from d_people as 人员表`: 从人员表（d_people）中获取数据。\n9. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接摄像头表（s_camera），通过人员表的camera_id与摄像头表的id关联。\n10. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接房间表（s_room），通过摄像头表的pid与房间表的id关联。\n11. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接楼栋表（s_building），通过房间表的pid与楼栋表的id关联。\n12. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接区域表（s_region），通过楼栋表的pid与区域表的id关联。\n13. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接单位表（s_organization），通过区域表的pid与单位表的id关联。\n14. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 限制条件，只计算最近5分钟内识别到的人员。\n15. `and 区域表.region_name='高新校区'`: 限制条件，只计算位于“高新校区”的人员。\n16. `and 单位表.org_name='中国科学技术大学'`: 限制条件，只计算属于“中国科学技术大学”的单位的人员。\n17. `group by 人员表.age_group`: 按照年龄分组进行统计。\n18. `order by 人员表.age_group asc`: 按照年龄分组进行升序排序，使结果按年龄从小到大排列。"
    },
    {
        "query": "教工食堂监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算满足特定条件的摄像头数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数（COUNT）来计算摄像头的数量。这里的*表示选择所有行进行统计。将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`: 从名为s_camera的表中获取数据，这里将其称为“摄像头表”，便于理解。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表，将其命名为“房间表”。连接条件是摄像头表中的pid字段等于房间表中的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表，将其命名为“楼栋表”。连接条件是房间表中的pid字段等于楼栋表中的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表，将其命名为“区域表”。连接条件是楼栋表中的pid字段等于区域表中的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表，将其命名为“单位表”。连接条件是区域表中的pid字段等于单位表中的id字段。\n\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置筛选条件，即要求楼栋表中的building_name字段值为“教工食堂”，区域表中的region_name字段值为“高新校区”，单位表中的org_name字段值为“中国科学技术大学”。只有满足这些条件的摄像头才会被计入总数。"
    },
    {
        "query": "查看室内摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse=1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id  limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中联合查询并获取特定条件下的数据。以下是各子句的解释：\n\n1. `select`: 选择要返回的列。在这个例子中，选择了4个列：摄像头表（s_camera）的主键（id）作为摄像头编号，房间表（s_room）的房间名（room_name）作为安装位置，楼栋表（s_building）的大楼名（building_name）作为所在大楼，以及区域表（s_region）的区域名（region_name）。\n\n2. `from`: 从哪些表中选择数据。在这个例子中，使用了5个表：摄像头表（s_camera）、房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）。\n\n3. `join`: 连接各个表以获得所需的数据。这个查询使用了4次连接（JOIN）操作。首先，摄像头表（s_camera）与房间表（s_room）通过摄像头表的父ID（pid）等于房间表的主键（id）进行连接；然后，房间表（s_room）与楼栋表（s_building）通过房间表的父ID（pid）等于楼栋表的主键（id）进行连接；接着，楼栋表（s_building）与区域表（s_region）通过楼栋表的父ID（pid）等于区域表的主键（id）进行连接；最后，区域表（s_region）和单位表（s_organization）通过区域表的父ID（pid）等于单位表的主键（id）进行连接。\n\n4. `where`: 设置查询条件的子句。在这个例子中，查询了内部摄像头（inhouse=1）并且位于“高新校区”（region_name）和属于“中国科学技术大学”（org_name）的摄像头。\n\n5. `order by`: 对查询结果按照某个字段进行排序。在这个例子中，按照摄像头表（s_camera）的主键（id）进行升序排序。\n\n6. `limit`: 限制查询结果的条数。在这个例子中，查询结果最多包含1000条记录。"
    },
    {
        "query": "运动场安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个 SQL（结构化查询语言）语句，用于计算满足特定条件的监控设备（摄像头）的数量。以下是各子句和连接的说明：\n\n1. `select count(*) as 摄像头数量`：选择计数函数（count）作为返回值，将计数结果命名为 \"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`：指定数据来源是名为 \"s_camera\" 的摄像头数据表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头的所属房间信息，连接条件是摄像头表的 pid（设备ID）等于房间表中的 id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接摄像头的所属楼栋信息，连接条件是房间表中的 pid（房间ID）等于楼栋表中的 id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接摄像头的所属地区信息，连接条件是楼栋表中的 pid（楼栋ID）等于区域表中的 id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接摄像头的所属单位信息，连接条件是区域表中的 pid（地区ID）等于单位表中的 id。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置筛选条件，只有当楼栋名称等于 \"体育场\"，地区名称等于 \"高新校区\"，以及单位名称为 \"中国科学技术大学\" 时，才保留该记录。\n\n综合以上子句和连接，此 SQL 语句的目的是计算位于 \"中国科学技术大学\" 的 \"高新校区\" 的 \"体育场\" 中，所有摄像头的数量。"
    },
    {
        "query": "信智楼近期识别到的人员中，不戴帽子的有多少？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='未戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于从多个表中获取数据并计算符合条件的人员数量。以下是各个子句的解释：\n\n1. `SELECT count(*) as 戴帽子人数`：选择计数函数`count(*)`作为结果集，并将其命名为`戴帽子人数`。\n\n2. `FROM d_people as 人员表`：指定`d_people`表作为主表，将其别名为`人员表`。\n\n3. `JOIN s_camera as 摄像头表 ON 人员表.camera_id = 摄像头表.id`：连接`s_camera`表（摄像头表），基于`人员表`的`camera_id`与`摄像头表`的`id`相等。\n\n4. `JOIN s_room as 房间表 ON 摄像头表.pid = 房间表.id`：连接`s_room`表（房间表），基于`摄像头表`的`pid`与`房间表`的`id`相等。\n\n5. `JOIN s_building as 楼栋表 ON 房间表.pid = 楼栋表.id`：连接`s_building`表（楼栋表），基于`房间表`的`pid`与`楼栋表`的`id`相等。\n\n6. `JOIN s_region as 区域表 ON 楼栋表.pid = 区域表.id`：连接`s_region`表（区域表），基于`楼栋表`的`pid`与`区域表`的`id`相等。\n\n7. `JOIN s_organization as 单位表 ON 区域表.pid = 单位表.id`：连接`s_organization`表（单位表），基于`区域表`的`pid`与`单位表`的`id`相等。\n\n8. `JOIN t_hat as 帽子维表 ON 人员表.hat = 帽子维表.id`：连接`t_hat`表（帽子维表），基于`人员表`的`hat`字段与`帽子维表`的`id`字段相等。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 AND 帽子维表.name = '未戴帽子' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学' AND 楼栋表.building_name = '信智楼'`：设置查询条件，包括时间差（最近5分钟内的记录）、帽子状态（未戴帽子）、校区、单位和楼栋名称。\n\n整个语句的目的是计算信智楼近期识别到的5分钟以内不戴帽子的人数。"
    },
    {
        "query": "近几天各个楼栋异常行为数量分布是什么样的？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 楼栋表.building_name  order by count(*) desc;\n```\n这个SQL查询语句的目的是为了计算出近7天内各个楼栋的异常行为数量，并对其进行排序。下面是对这个SQL查询语句的解释：\n\n1. `d_abnormal_behavior as 异常行为表`：这是一个异常行为的数据表，存储了各种异常行为的记录。\n\n2. `s_camera as 摄像头表`：这是一个摄像头数据表，存储了所有摄像头的ID以及其所属的房间和楼栋信息。\n\n3. `s_room as 房间表`：这是一个房间数据表，存储了所有房间的信息，包括其所属的楼栋和区域信息。\n\n4. `s_building as 楼栋表`：这是一个楼栋数据表，存储了所有楼栋的信息，包括其所属的区域和单位信息。\n\n5. `s_region as 区域表`：这是一个区域数据表，存储了所有区域的信息，包括其所属的单位信息。\n\n6. `s_organization as 单位表`：这是一个单位数据表，存储了所有单位的信息。\n\n7. `DATEDIFF(now(), 异常行为表.moment) < 7`：这个条件用于筛选出近7天的异常行为数据。\n\n8. `区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这个条件用于筛选出在特定区域和单位发生的异常行为。\n\n9. `group by 楼栋表.building_name`：这个分组条件用于计算每个楼栋的异常行为数量。\n\n10. `order by count(*) desc`：这个排序条件用于将结果按照异常行为数量的多少进行降序排列。\n\n最后，这个查询语句会返回一个包含各个楼栋的异常行为数量以及对应楼栋名称的结果集，其中楼栋名称作为列名，异常行为数量作为该列的值。"
    },
    {
        "query": "找出食堂一个月内，每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于查找食堂在一个月内的平均每日人数。以下是各部分的解释：\n\n1. `SELECT`: 选择要返回的列和聚合函数。\n2. `min(人数分布表.stat_time) as 统计时间`: 获取每天的开始时间（即最早的时间）。\n3. `round(avg(人数分布表.num)) as 平均人数`: 对每日人数进行求平均值操作，并保留一位小数。\n4. `FROM a_people_spread_day_building as 人数分布表`: 从`a_people_spread_day_building`表中选择数据，并将该表简称为“人数分布表”。\n5. `WHERE`: 设置筛选条件，只选取满足以下条件的记录：\n   - `building_name='学生食堂'`: 限定食堂名称为学生食堂。\n   - `DATEDIFF(now(), 人数分布表.stat_time) < 30`: 计算从当前时间到统计时间的差值小于30天，以筛选出最近一个月的记录。\n   - `region_name='高新校区'`: 限定食堂所在校区为高新校区。\n   - `org_name='中国科学技术大学'`: 限定食堂所属组织为中国科学技术大学。\n6. `group by`: 按照`人数分布表.stat_day`对数据进行分组，以便计算每日的平均人数。\n7. `order by`: 对分组后的数据进行排序，按照最早的统计时间（最早的一天）开始排序。\n8. `asc`: 表示升序排序。"
    },
    {
        "query": "图教中心哪些地方安装了摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从数据库中获取图书教育中心（假设是某个学校或机构的名称）的摄像头相关信息。具体来说：\n\n1. `select`子句：选择需要返回的数据列。这里选择了摄像头的ID、IP地址和安装位置。\n2. `from`子句：指定要查询的表。这里有4个关联表：s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。\n3. `join`子句：连接这些关联表以获取所需数据。例如，摄像头表的pid与房间表的id相等，房间表的pid又与楼栋表的id相等等。\n4. `where`子句：设定筛选条件。在这个例子中，只选择满足“图书教育中心”、“高新校区”和“中国科学技术大学”这三个条件的摄像头信息。\n5. `order by`子句：按照摄像头的ID升序排列结果。\n6. `limit`子句：限制返回的结果数量为1000条。"
    },
    {
        "query": "办公楼摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询某个特定办公楼的摄像头数量。具体来说：\n\n1. `select count(*) as 摄像头数量`: 选择摄像头数量作为返回的结果，使用 COUNT 函数计算摄像头的总数。\n\n2. `from s_camera as 摄像头表`: 定义数据源，即摄像头表，假设这个表的名称是 s_camera。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这行代码将摄像头表和房间表通过 PID（可能是指项目编号）关联起来，ON 后面的条件表示两个表中 PID 相等的记录才会被关联在一起。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这行代码将房间表和楼栋表通过 PID 关联起来。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这行代码将楼栋表和区域表通过 PID 关联起来。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这行代码将区域表和单位表通过 PID 关联起来。\n\n7. `where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这行代码设置了查询条件，只有当楼栋表的建筑名为 \"行政办公楼\"，区域表的区域名为 \"高新校区\"，且单位表的单位名称为 \"中国科学技术大学\" 的记录才会被查询出来。\n\n综上，这段 SQL 语句的目的是查询 \"行政办公楼\"、\"高新校区\" 和 \"中国科学技术大学\" 的摄像头数量。"
    },
    {
        "query": "安装摄像头最多的建筑是哪栋？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) desc  limit 1;\n```\n这是一个 SQL 查询语句，用于从数据库中获取摄像头安装最多的建筑信息。以下是各部分的解释：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量`: 选择要返回的列，包括楼宇名称和每个楼宇的摄像头数量。`count(*)` 是聚合函数，用于计算每个楼宇的摄像头数量。\n\n2. `from s_camera as 摄像头表`: 指定数据源，即摄像头信息表（s_camera）。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和房间表，根据摄像头的房间ID与房间表的ID相等进行连接。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表和楼栋表，根据房间所属的楼栋ID与楼栋表的ID相等进行连接。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表和区域表，根据楼栋所属的区域ID与区域表的ID相等进行连接。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表和单位表，根据区域所属的单位ID与单位表的ID相等进行连接。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只选择属于“高新校区”且单位名称为“中国科学技术大学”的数据。\n\n8. `group by 楼栋表.building_name`: 对查询结果按照楼宇名称进行分组，以便计算每个楼宇的摄像头数量。\n\n9. `order by count(*) desc`: 对查询结果按照摄像头数量降序排列，使得摄像头数量最多的建筑位于列表顶部。\n\n10. `limit 1`: 限制查询结果只返回一条记录，即摄像头数量最多的建筑。"
    },
    {
        "query": "告诉我现在教师食堂有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从某个数据库中获取特定时间范围内（例如过去五小时内）的教工食堂（building_name='教工食堂'）在高新校区（region_name='高新校区'）的中国科学技术大学（org_name='中国科学技术大学'）的人数（字段名称为num）。该查询将返回最近一次统计的人数数据（按stat_time降序排列，即最近的统计时间排在最前面），并限制返回结果的数量为1条记录。"
    },
    {
        "query": "老师食堂监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于统计教工食堂在特定校区和单位内的监控摄像头数量。以下是各子句的解释：\n\n1. select count(*) as 摄像头数量：选择计数函数（count）计算满足条件的摄像头的数量，并将结果命名为“摄像头数量”。\n2. from s_camera as 摄像头表：从摄像头表（s_camera）中获取数据。\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id：将摄像头表和房间表通过摄像头所在的房间的ID（摄像头表的pid和房间表的id相等）进行联接。\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：将房间表和楼栋表通过房间所属楼栋的ID（房间表的pid和楼栋表的id相等）进行联接。\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id：将楼栋表和区域表通过楼栋所属区域的ID（楼栋表的pid和区域表的id相等）进行联接。\n6. join s_organization as 单位表 on 区域表.pid=单位表.id：将区域表和单位表通过区域所属单位的ID（区域表的pid和单位表的id相等）进行联接。\n7. where 楼栋表.building_name='教工食堂'：筛选出满足条件（楼栋名称为“教工食堂”）的数据。\n8. and 区域表.region_name='高新校区'：筛选出满足条件（区域名称为“高新校区”）的数据。\n9. and 单位表.org_name='中国科学技术大学'：筛选出满足条件（单位名称为中国科学技术大学）的数据。\n\n整个语句的意思是：查询满足“教工食堂”、“高新校区”和中国科学技术大学这三个条件的摄像头数量。"
    },
    {
        "query": "现在有多少人在行政与师生服务中心？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政与师生服务中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于查询\"行政与师生服务中心\"在\"高新校区\"的\"中国科学技术大学\"中的人数。以下是该语句的各个部分的解释：\n\n1. `select 人数分布表.num as 人数`: 选择字段名为\"num\"的数据并将其重命名为\"人数\"。\n\n2. `from a_people_spread_day_building as 人数分布表`: 从表\"a_people_spread_day_building\"中选择数据，并将该表重命名为\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 筛选出距离当前时间（now()函数返回）少于5小时的数据。这个条件意味着只考虑在过去5小时内收集到的数据。\n\n4. `and 人数分布表.building_name='行政与师生服务中心'`: 进一步筛选出建筑物名称为\"行政与师生服务中心\"的数据。\n\n5. `and 人数分布表.region_name='高新校区'`: 筛选出位于\"高新校区\"的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 筛选出组织名称为\"中国科学技术大学\"的数据。\n\n7. `order by 人数分布表.stat_time desc`: 对数据进行降序排序，最新的统计数据将排在最前面。\n\n8. `limit 1`: 限制查询结果的数量，仅返回一条数据。"
    },
    {
        "query": "食堂安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个表中联合查询并统计满足条件的食堂摄像头数量。下面是对这个查询语句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择摄像头的总数作为结果集的一列，命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`: 从s_camera表（这里将其称为\"摄像头表\"）开始查询。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将s_room表（这里将其称为\"房间表\"）与摄像头表进行连接，连接条件是摄像头表的pid等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将s_building表（这里将其称为\"楼栋表\"）与房间表进行连接，连接条件是房间表的pid等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将s_region表（这里将其称为\"区域表\"）与楼栋表进行连接，连接条件是楼栋表的pid等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将s_organization表（这里将其称为\"单位表\"）与区域表进行连接，连接条件是区域表的pid等于单位表的id。\n\n7. `where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只返回满足这三个条件的记录，即\"学生食堂\"、\"高新校区\"和\"中国科学技术大学\"。\n\n这个查询语句的目的是找出位于\"学生食堂\"、\"高新校区\"和\"中国科学技术大学\"的摄像头数量。"
    },
    {
        "query": "最近一个月内发生了哪些异常行为？",
        "script": "```sql\nselect 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) <30 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 异常行为表.moment desc limit 1000;\n```\n这个SQL查询语句的目的是为了从数据库中获取过去一个月内发生的异常行为数据。具体来说，它从一个名为d_abnormal_behavior的异常行为表、一个名为s_camera的摄像头表、一个名为s_room的房间表、一个名为s_building的楼栋表、一个名为s_region的区域表以及一个名为t_abnormal_type的异常类型表获取信息。这些表之间通过摄像头ID（camera_id）、房间ID（pid）、楼栋ID（pid）、区域ID（pid）和异常类型ID（abnormal_type）进行连接。\n\n查询条件包括：现在时间（now()）与异常发生时间（moment）之间的差值小于30天；异常发生地点在高新校区（region_name等于'高新校区'）；单位的名称为中国科学技术大学（org_name等于'中国科学技术大学'）。查询结果按异常发生时间（moment）降序排列，且限制返回记录数为1000条。\n\n最终查询结果将包含摄像头编号（camera_id）、异常发生地点（room_name）、异常发生时刻（moment）以及异常类型（name）等信息。"
    },
    {
        "query": "图书教育中心哪些地方安装了摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从数据库中获取特定地点（这里是图书教育中心）的摄像头信息。下面是各部分解释：\n\n1. select: 从数据库中选择指定的列和行。\n2. 摄像头表.id as 摄像头编号: 从摄像头表中选取id作为摄像头编号。\n3. 摄像头表.ip as IP地址: 从摄像头表中选取ip作为摄像头的IP地址。\n4. 房间表.room_name as 安装位置: 从房间表中选取room_name作为摄像头安装的位置。\n5. from: 指定要查询的数据表。\n6. s_camera as 摄像头表: 摄像头表，存储摄像头的相关信息。\n7. join: 连接多个数据表以获取所需的信息。\n8. s_room as 房间表: 存储房间信息的表。\n9. on: 指定连接条件，即两个表的关联字段。\n10. 摄像头表.pid=房间表.id: 摄像头表中的pid字段与房间表中的id字段相同。\n11. s_building as 楼栋表: 存储楼栋信息的表。\n12. on 摄像头表.pid=楼栋表.id: 摄像头表中的pid字段与楼栋表中的id字段相同。\n13. s_region as 区域表: 存储区域信息的表。\n14. on 楼栋表.pid=区域表.id: 楼栋表中的pid字段与区域表中的id字段相同。\n15. s_organization as 单位表: 存储单位信息的表。\n16. on 区域表.pid=单位表.id: 区域表中的pid字段与单位表中的id字段相同。\n17. where: 设置查询条件，即筛选出满足条件的记录。\n18. 楼栋表.building_name='图书教育中心': 筛选出楼栋名称为“图书教育中心”的记录。\n19. and: 表示多个查询条件的逻辑关系，这里表示“且”的关系。\n20. 区域表.region_name='高新校区': 筛选出区域名称为“高新校区”的记录。\n21. and: 表示多个查询条件的逻辑关系，这里表示“且”的关系。\n22. 单位表.org_name='中国科学技术大学': 筛选出单位名称（或简称）为“中国科学技术大学”的记录。\n23. order by: 对查询结果按照指定字段进行排序。\n24. 摄像头表.id asc: 按照摄像头表中的id字段升序排列。\n25. limit: 限制查询结果的条数。\n26. 1000: 限制查询结果为1000条。"
    },
    {
        "query": "1号学科楼总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于查询1号学科楼安装了摄像头的数量。以下是各个子句的解析：\n\n1. `select count(*) as 摄像头数量`：选择计数函数count(*)作为结果，并将其命名为“摄像头数量”。\n2. `from s_camera as 摄像头表`：从s_camera（摄像头表）这张表开始查询。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接s_room（房间表），连接条件是摄像头表的pid字段等于房间表的id字段。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接s_building（楼栋表），连接条件是房间表的pid字段等于楼栋表的id字段。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接s_region（区域表），连接条件是楼栋表的pid字段等于区域表的id字段。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接s_organization（单位表），连接条件是区域表的pid字段等于单位表的id字段。\n7. `where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即楼栋名称必须为“1号学科楼”，区域名称为“高新校区”，单位名称必须为“中国科学技术大学”。"
    },
    {
        "query": "体育场人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中查询体育场的当前人数。下面是关于这个SQL语句的一些解释：\n\n1. select: 从数据库中选择数据；\n2. 人数分布表.num as 人数: 从\"人数分布表\"这张表的\"num\"字段选择数据，并将其命名为\"人数\"；\n3. FROM: 从哪个表中获取数据；\n4. a_people_spread_day_building AS 人数分布表: \"a_people_spread_day_building\"是表的名称，通过\"AS\"关键字将其命名为\"人数分布表\"；\n5. WHERE: 设置查询条件；\n6. TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()): 计算从当前时间到统计时间的小时数；\n7. < 5: 表示小时数小于5，即统计时间在5小时前；\n8. AND: 表示连接多个查询条件；\n9. building_name='体育场': 表示查询的体育场名称；\n10. region_name='高新校区': 表示查询的高新区；\n11. org_name='中国科学技术大学': 表示查询的中国科学技术大学；\n12. ORDER BY: 对查询结果进行排序；\n13. stat_time DESC: 按照统计时间降序排列；\n14. LIMIT: 限制查询结果的条数；\n15. 1: 表示只返回一条记录。"
    },
    {
        "query": "告诉我现在室外有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='高新校区室外' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL查询语句的目的是获取当前时间（即“now()”返回的值）在5小时以内的“高新校区室外”的人数数据，并按照统计时间降序排列，只返回第一条记录（即最新的数据）。\n\n以下是各子句的解释：\n\n1. `select 人数分布表.num as 人数`: 选择名为“num”的字段作为查询结果中的“人数”列。\n2. `from a_people_spread_day_building as 人数分布表`: 从名为“a_people_spread_day_building”的表中选择数据，并将该表简称为“人数分布表”。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 过滤条件之一，计算从统计数据的时间（\"stat_time\"字段）到当前时间的小时数差，并限制这个差小于5。\n4. `and 人数分布表.building_name='高新校区室外'`: 过滤条件之二，筛选出“building_name”字段值为“高新校区室外”的数据。\n5. `and 人数分布表.region_name='高新校区'`: 过滤条件之三，筛选出“region_name”字段值为“高新校区”的数据。\n6. `and 人数分布表.org_name='中国科学技术大学'`: 过滤条件之四，筛选出“org_name”字段值为“中国科学技术大学”的数据。\n7. `order by 人数分布表.stat_time desc`: 对查询结果按照“stat_time”字段的降序排序，即将最近的数据排在最前面。\n8. `limit 1`: 限制查询结果的条数为1，即只返回一条数据。"
    },
    {
        "query": "找出近期从学生食堂出发的10条行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一段用于查询近期从学生食堂出发的10条行人轨迹的SQL语句。以下是各子句的解释：\n\n1. select 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id：选择所需的字段进行输出，包括轨迹的开始和结束时间、虚拟人名和经过的摄像头ID。\n\n2. from a_people_trail as 行人轨迹表：指定行人轨迹数据的表名。\n\n3. join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id：连接摄像头表，根据开始摄像头的ID匹配两个表的记录。\n\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id：连接房间表，根据摄像头的项目ID（pid）匹配两个表的记录。\n\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：连接楼栋表，根据房间的项目ID（pid）匹配两个表的记录。\n\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id：连接区域表，根据楼栋的项目ID（pid）匹配两个表的记录。\n\n7. join s_organization as 单位表 on 区域表.pid=单位表.id：连接单位表，根据区域的项目ID（pid）匹配两个表的记录。\n\n8. where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂'：设置筛选条件，只查询满足特定区域、单位和学校名称的数据。\n\n9. order by 行人轨迹表.start_time desc：按照轨迹的起始时间降序排列结果集，即最新的轨迹排在最前面。\n\n10. limit 10：限制返回的结果集数量，这里仅返回最近的10条行人轨迹。"
    },
    {
        "query": "空房间数量",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'      and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一个SQL查询语句，用于计算特定条件下的“有人的房间数量”。以下是各部分的具体解释：\n\n1. `count(房间表.room_name)`: 计算房间表（s_room）中房间名称的计数，即房间数量。\n2. `from s_camera as 摄像头表`: 指定从s_camera表中获取数据，并为其分配一个别名“摄像头表”。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头表（s_camera）和房间表（s_room）之间的pid字段连接两个表。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间表（s_room）和楼栋表（s_building）之间的pid字段连接两个表。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋表（s_building）和区域表（s_region）之间的pid字段连接两个表。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域表（s_region）和单位表（s_organization）之间的pid字段连接两个表。\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设定筛选条件，只选择区域名称为“高新校区”且单位名称（org_name）为“中国科学技术大学”的数据。\n8. `and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 进一步设定筛选条件，排除当前时刻与人员信息表（d_people）中的moment时间戳相差不到10分钟的所有摄像头的数据。\n\n综上，这个查询语句的目的是计算“高新校区”的“中国科学技术大学”内，所有房间里没有人（即无人使用摄像头）的数量。"
    },
    {
        "query": "告诉我现在3号学生公寓有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='3号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前（时间距离现在不超过5小时）在“3号学生公寓”的人数信息。下面是对这个查询语句的详细解析：\n\n1. `select 人数分布表.num as 人数`：选择字段“num”作为结果集的字段名“人数”；\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表名为“a_people_spread_day_building”，并为其分配一个别名“人数分布表”；\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置条件，限制返回的数据是最近5小时内的；\n4. `and 人数分布表.building_name='3号学生公寓'`：进一步限制，只返回“3号学生公寓”的数据；\n5. `and 人数分布表.region_name='高新校区'`：设置条件，只返回“高新校区”的数据；\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置条件，只返回“中国科学技术大学”的数据；\n7. `order by 人数分布表.stat_time desc`：按照统计时间降序排列数据；\n8. `limit 1`：限制返回的数据条数为1条。"
    },
    {
        "query": "体育场安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算在某个特定条件下的摄像头的数量。以下是各个部分的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数`count(*)`来计算满足条件的摄像头的总数，并将其命名为\"摄像头数量\"。\n2. `from s_camera as 摄像头表`：指定数据源是名为\"s_camera\"的摄像头表。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，连接条件是摄像头表的`pid`字段等于房间表的`id`字段。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接摄像头表、房间表和楼栋表，连接条件是房间表的`pid`字段等于楼栋表的`id`字段。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接摄像头表、房间表、楼栋表和区域表，连接条件是楼栋表的`pid`字段等于区域表的`id`字段。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接摄像头表、房间表、楼栋表、区域表和单位表，连接条件是区域表的`pid`字段等于单位表的`id`字段。\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即要求楼栋表的建筑物名称为\"体育场\"，区域表的区域名称为\"高新校区\"，单位表的单位名称（组织名）为\"中国科学技术大学\"。\n\n这段查询语句的目的是计算在特定的地理位置和单位条件下，体育场的摄像头数量。"
    },
    {
        "query": "图书教育中心每天最少有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于获取\"图书教育中心\"在最近30天内每天的最少人数。\n\n以下是各个部分的具体解释：\n\n1. `SELECT min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数`：选择统计时间和平均人数作为输出结果。其中，`min(人数分布表.stat_time)`表示最近一天，`round(min(人数分布表.num))`表示这一天的人数。\n\n2. `FROM a_people_spread_day_building as 人数分布表`：从名为\"a_people_spread_day_building\"的表格（这里简称为“人数分布表”）中获取数据。\n\n3. `WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：设置查询条件。这些条件分别表示：建筑名称为\"图书教育中心\"，统计时间与当前时间的差值小于30天，所在地区为\"高新校区\"，所在单位为\"中国科学技术大学\"。\n\n4. `group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc`：按照统计日期对数据进行分组，并按统计时间的最小值（即最早的一天）进行升序排列。\n\n这个查询语句的目的是找出最近30天内，\"图书教育中心\"每一天的最少人数。"
    },
    {
        "query": "近期识别到多少未背包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n该SQL语句用于查询并统计当前时刻（now()）过去五分钟内在指定区域的未背包行人数量。具体解释如下：\n\n1. `select count(*) as 背双肩包的人数`：选择计数(*)作为“背双肩包的人数”列；\n2. `from d_people as 人员表`：从\"d_people\"表开始查询，并将其简写为\"人员表\"；\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接\"s_camera\"表，连接条件为\"人员表\"中的\"camera_id\"与\"摄像头表\"中的\"id\"相等；\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接\"s_room\"表，连接条件为\"摄像头表\"中的\"pid\"与\"房间表\"中的\"id\"相等；\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接\"s_building\"表，连接条件为\"房间表\"中的\"pid\"与\"楼栋表\"中的\"id\"相等；\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接\"s_region\"表，连接条件为\"楼栋表\"中的\"pid\"与\"区域表\"中的\"id\"相等；\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接\"s_organization\"表，连接条件为\"区域表\"中的\"pid\"与\"单位表\"中的\"id\"相等；\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`：连接\"t_bag\"表，连接条件为\"人员表\"中的\"bag\"与\"背包维表\"中的\"id\"相等；\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：筛选出距离当前时刻（now()）过去五分钟内的数据；\n10. `and 背包维表.name='未背包'`：筛选出\"背包维表\"中名称为\"未背包\"的数据；\n11. `and 区域表.region_name='高新校区'`：筛选出位于\"高新校区\"的数据；\n12. `and 单位表.org_name='中国科学技术大学'`：筛选出隶属于\"中国科学技术大学\"的数据。"
    },
    {
        "query": "体育馆的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育馆' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个 SQL（结构化查询语言）查询语句，用于从数据库中获取特定条件下的数据。以下是该查询的分解和解释：\n\n1. select 人数分布表.num as 人数: 从`人数分布表`这个表中，选择名为`num`的字段作为`人数`。\n2. from a_people_spread_day_building as 人数分布表: 指定数据来源是`a_people_spread_day_building`表，并为其分配别名`人数分布表`。\n3. WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5: 这个条件用于筛选出最近5小时内的数据。`TIMESTAMPDIFF`函数计算两个时间之间的差值（以小时为单位），然后与5进行比较。\n4. and 人数分布表.building_name='体育馆': 这个条件限制结果只包含`building_name`字段值为`'体育馆'`的数据。\n5. and 人数分布表.region_name='高新校区': 这个条件限制结果只包含`region_name`字段值为`'高新校区'`的数据。\n6. and 人数分布表.org_name='中国科学技术大学': 这个条件限制结果只包含`org_name`字段值为`'中国科学技术大学'`的数据。\n7. order by 人数分布表.stat_time desc: 这个子句按`stat_time`字段的降序排列结果（即最新的数据排在最前面）。\n8. limit 1: 这个子句限制了结果集的大小，仅返回一条记录（这是由于`order by`子句导致的，因为排序后只有一条记录满足其他条件）。"
    },
    {
        "query": "最近识别到的人员中，不同朝向分别有多少人？",
        "script": "```sql\nselect 朝向维表.name as 朝向, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 朝向维表.name  order by 朝向维表.name asc;\n```\n这是一段SQL查询语句，用于计算在特定时间范围内（例如过去五分钟），位于指定地区（如\"高新校区\"）的某个单位（如\"中国科学技术大学\"）的人员中，不同朝向的人数。\n\n1. select 朝向维表.name as 朝向, count(*) as 人数：选择查询结果中的朝向和人数。\n\n2. from d_people as 人员表：从人员表中获取数据。\n\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id：将摄像头表与人员表连接，依据条件是摄像头表中的ID等于人员表中的camera_id。\n\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id：将房间表与摄像头表连接，依据条件是摄像头表的PID等于房间表的ID。\n\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：将楼栋表与房间表连接，依据条件是房间表的PID等于楼栋表的ID。\n\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id：将区域表与楼栋表连接，依据条件是楼栋表的PID等于区域表的ID。\n\n7. join s_organization as 单位表 on 区域表.pid=单位表.id：将单位表与区域表连接，依据条件是区域表的PID等于单位表的ID。\n\n8. join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id：将朝向维表与人员表连接，依据条件是人员表的orientation等于朝向维表的ID。\n\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5：设置查询条件，限制只查询过去五分钟内的数据。\n\n10. and 区域表.region_name='高新校区'：设置查询条件，限制只查询位于\"高新校区\"的数据。\n\n11. and 单位表.org_name='中国科学技术大学'：设置查询条件，限制只查询属于\"中国科学技术大学\"的数据。\n\n12. group by 朝向维表.name：对查询结果按照朝向进行分组。\n\n13. order by 朝向维表.name asc：对查询结果按照朝向进行排序，从小到大（ASC）。"
    },
    {
        "query": "信智楼最近5分钟内识别到的人员中，不同朝向的人数是多少？",
        "script": "```sql\nselect 朝向维表.name as 朝向, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 朝向维表.name  order by 朝向维表.name asc;\n```\n这是一个SQL查询语句，用于从多个表中获取特定条件下的信息。下面是该语句的各个部分的详细解释：\n\n1. `d_people AS 人员表`: 定义一个名为`人员表`的临时表，其数据来源于`d_people`表。\n\n2. `s_camera AS 摄像头表`: 定义一个名为`摄像头表`的临时表，其数据来源于`s_camera`表。\n\n3. `s_room AS 房间表`: 定义一个名为`房间表`的临时表，其数据来源于`s_room`表。\n\n4. `s_building AS 楼栋表`: 定义一个名为`楼栋表`的临时表，其数据来源于`s_building`表。\n\n5. `s_region AS 区域表`: 定义一个名为`区域表`的临时表，其数据来源于`s_region`表。\n\n6. `s_organization AS 单位表`: 定义一个名为`单位表`的临时表，其数据来源于`s_organization`表。\n\n7. `t_orientation AS 朝向维表`: 定义一个名为`朝向维表`的临时表，其数据来源于`t_orientation`表。\n\n8. `WHERE`子句：设置筛选条件，只选择最近5分钟内的记录（通过`TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`实现），并且位于“高新校区”、属于“中国科学技术大学”以及“信智楼”范围内的人员。\n\n9. `GROUP BY`子句：按照`朝向维表.name`进行分组统计，计算每个朝向的人员数量。\n\n10. `ORDER BY`子句：按朝向维表的名称进行升序排序。\n\n整个语句的目的是查询信智楼在最近5分钟内识别到的人员的朝向分布情况。"
    },
    {
        "query": "图书教育中心哪些地方安装了监控",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这个SQL语句是一个复杂的连接查询，用于从多个表中获取摄像头的信息，包括摄像头编号、IP地址和安装位置等。以下是各子句的解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：这是选择要查询的列，包括摄像头编号、IP地址和安装位置。\n\n2. `from s_camera as 摄像头表`：指定查询的主表，即摄像头信息表（s_camera）。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是一个连接子句，将摄像头表与房间表通过摄像头对应的房间ID（摄像头表中的pid字段）连接起来。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这也是一个连接子句，将房间表与楼栋表通过房间对应的楼栋ID（房间表中的pid字段）连接起来。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这同样是一个连接子句，将楼栋表与区域表通过楼栋对应的区域ID（楼栋表中的pid字段）连接起来。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这又是一个连接子句，将区域表与单位表通过区域对应的单位ID（区域表中的pid字段）连接起来。\n\n7. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是一个条件子句，只返回满足这三个条件的记录，即建筑名为“图书教育中心”，位于“高新校区”，属于“中国科学技术大学”的摄像头信息。\n\n8. `order by 摄像头表.id asc limit 1000`：这是一个排序和限制子句，按照摄像头编号（摄像头表中的id字段）升序排列，并限制结果集的最大记录数为1000条。"
    },
    {
        "query": "信智楼最近5分钟内识别到的人员中，不同下衣风格的人数是多少？",
        "script": "```sql\nselect substring(人员表.lower,6) as 下衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.lower  order by 人员表.lower asc;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。下面我来解释一下每个部分的功能：\n\n1. `select substring(人员表.lower,6) as 下衣风格, count(*) as 人数`：这部分是查询的列，`substring(人员表.lower,6)`是从`人员表`的`lower`字段中提取字符串（即下衣风格的描述），`count(*)`则是计算满足条件的记录数。\n\n2. `from d_people as 人员表`：这是查询的数据来源，`d_people`是人员表，存储每个人的信息。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：这是联接（join）摄像头表的条件，通过`camera_id`将摄像头和人员信息关联起来。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是联接（join）房间表的条件，通过`pid`将摄像头所在的房间和人员信息关联起来。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是联接（join）楼栋表的条件，通过`pid`将房间所在的楼栋和人员信息关联起来。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是联接（join）区域表的条件，通过`pid`将楼栋所在的区域和人员信息关联起来。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是联接（join）单位表的条件，通过`pid`将区域所属的单位（如学校、公司等）和人员信息关联起来。\n\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`：这是查询的条件，要求时间差（当前时间减去人员出现的时间）小于5分钟，并且区域名、单位名和楼栋名都符合给定的条件。\n\n9. `group by 人员表.lower  order by 人员表.lower asc;`：这是分组（group by）和排序（order by）的指令，按照下衣风格的描述进行分组和升序排序。"
    },
    {
        "query": "最近一个月内发生了哪些异常事件？",
        "script": "```sql\nselect 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) <30 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 异常行为表.moment desc limit 1000;\n```\n这个SQL查询语句的目的是为了从数据库中获取近一个月内发生的异常事件信息。具体来说，它从一个名为d_abnormal_behavior的异常行为表、一个名为s_camera的摄像头表、一个名为s_room的房间表、一个名为s_building的楼栋表、一个名为s_region的区域表以及一个名为t_abnormal_type的异常类型表获取数据。这些表通过摄像头ID（camera_id）和异常类型（abnormal_type）进行连接，以便将摄像头信息与异常事件关联起来。\n\n查询结果包括摄像头编号（camera_id）、异常发生地点（room_name）、异常发生时刻（moment）以及异常类型（name）。其中，“DATEDIFF(now(), 异常行为表.moment) <30”这一条件限制了查询结果的日期范围，即只返回近一个月内的异常事件；而“区域表.region_name='高新校区'”和“单位表.org_name='中国科学技术大学'”这两个条件则限制了查询结果的地域和单位范围。最后，查询结果按照异常发生时刻（moment）降序排列，并限制返回记录数为1000条。"
    },
    {
        "query": "2号学科楼安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算\"2号学科楼\"安装摄像头的数量。以下是各个子句的解释：\n\n1. select count(*) as 摄像头数量：选择计数函数（count）来计算摄像头的总数，并为其起一个别名“摄像头数量”。\n\n2. from s_camera as 摄像头表：指定摄像头信息的数据表，这里将其简称为“摄像头表”。\n\n3. join s_room as 房间表：将“摄像头表”与“房间表”进行连接，依据条件是摄像头表的pid（设备ID）等于房间表的id（编号）。\n\n4. join s_building as 楼栋表：将“房间表”与“楼栋表”进行连接，依据条件是房间表的pid（设备ID）等于楼栋表的id（编号）。\n\n5. join s_region as 区域表：将“楼栋表”与“区域表”进行连接，依据条件是楼栋表的pid（设备ID）等于区域表的id（编号）。\n\n6. join s_organization as 单位表：将“区域表”与“单位表”进行连接，依据条件是区域表的pid（设备ID）等于单位表的id（编号）。\n\n7. where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' :定义查询条件，即只返回满足特定条件的数据，这里是\"2号学科楼\"、\"高新校区\"和\"中国科学技术大学\"。\n\n综合以上信息，这个SQL语句会计算出位于\"2号学科楼\"且属于\"高新校区\"的\"中国科学技术大学\"的摄像头数量。"
    },
    {
        "query": "信智楼有多少行人拿手提包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段 SQL 语言，用于查询某个特定地点（这里是“信智楼”）在一定时间内（比如最近五分钟）内携带手提包的人数。具体来说：\n\n1. `SELECT COUNT(*) AS 背双肩包的人数`：选择计数函数计算满足条件的行数，并命名为\"背双肩包的人数\"。\n\n2. `FROM d_people AS 人员表`：从 \"d_people\" 这个表格作为基础数据源，并将该表格命名为\"人员表\"。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`：将 \"s_camera\" 表格与 \"人员表\" 进行连接，连接条件是 \"人员表\" 中的 \"camera_id\" 等于 \"摄像头表\" 中的 \"id\"。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`：将 \"s_room\" 表格与 \"摄像头表\" 进行连接，连接条件是 \"摄像头表\" 中的 \"pid\" 等于 \"房间表\" 中的 \"id\"。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`：将 \"s_building\" 表格与 \"房间表\" 进行连接，连接条件是 \"房间表\" 中的 \"pid\" 等于 \"楼栋表\" 中的 \"id\"。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`：将 \"s_region\" 表格与 \"楼栋表\" 进行连接，连接条件是 \"楼栋表\" 中的 \"pid\" 等于 \"区域表\" 中的 \"id\"。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`：将 \"s_organization\" 表格与 \"区域表\" 进行连接，连接条件是 \"区域表\" 中的 \"pid\" 等于 \"单位表\" 中的 \"id\"。\n\n8. `JOIN t_bag AS 背包维表 ON 人员表.bag = 背包维表.id`：将 \"t_bag\" 表格与 \"人员表\" 进行连接，连接条件是 \"人员表\" 中的 \"bag\" 等于 \"背包维表\" 中的 \"id\"。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, NOW()) < 5 AND 背包维表.name = '手提包' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学' AND 楼栋表.building_name = '信智楼'`：这是查询的过滤条件，限制结果为最近五分钟内、在“高新校区”的“中国科学技术大学”的“信智楼”中，使用手提包的人员数量。"
    },
    {
        "query": "异常行为类型数量分布",
        "script": "```sql\nselect 异常类型表.name as 异常行为类型, count(*) as 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by 异常类型表.name asc;\n```\n这个SQL查询语句的目的是获取特定区域内（这里的高新校区）、特定单位（中国科学技术大学）内过去7天内发生的所有异常行为及其类型和数量。\n\n1. `select`: 选择要查询的列，即异常行为类型和异常行为数量；\n2. `from`: 指定要查询的数据来源，这里是四个关联表（d_abnormal_behavior、s_camera、s_room、s_building、s_region、s_organization、t_abnormal_type）；\n3. `join`: 连接这些表以获取所需数据。具体来说，通过异常行为表的camera_id与摄像头表的id进行连接，然后摄像头表的pid分别与房间表、楼栋表、区域表和单位表的id进行连接；\n4. `where`: 设置查询条件，包括时间范围（过去7天）、区域（高新校区）和单位（中国科学技术大学）；\n5. `group by`: 对异常行为类型进行分组，以便计算每种类型的异常行为数量；\n6. `order by`: 按照异常行为类型的名称进行升序排序。"
    },
    {
        "query": "给出行政与师生服务中心的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从数据库中获取满足特定条件的摄像头数量。以下是各子句和条件的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数（count）作为聚合函数，对满足条件的所有行进行计算。这里的*表示选择全部列。这里将返回的结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：指定查询的主表为s_camera表，并将该表简称为摄像头表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过摄像头表的pid字段（假设是房间ID）连接s_room表（假设是房间信息表）。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：通过房间表的pid字段（假设是楼栋ID）连接s_building表（假设是楼栋信息表）。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过楼栋表的pid字段（假设是区域ID）连接s_region表（假设是区域信息表）。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：通过区域表的pid字段（假设是单位ID）连接s_organization表（假设是单位信息表）。\n\n7. `where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置筛选条件，即只有当楼栋名称为“行政与师生服务中心”，区域名称为“高新校区”，且单位名称为“中国科学技术大学”时，才返回相关结果。"
    },
    {
        "query": "有多少人手里没拿东西？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于统计特定条件下的人员数量。以下是各子句和连接表的说明：\n\n1. `select count(*) as 手里拿东西的人数`：计算满足条件的总人数。\n2. `from d_people as 人员表`：定义人员表，数据来自d_people表。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接摄像头表，通过摄像头ID将人员与摄像头关联起来。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表，通过房间ID将摄像头与房间关联起来。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表，通过楼栋ID将房间与楼栋关联起来。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表，通过区域ID将楼栋与区域关联起来。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表，通过单位ID将区域与单位关联起来。\n8. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`：连接持物维表，通过持物ID将人员与持有的物品关联起来。\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：限制查询结果的时间范围，只包括过去5分钟内的数据。\n10. `and 持物维表.name='未持物'`：筛选出没有拿东西的人员（即持有物品的名称是\"未持物\"）。\n11. `and 区域表.region_name='高新校区'`：限制查询结果的区域范围，只包括高新校区的数据。\n12. `and 单位表.org_name='中国科学技术大学'`：限制查询结果的单位范围，只包括中国科学技术大学的数据。"
    },
    {
        "query": "整个校区安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算整个校区的摄像头数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数（count）计算摄像头的数量。\n\n2. `from s_camera as 摄像头表`: 从名为s_camera的数据表中获取数据，这个表存储了摄像头的相关信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接s_room数据表（存储房间信息），连接条件是摄像头表的pid与房间表的id相等。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接s_building数据表（存储楼栋信息），连接条件是房间表的pid与楼栋表的id相等。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接s_region数据表（存储区域信息），连接条件是楼栋表的pid与区域表的id相等。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接s_organization数据表（存储单位信息），连接条件是区域表的pid与单位表的id相等。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只返回满足“高新校区”和“中国科学技术大学”这两个条件的数据。\n\n8. `as 摄像头表, 房间表, 楼栋表, 区域表, 单位表`: 为每个联接的数据表指定别名，以便在查询语句中方便引用。\n\n综上所述，该SQL查询语句将计算整个高新校区的中国科学技术大学安装的摄像头数量。"
    },
    {
        "query": "图书馆监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于统计图书馆的监控摄像头的数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数（count）计算摄像头的数量，并将结果命名为“摄像头数量”。\n2. `from s_camera as 摄像头表`：指定数据来源为s_camera表，并为其起别名“摄像头表”以便后续使用。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接s_room表（别名：房间表），连接条件是摄像头表的pid与房间表的id相等。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接s_building表（别名：楼栋表），连接条件是房间表的pid与楼栋表的id相等。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接s_region表（别名：区域表），连接条件是楼栋表的pid与区域表的id相等。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接s_organization表（别名：单位表），连接条件是区域表的pid与单位表的id相等。\n7. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设定查询条件，即要求楼栋名称为“图书教育中心”，区域名称为“高新校区”，单位名称为“中国科学技术大学”。\n\n该查询语句的目的是找出满足上述条件的所有摄像头数量，即位于“图书教育中心”、“高新校区”的“中国科学技术大学”内的监控摄像头的总数。"
    },
    {
        "query": "不同上衣风格分别有多少人？",
        "script": "```sql\nselect substring(人员表.upper,6) as 上衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.upper  order by 人员表.upper asc;\n```\n这个SQL语句用于查询和统计不同上衣风格的在校人员数量。以下是各子句的功能解释：\n\n1. `select substring(人员表.upper,6) as 上衣风格, count(*) as 人数`：选择子句，用于提取并计算上衣风格的人数。`substring(人员表.upper,6)`表示从字符串`upper`中提取从第6个字符开始的子字符串作为上衣风格；`count(*)`是聚合函数，对每个上衣风格的总人数进行计数。\n\n2. `from d_people as 人员表`：指定数据来源，即人员表（d_people）。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：联接摄像头表（s_camera）与人员表，条件是摄像头ID等于摄像头表中的ID。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：联接房间表（s_room）与摄像头表，条件是摄像头所属的房间ID等于房间表中的ID。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：联接楼栋表（s_building）与房间表，条件是房间所属的楼栋ID等于楼栋表中的ID。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：联接区域表（s_region）与楼栋表，条件是楼栋所属的区域ID等于区域表中的ID。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：联接单位表（s_organization）与区域表，条件是区域所属的单位ID等于单位表中的ID。\n\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：设置时间过滤条件，即距离当前时间5分钟以内的数据。\n\n9. `and 区域表.region_name='高新校区'`：设置区域过滤条件，即仅查询位于“高新校区”的数据。\n\n10. `and 单位表.org_name='中国科学技术大学'`：设置单位过滤条件，即仅查询属于“中国科学技术大学”的数据。\n\n11. `group by 人员表.upper`：按上衣风格进行分组，以便对每个上衣风格的人数进行计数。\n\n12. `order by 人员表.upper asc`：对查询结果按照上衣风格进行升序排序。"
    },
    {
        "query": "信智楼最近5分钟内识别到的人员中，不同年龄段的人数是多少？",
        "script": "```sql\nselect case 人员表.age_group when 'AgeLess18' then '小于18岁' when 'Age18-60' then '18-60岁' else '大于60岁' end as '年龄组', count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.age_group  order by 人员表.age_group asc;\n```\n这是一个SQL查询语句，用于查询信智楼在最近5分钟内识别到的不同年龄段的人员数量。这个查询涉及到多个表（d_people、s_camera、s_room、s_building、s_region和s_organization）的连接和数据整合。下面是对这个查询语句的解释：\n\n1. `select`：选择要返回的列。在这个查询中，选择了年龄分组（age_group）和人数（count(*)）。\n\n2. `case 人员表.age_group`：根据人员表的age_group字段进行条件判断。如果age_group等于'AgeLess18'，则返回'小于18岁'；如果等于'Age18-60'，则返回'18-60岁'；否则返回'大于60岁'。\n\n3. `when`：定义了与case关键字关联的条件。\n\n4. `end as '年龄组'`：结束case语句，并将结果命名为'年龄组'。\n\n5. `count(*) as 人数`：计算每个年龄组的人数。\n\n6. `from d_people as 人员表`：指定查询的源表，即人员表。\n\n7. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：将摄像头表与人员表通过摄像头ID（camera_id）进行内连接。\n\n8. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将房间表与摄像头表通过房间ID（pid）进行内连接。\n\n9. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将楼栋表与房间表通过房间ID（pid）进行内连接。\n\n10. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将区域表与楼栋表通过房间ID（pid）进行内连接。\n\n11. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将单位表与区域表通过区域ID（pid）进行内连接。\n\n12. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`：设置查询条件，包括时间范围（最近5分钟）、区域名称（高新校区）、单位名称（中国科学技术大学）和楼栋名称（信智楼）。\n\n13. `group by 人员表.age_group`：按照年龄分组对数据进行分组，以便计算每组的人数。\n\n14. `order by 人员表.age_group asc`：按照年龄分组对结果进行排序，升序排列。"
    },
    {
        "query": "异常事件数量分布",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 楼栋表.building_name  order by count(*) desc;\n```\n这是一个SQL查询语句，用于统计和分析异常行为发生的数量和分布情况。以下是各部分解释：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) 异常行为数量`：选择建筑名称和该建筑的异常行为数量作为查询结果；\n\n2. `from d_abnormal_behavior as 异常行为表`：数据源是异常行为表（d_abnormal_behavior）；\n\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`：连接摄像头表（s_camera），根据摄像头的ID匹配异常行为对应的摄像头；\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表（s_room），根据摄像头的父级ID（pid）匹配对应楼层或区域的房间；\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表（s_building），根据房间的父级ID（pid）匹配对应楼栋；\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表（s_region），根据楼栋的父级ID（pid）匹配对应区域的楼栋；\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表（s_organization），根据区域的父级ID（pid）匹配对应单位的区域；\n\n8. `where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，筛选出最近7天内、发生在高新校区的中国科学技术大学的异常行为；\n\n9. `group by 楼栋表.building_name`：按楼栋名称进行分组，计算每个楼栋的异常行为数量；\n\n10. `order by count(*) desc`：按照异常行为数量降序排列，即从发生异常行为最多的楼栋开始展示。"
    },
    {
        "query": "最不高发的异常行为是哪些类型？",
        "script": "```sql\nselect 异常行为类型表.name from t_abnormal_type as 异常行为类型表 where name not in( select 异常类型表.name as 异常行为类型 from d_abnormal_behavior as 异常行为表 join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by count(*) desc  ) limit 10;\n```\n这个SQL语句是用于查询在指定区域和单位的最不常见的异常行为类型。首先，它通过JOIN操作将d_abnormal_behavior（异常行为表）与s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）进行连接，以获取每个异常行为的详细信息，包括发生的摄像头ID、房间号、楼栋号、区域名和所在单位名。然后，它将t_abnormal_type（异常行为类型表）与d_abnormal_behavior（异常行为表）进行连接，以获取每个异常行为的类型名称。\n\n接下来，它通过WHERE子句设置查询条件，即只考虑发生在名为“高新校区”的区域且所在单位名为“中国科学技术大学”的异常行为。然后，它通过GROUP BY子句按异常类型对表进行分组，并使用ORDER BY子句按照计数降序排列每个异常类型的出现次数。最后，通过IN子查询，它找到在这些条件下最不常见的异常行为类型（即出现次数最少的类型），并通过LIMIT子句限制结果集的大小为10条记录。"
    },
    {
        "query": "给出体育馆的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 查询语句，用于计算体育馆的摄像头数量。以下是各部分解释：\n\n1. `select count(*) as 摄像头数量`：选择函数 count(*)，返回满足条件的摄像头总数，并将结果命名为 \"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`：指定要查询的摄像头数据所在的表，这里假设名为 \"s_camera\"，并为其起别名 \"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表（摄像头表）和房间表（房间表），连接条件是摄像头表的 pid 等于房间表的 id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，连接条件是房间表的 pid 等于楼栋表的 id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，连接条件是楼栋表的 pid 等于区域表的 id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，连接条件是区域表的 pid 等于单位表的 id。\n\n7. `where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即楼栋名称必须为 \"体育馆\"，区域名称必须为 \"高新校区\"，单位名称必须为 \"中国科学技术大学\"。\n\n8. `;`：SQL 语句结束标志。"
    },
    {
        "query": "办公楼安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算某个特定办公楼（在这里是“行政办公楼”）内的摄像头数量。以下是各子句的解读：\n\n1. select count(*) as 摄像头数量: 从结果集中选择摄像头的数量。count(*)表示统计满足条件的摄像头数目。\n2. from s_camera as 摄像头表: 指定摄像头的数据表名为s_camera，并将此表简写为\"摄像头表\"。\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接摄像头表与房间表，依据条件为摄像头表中的pid（可能是设备ID）等于房间表中的id。\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接房间表与楼栋表，依据条件为房间表中的pid等于楼栋表中的id。\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接楼栋表与区域表，依据条件为楼栋表中的pid等于区域表中的id。\n6. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接区域表与单位表，依据条件为区域表中的pid等于单位表中的id。\n7. where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学': 根据指定的名称筛选出对应的办公楼、校区和单位。\n\n该查询将返回满足条件的摄像头的数量，即位于\"行政办公楼\"内、位于\"高新校区\"且属于\"中国科学技术大学\"的摄像头总数。"
    },
    {
        "query": "室外人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='高新校区室外' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中检索特定条件下的信息。以下是各部分的主要解释：\n\n1. `SELECT 人数分布表.num AS 人数`: 从\"人数分布表\"的\"num\"字段中选择数据，并将它命名为\"人数\"。\n\n2. `FROM a_people_spread_day_building as 人数分布表`: 从名为\"a_people_spread_day_building\"的表中检索数据，并将其重命名为\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这个子句定义了一个过滤条件，即从\"人数分布表\"的\"stat_time\"字段到当前时间的小时差小于5小时。\n\n4. `AND 人数分布表.building_name='高新校区室外' AND 人数分布表.region_name='高新校区' AND 人数分布表.org_name='中国科学技术大学'`: 这三个条件共同定义了筛选出的记录必须满足的条件，即建筑物名称必须为\"高新校区室外\"，地区名称为\"高新校区\"，机构名称为\"中国科学技术大学\"。\n\n5. `ORDER BY 人数分布表.stat_time DESC`: 对结果按照\"人数分布表\"的\"stat_time\"字段降序排列。\n\n6. `LIMIT 1`: 限制返回的结果集只包含一条记录。"
    },
    {
        "query": "找出镜头中没有人的室外摄像头的编号",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中查找并筛选出一些特定条件的数据。以下是各个部分的解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`: 这部分是选择需要返回的字段，包括摄像头编号、安装位置和所属大楼。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid=单位表.id`: 这是连接四个表的连接子句，将这四个表根据各自的主键和外键关联起来。\n\n3. `where 摄像头表.inhouse = 0 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 这部分是条件过滤子句，表示只选取室内摄像头（`inhouse`字段值为0）且不在最近10分钟内有人员出现的摄像头（通过`d_people`表中的`camera_id`和摄像头编号进行对比）。\n\n4. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是进一步的条件过滤子句，表示仅选取位于“高新校区”且属于“中国科学技术大学”的摄像头。\n\n5. `order by 摄像头表.id asc limit 1000`: 这部分是排序和限制子句，表示按照摄像头编号从小到大排序，且仅返回前1000条结果。\n\n综上，这个SQL查询语句的目的是找出镜头中没有人的室外摄像头的编号及其相关信息。"
    },
    {
        "query": "现在有多少人在师生活动中心？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='师生活动中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中获取特定时间范围内师生活动中心的人数信息。这个语句的含义如下：\n\n1. `select 人数分布表.num as 人数`：选择 `num` 列作为结果中的 \"人数\" 字段。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表名为 `a_people_spread_day_building`，并将其简称为 \"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：限制查询的数据范围在近5小时以内（具体时间取决于执行SQL时的时间）。\n\n4. `and 人数分布表.building_name='师生活动中心'`：筛选出 `building_name`（建筑名称）等于 \"师生活动中心\" 的记录。\n\n5. `and 人数分布表.region_name='高新校区'`：筛选出 `region_name`（区域名称）等于 \"高新校区\" 的记录。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：筛选出 `org_name`（组织名称）等于 \"中国科学技术大学\" 的记录。\n\n7. `order by 人数分布表.stat_time desc`：按 `stat_time`（统计时间）降序排列数据。\n\n8. `limit 1`：返回符合条件的记录数量为1条。"
    },
    {
        "query": "教师食堂的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一段SQL查询语句，用于查询某个特定时间范围内“教工食堂”在“高新校区”的“中国科学技术大学”的人数。具体解析如下：\n\n1. `select 人数分布表.num as 人数`: 选择`人数分布表`中名为`num`的列作为结果中的`人数`字段。\n\n2. `from a_people_spread_day_building as 人数分布表`: 从名为`a_people_spread_day_building`的表格（在此称为`人数分布表`）获取数据。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 限制条件之一，表示只查询距离现在时间5小时以内的记录。\n\n4. `and 人数分布表.building_name='教工食堂'`: 限制条件之二，表示只查询食堂名为“教工食堂”的数据。\n\n5. `and 人数分布表.region_name='高新校区'`: 限制条件之三，表示只查询位于“高新校区”的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 限制条件之四，表示只查询属于“中国科学技术大学”的数据。\n\n7. `order by 人数分布表.stat_time desc`: 对查询结果按照统计时间进行降序排序。\n\n8. `limit 1`: 对查询结果进行限制，只返回一条记录。"
    },
    {
        "query": "操场人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定时间段内某个地点的人数信息。以下是各部分的解释：\n\n1. `select 人数分布表.num as 人数`：选择字段，即选择要查询的列。这里选择的是`num`字段并将其重命名为`人数`。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定查询的表，这里是`a_people_spread_day_building`表，同时为其取别名`人数分布表`，以便在后续查询中使用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置查询条件。这个条件表示查询的数据是最近5小时内的。`TIMESTAMPDIFF()`函数用于计算两个时间之间的差值。\n\n4. `and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：进一步限制查询条件，仅查询特定地点（体育场）、区域（高新校区）和组织（中国科学技术大学）的数据。\n\n5. `order by 人数分布表.stat_time desc`：按照统计时间的降序排列查询结果，即最新的时间在最前面。\n\n6. `limit 1`：限制查询结果为一条记录，即只返回最新的统计数据。"
    },
    {
        "query": "目前没人的房间有多少？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'      and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这个SQL语句的目的是计算某个特定区域的某单位的无人的房间数。以下是详细解析：\n\n1. `select count(房间表.room_name)`: 这行代码用于统计房间总数，`room_name`是表示房间名称的字段。\n\n2. `from s_camera as 摄像头表`: 指定数据来源，即摄像头信息数据表（s_camera）。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这句代码用于将摄像头表和房间表进行联接操作，连接条件是摄像头的pid与房间的id相等。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将楼栋信息表（s_building）也联接到查询结果中，连接条件是房间的pid等于楼栋的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将区域信息表（s_region）联接到查询结果中，连接条件是楼栋的pid等于区域的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将单位信息表（s_organization）联接到查询结果中，连接条件是区域的pid等于单位的id。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这两个条件用来筛选出位于“高新校区”并且隶属于“中国科学技术大学”的数据。\n\n8. `and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 这个条件用于排除当前有人正在使用的摄像头。这里通过子查询获取到所有在近10分钟内有过活动记录的摄像头ID，然后在外层查询中排除这些ID对应的摄像头，从而得到无人使用的房间数。"
    },
    {
        "query": "信智楼有多少房间部署了监控点位？",
        "script": "```sql\nselect count(distinct 房间表.id) as 安装了摄像头的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于计算位于“信智楼”的特定区域的房间中安装监控点位的数量。以下是各子句的含义：\n\n1. select count(distinct 房间表.id) as 安装了摄像头的房间数量：选择并计算具有唯一ID的房间数量，即安装了摄像头的房间数量。\n2. from s_camera as 摄像头表：从摄像头表中读取数据。\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id：连接摄像头表和房间表，基于摄像头表中的pid等于房间表中的id的条件。\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：连接房间表和楼栋表，基于房间表中的pid等于楼栋表中的id的条件。\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id：连接楼栋表和区域表，基于楼栋表中的pid等于区域表中的id的条件。\n6. join s_organization as 单位表 on 区域表.pid=单位表.id：连接区域表和单位表，基于区域表中的pid等于单位表中的id的条件。\n7. where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'：限定条件，只返回满足这些条件的数据，即：区域名称为“高新校区”、单位名称为“中国科学技术大学”且楼栋名为“信智楼”的数据。"
    },
    {
        "query": "列出镜头中没有人的室外摄像头的编号",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这个SQL查询语句的目的是列出镜头中没有人的室外摄像头的编号、安装位置、所属大楼以及相关信息。以下是各个子句的详细解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`：选择需要输出的列，包括摄像头编号、安装位置（房间名）和所属大楼（楼名）。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id`：从摄像头表（s_camera）和房间表（s_room）进行连接操作，条件是摄像头表的pid与房间表的id相等。\n\n3. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将楼栋表（s_building）加入到查询结果中，条件是房间表的pid与楼栋表的id相等。\n\n4. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将区域表（s_region）加入到查询结果中，条件是楼栋表的pid与区域表的id相等。\n\n5. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将单位表（s_organization）加入到查询结果中，条件是区域表的pid与单位表的id相等。\n\n6. `where 摄像头表.inhouse = 0 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：筛选出摄像头表中室内摄像头（`inhouse = 0`）并且不在最近10分钟内有人出现的摄像头（通过`d_people`表获取每个摄像头的最后出现时间，并计算与当前时间的分钟差，小于10分钟的摄像头不参与筛选）。\n\n7. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：进一步筛选出位于\"高新校区\"且属于\"中国科学技术大学\"的摄像头。\n\n8. `order by 摄像头表.id asc limit 1000`：按摄像头编号升序排列查询结果，并限制返回的结果数量为1000条。"
    },
    {
        "query": "统计图教中心每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一条用于查询某个特定地点（如图书教育中心）在最近30天内的人流量最小值（即每日最少人数）的SQL语句。以下是该语句的各个部分解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`：选择人流量记录中的最小日期（统计时间）作为结果。\n2. `round(min(人数分布表.num)) as 平均人数`：计算并保留一位小数的人流量最小值（即每日最少人数）。\n3. `from a_people_spread_day_building as 人数分布表`：从名为“a_people_spread_day_building”的数据表中获取数据，并将此表简称为“人数分布表”。\n4. `WHERE 人数分布表.building_name='图书教育中心'`：筛选出满足条件（即建筑物名称为“图书教育中心”）的数据。\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`：筛选出在最近30天内的人流量记录。\n6. `and 人数分布表.region_name='高新校区'`：筛选出位于特定区域（高新校区）的数据。\n7. `and 人数分布表.org_name='中国科学技术大学'`：筛选出属于特定机构（中国科学技术大学）的数据。\n8. `group by 人数分布表.stat_day`：对日期进行分组，以便按日计算人流量的最小值。\n9. `order by min(人数分布表.stat_time) asc;`：按照统计时间的先后顺序排列结果，升序表示按日期从小到大排序。"
    },
    {
        "query": "科大高新校区有哪些建筑物？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称 from s_building as 楼栋表  join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid = 单位表.id where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'  order by 楼栋表.building_name asc;\n```\n这个SQL语句是一个多表的连接查询，用于查询科大高新校区的建筑物信息。具体解释如下：\n\n1. `s_building`: 楼栋表，包含所有的楼宇信息，如楼名、楼号等；\n2. `s_region`: 区域表，包含所有校区和校区内的区域信息；\n3. `s_organization`: 单位表，包含学校所有的单位信息，包括学院、行政部门等；\n\n4. `on 楼栋表.pid=区域表.id`: 表示楼栋表和区域表通过`pid`字段（应该是表示区域ID的字段）进行连接；\n5. `on 区域表.pid = 单位表.id`: 表示区域表和单位表通过`pid`字段（应该是表示单位ID的字段）进行连接；\n6. `where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'`: 这部分是查询条件，表示只选择单位名为“中国科学技术大学”且位于“高新校区”的楼宇信息；\n7. `order by 楼栋表.building_name asc`: 这部分是排序条件，表示按楼宇名称的字母顺序升序排列。\n\n所以，这个SQL语句的目的是查询并输出科大高新校区的所有建筑物名称。"
    },
    {
        "query": "图书馆每天最多有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于获取图书馆在最近30天内每天的最高人数。以下是各部分的详细解释：\n\n1. `min(人数分布表.stat_time) as 统计时间`: 计算每天的最小统计时间（即开始时间）。\n2. `round(max(人数分布表.num)) as 平均人数`: 计算每天的最高人数。`round()`函数用于四舍五入数字。\n3. `a_people_spread_day_building as 人数分布表`: 定义数据表名称。\n4. `WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 设置查询条件。其中：\n  - `building_name='图书教育中心'`: 限制查询的建筑物名称为“图书教育中心”。\n  - `DATEDIFF(now(), 人数分布表.stat_time) < 30`: 限制查询的时间范围在最近30天内。`DATEDIFF()`函数用于计算两个日期之间的差值。\n  - `region_name='高新校区'`: 限制查询的地区名称为“高新校区”。\n  - `org_name='中国科学技术大学'`: 限制查询的组织名称为“中国科学技术大学”。\n5. `group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc`: 对查询结果按照每天的统计时间进行分组，并升序排序（即按时间从早到晚排序）。"
    },
    {
        "query": "找出学生食堂一个月内，每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于在学生食堂（building_name='学生食堂'）的高新校区（region_name='高新校区'）和中国科学技术大学（org_name='中国科学技术大学'）内查找一个月内（DATEDIFF(now(), stat_time) < 30）的每天最少人数。\n\n1. `select min(人数分布表.stat_time) as 统计时间`：选择最小统计时间；\n2. `round(min(人数分布表.num)) as 平均人数`：将最小的每日人数进行四舍五入；\n3. `from a_people_spread_day_building as 人数分布表`：从\"a_people_spread_day_building\"表中选择数据，并简称为\"人数分布表\"；\n4. `WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：筛选出满足条件的数据；\n5. `group by 人数分布表.stat_day`：按日期（stat_day）对数据进行分组；\n6. `order by min(人数分布表.stat_time) asc`：按照最小的统计时间升序排列。"
    },
    {
        "query": "教师食堂安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于查询某个特定地点（例如“教工食堂”）的监控摄像头的数量。以下是各子句的详细解释：\n\n1. `select count(*) as 摄像头数量`: 这是查询结果的部分，用于计算摄像头的总数。`count(*)`是聚合函数，用于计算某列或所有列的行数。这里将返回的摄像头的数量命名为`摄像头数量`。\n\n2. `from s_camera as 摄像头表`: 这定义了数据来源，即从`s_camera`表中获取数据，并将该表简称为`摄像头表`。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这表示摄像头表和房间表之间的连接条件，即摄像头的`pid`与房间的`id`相等。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这表示房间表和楼栋表之间的连接条件，即房间的`pid`与楼栋的`id`相等。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这表示楼栋表和区域表之间的连接条件，即楼栋的`pid`与区域的`id`相等。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这表示区域表和单位表之间的连接条件，即区域的`pid`与单位的`id`相等。\n\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这表示查询的条件，即只有满足这些条件的摄像头才会被统计。具体来说，要求楼栋名为“教工食堂”，区域名为“高新校区”，且单位为“中国科学技术大学”。"
    },
    {
        "query": "找出食堂一个月内，每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个 SQL 查询语句，用于查找食堂在一个月内（从当前日期往前推 30 天）每天的最高人数。以下是各部分的解释：\n\n1. `SELECT`: 从数据表中选取特定的列或表达式。\n2. `min(人数分布表.stat_time) as 统计时间`: 这行代码的意思是选择每日的最早时间作为该日的统计时间。\n3. `round(max(人数分布表.num)) as 平均人数`: 这行代码的意思是计算每一天的人数中的最大值（即这一天的人数最多时的人数）。\n4. `FROM a_people_spread_day_building as 人数分布表`: 指定数据来源是 a_people_spread_day_building 这个数据表，并给这个表起了个别名“人数分布表”以便于后续使用。\n5. `WHERE`: 设置筛选条件，只选择符合条件的记录。\n6. `DATEDIFF(now(), 人数分布表.stat_time) < 30`: 这行代码表示只考虑在过去 30 天内的数据。\n7. `AND`: 连接多个筛选条件，只有所有条件都满足的情况下才会被选中。\n8. `group by`: 对某些字段进行分组操作，这里是对日期进行分组。\n9. `order by`: 对结果按照某个字段进行排序，这里是按日期升序排列。"
    },
    {
        "query": "哪栋楼安装的监控最少？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) asc limit 1;\n```\n这是一个SQL查询语句，用于从多个表中获取数据并计算特定条件下的摄像头数量。以下是各子句的解释：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量`：选择要输出的列，即楼宇名称和摄像头数量。\n\n2. `from s_camera as 摄像头表`：指定主表，这里是摄像头信息表（s_camera）。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，连接条件是摄像头表的pid与房间表的id相等。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，连接条件是房间表的pid与楼栋表的id相等。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，连接条件是楼栋表的pid与区域表的id相等。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，连接条件是区域表的pid与单位表的id相等。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即区域名称为“高新校区”且单位名称为中国科学技术大学。\n\n8. `group by 楼栋表.building_name`：按照楼宇名称对结果进行分组。\n\n9. `order by count(*) asc limit 1`：按照摄像头数量进行升序排序，然后限制结果为一行，即返回摄像头数量最少的楼宇。"
    },
    {
        "query": "7号学生公寓监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算7号学生公寓（假设这是某个建筑物的名称）的监控摄像头的数量。具体来说，该查询通过多个表的连接来实现这个目标。以下是各表及其关联关系：\n\n1. `s_camera`（摄像头表）：存储摄像头的详细信息，包括摄像头的ID、类型等。\n2. `s_room`（房间表）：存储每个房间的详细信息，包括房间的ID、类型等。\n3. `s_building`（楼栋表）：存储每栋楼的详细信息，包括楼栋的ID、名称等。\n4. `s_region`（区域表）：存储每个区域的详细信息，包括区域的ID、名称等。\n5. `s_organization`（单位表）：存储单位的详细信息，包括单位的ID、名称等。\n\n查询语句的解释如下：\n\n1. `select count(*) as 摄像头数量`：选择计数函数COUNT(*)作为输出列，用于计算摄像头的数量。\n2. `from s_camera as 摄像头表`：指定摄像头表作为查询的起始点。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，其中摄像头表的PID字段等于房间表的ID字段。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，其中房间表的PID字段等于楼栋表的ID字段。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，其中楼栋表的PID字段等于区域表的ID字段。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，其中区域表的PID字段等于单位表的ID字段。\n7. `where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即只有当楼栋表的建筑名称是\"7号学生公寓\"，区域表的区域名称是\"高新校区\"，单位表的单位名称是\"中国科学技术大学\"时，才返回相关结果。\n\n最后，这个查询将返回满足这些条件的摄像头的数量。"
    },
    {
        "query": "找出近期从学生食堂出发的10条行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一段SQL查询语句，用于从多个表中查找出近期从学生食堂出发的10条行人轨迹。以下是各子句的解释：\n\n1. `select`: 从指定的表中选取特定的列和记录。\n\n2. `start_time`: 在行人轨迹表中，这是一个表示轨迹起始时间的字段。\n\n3. `end_time`: 在行人轨迹表中，这是一个表示轨迹结束时间的字段。\n\n4. `name`: 在行人轨迹表中，这是一个表示虚拟人名的字段。\n\n5. `camera_id_list`: 在行人轨迹表中，这是一个包含所经过摄像头ID的列表字段。\n\n6. `a_people_trail as 行人轨迹表`: 指定行人轨迹表的别名。\n\n7. `join`: 将两个或更多个表连接在一起，基于这些表的共享列的值。\n\n8. `s_camera as 摄像头表`: 指定摄像头表的别名。\n\n9. `on`: 定义了行人轨迹表与摄像头表之间的连接条件（即，当行人轨迹表的start_camera_id等于摄像头表的id时）。\n\n10. `s_room as 房间表`: 指定房间表的别名。\n\n11. `on`: 定义了摄像头表与房间表之间的连接条件（即，当摄像头表的pid等于房间表的id时）。\n\n12. `s_building as 楼栋表`: 指定楼栋表的别名。\n\n13. `on`: 定义了房间表与楼栋表之间的连接条件（即，当房间表的pid等于楼栋表的id时）。\n\n14. `s_region as 区域表`: 指定区域表的别名。\n\n15. `on`: 定义了楼栋表与区域表之间的连接条件（即，当楼栋表的pid等于区域表的id时）。\n\n16. `s_organization as 单位表`: 指定单位表的别名。\n\n17. `on`: 定义了区域表与单位表之间的连接条件（即，当区域表的pid等于单位表的id时）。\n\n18. `where`: 定义筛选条件，只有满足这些条件的记录才会被返回。在这个例子中，筛选的条件是区域名为“高新校区”，单位名称为中国科学技术大学，楼栋名称为“学生食堂”。\n\n19. `order by`: 定义排序规则，按照行人轨迹表的start_time降序排列。\n\n20. `limit`: 定义返回记录的条数，这里是10条。"
    },
    {
        "query": "安装摄像头最少的是哪栋楼？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) asc limit 1;\n```\n这是一段SQL查询语句，用于从数据库中获取某个特定校区和单位的最少摄像头数量的楼宇名称。下面是各部分的具体解释：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量`: 选择楼宇名称和摄像头数量作为查询结果的字段；\n2. `from s_camera as 摄像头表`: 摄像头表是存储摄像头的数据表；\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接房间表，摄像头与房间的关系通过pid字段关联；\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接楼栋表，房间与楼栋的关系通过pid字段关联；\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接区域表，楼栋与区域的关系通过pid字段关联；\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接单位表，区域与单位的关系通过pid字段关联；\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，限制查询结果为特定校区和单位的数据；\n8. `group by 楼栋表.building_name`: 对查询结果按照楼栋进行分组；\n9. `order by count(*) asc limit 1`: 对每组摄像头数量进行排序（升序），并返回最少摄像头数量的楼宇名称。"
    },
    {
        "query": "告诉我现在食堂有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='学生食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取“学生食堂”在“高新校区”的中国科学技术大学的实时人数。具体解释如下：\n\n1. `a_people_spread_day_building`: 数据表名，存储了各个建筑的人数信息。\n2. `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这个条件用于筛选出最近5小时内的数据，即实时的数据。\n3. `and 人数分布表.building_name='学生食堂'`: 过滤出“学生食堂”的数据。\n4. `and 人数分布表.region_name='高新校区'`: 过滤出“高新校区”的数据。\n5. `and 人数分布表.org_name='中国科学技术大学'`: 过滤出“中国科学技术大学”的数据。\n6. `order by 人数分布表.stat_time desc limit 1`: 按统计时间降序排列（最近的在最前面）并限制返回一条数据。"
    },
    {
        "query": "信智楼近期识别到多少手中持物的行人？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这个SQL查询语句是用来统计信智楼（假设是一个建筑）在近五分钟内的手中持物的行人数量。以下是各个部分的功能和解释：\n\n1. `select count(*) as 手里拿东西的人数`: 这是查询的目标，即计算手持物品的行人数量。\n\n2. `from d_people as 人员表`: 这是数据源，假设有一个名为`d_people`的表，用于存储所有人员的信息。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 这表示`人员表`与`摄像头表`通过`camera_id`字段进行连接，每个摄像头都有唯一的ID。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这表示`摄像头表`与`房间表`通过`pid`字段进行连接，每个摄像头属于一个特定的房间。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这表示`房间表`与`楼栋表`通过`pid`字段进行连接，每个房间属于一个特定的建筑。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这表示`楼栋表`与`区域表`通过`pid`字段进行连接，每个建筑属于一个特定的区域。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这表示`区域表`与`单位表`通过`pid`字段进行连接，每个区域属于一个特定的单位（例如学校或公司）。\n\n8. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`: 这表示`人员表`与`持物维表`通过`hold_obj`字段进行连接，表示每个人持有的物品类型。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'`: 这表示只统计最近五分钟内在手中持有物品的行人数量。\n\n10. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 这表示只统计位于“高新校区”、属于“中国科学技术大学”的“信智楼”中的行人数量。"
    },
    {
        "query": "信智楼摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于查询“信智楼”的摄像头数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数（count）作为查询结果，返回摄像头总数，并命名为\"摄像头数量\"。\n2. `from s_camera as 摄像头表`：指定数据来源，s_camera是摄像头信息表。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接s_room（房间信息表），通过摄像头表的pid（摄像头所在房间ID）等于房间表的id进行匹配。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接s_building（楼栋信息表），通过房间表的pid（所在楼栋ID）等于楼栋表的id进行匹配。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接s_region（区域信息表），通过楼栋表的pid（所在区域ID）等于区域表的id进行匹配。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接s_organization（单位信息表），通过区域表的pid（所在单位ID）等于单位表的id进行匹配。\n7. `where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置筛选条件，只返回满足条件的记录，即：楼栋名为“信智楼”、区域名称为“高新校区”且单位名称为“中国科学技术大学”的记录。"
    },
    {
        "query": "行政办公楼现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政办公楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取“行政办公楼”当前的人数信息。具体解释如下：\n\n1. `SELECT`: 选择字段，即需要查询的列名；\n2. `a_people_spread_day_building`：这是数据表的名字，用于存储人员分布在各建筑的情况；\n3. `TIMESTAMPDIFF`: 一个时间差函数，计算两个日期之间的小时差；\n4. `NOW()`: 返回当前的日期和时间；\n5. `<`: 小于号，用于设置时间条件；\n6. `5`: 表示时间差小于5小时；\n7. `AND`: 逻辑运算符，连接多个条件；\n8. `WHERE`: 设置查询条件；\n9. `building_name`: 建筑名称；\n10. `=`: 等于号，用于匹配指定的建筑名称；\n11. `'行政办公楼'`: 指定查询的建筑物名称；\n12. `AND`: 连接多个查询条件；\n13. `region_name`: 区域名称；\n14. `=`: 等于号，用于匹配指定的区域名称；\n15. `'高新校区'`: 指定查询的区域名称；\n16. `AND`: 连接多个查询条件；\n17. `org_name`: 组织名称；\n18. `=`: 等于号，用于匹配指定的学校名称；\n19. `'中国科学技术大学'`: 指定查询的组织名称；\n20. `order by`: 对查询结果进行排序；\n21. `desc`: 降序排列；\n22. `limit`: 限制查询结果的数量；\n23. `1`: 表示只返回一条记录。\n\n整个查询语句的含义是：查询距离现在时间小于5小时的、位于“行政办公楼”且位于“高新校区”和属于“中国科学技术大学”的统计数据，按照统计时间倒序排列（最近的时间排在最前面），并限制返回结果只有一条。"
    },
    {
        "query": "师生活动中心哪些地方安装了摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个关联表中检索特定条件下的摄像头信息。以下是各个部分和条件的解释：\n\n1. `select`: 从数据库中选取特定的列。\n2. `摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 选择要返回的列。这里的`as`关键字用于为每个列提供别名（方便理解和操作）。\n3. `from s_camera as 摄像头表`: 指定查询的主表（摄像头表）。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这行代码表示摄像头表与房间表通过摄像头的父ID（即所在房间的ID）进行联接。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 同样地，这行代码表示房间表与楼栋表通过房间的父ID（即所属楼栋的ID）进行联接。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这行代码表示楼栋表与区域表通过楼栋的父ID（即所属区域的ID）进行联接。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 最后，这行代码表示区域表与单位表通过区域的父ID（即所属单位的ID）进行联接。\n8. `where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询的条件，即仅检索“师生活动中心”的摄像头数据，位于“高新校区”并且属于“中国科学技术大学”的。\n9. `order by 摄像头表.id asc limit 1000`: 按摄像头表的ID升序排列结果，并限制返回的结果数量为1000条。"
    },
    {
        "query": "高发异常行为的房间",
        "script": "```sql\nselect 房间表.room_name as 房间名称, count(*) as 5天内异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(),异常行为表.moment) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' GROUP by 房间表.room_name  ORDER by count(*) desc  limit 10;\n```\n这是一个SQL查询语句，用于从多个表中获取特定条件下的数据。下面是各个子句的详细解释：\n\n1. `select room_name as 房间名称, count(*) as 5天内异常行为数量`: 选择房间名称和5天内异常行为数量作为返回的结果。\n\n2. `from d_abnormal_behavior as 异常行为表`: 从异常行为表（d_abnormal_behavior）中获取数据。\n\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`: 通过相机ID将异常行为表与摄像头表进行连接。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头所在房间的ID将摄像头表与房间表进行连接。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间所属楼栋的ID将房间表与楼栋表进行连接。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋所属区域的ID将楼栋表与区域表进行连接。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域所属单位的ID将区域表与单位表进行连接。\n\n8. `where DATEDIFF(now(),异常行为表.moment) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，包括：异常行为发生时间距离现在不超过5天，区域为“高新校区”，单位为“中国科学技术大学”。\n\n9. `GROUP by 房间表.room_name`: 对每个房间名称进行分组统计。\n\n10. `ORDER by count(*) desc`: 按照异常行为数量降序排列结果。\n\n11. `limit 10`: 限制返回结果的条数，这里只返回前10条。"
    },
    {
        "query": "查看整个校区的摄像头安装情况",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) desc;\n```\n这个SQL语句是一个复杂的联表查询，用于查询某个校区（这里是“高新校区”）内各个楼群的摄像头的安装情况。具体来说：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量`：选择要查询的列，包括每个楼群的名称以及该楼群内的摄像头总数。\n\n2. `from s_camera as 摄像头表`：指定查询的主表，即摄像头信息表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头信息与房间信息关联起来，因为摄像头通常安装在具体的房间内。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：再将房间信息与楼群信息关联，以获取每个楼群的名称。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：进一步将楼群与校区所在区域的信息关联，以便确定校区名称。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：最后将校区与所属单位的关联起来，以获取单位的名称。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，限定查询对象为指定的校区和单位。\n\n8. `group by 楼栋表.building_name`：按楼群名称进行分组统计，计算每个楼群的摄像头数量。\n\n9. `order by count(*) desc`：按照摄像头数量的多少对结果进行排序。"
    },
    {
        "query": "图书教育中心总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询某个特定地点的摄像头数量。具体来说：\n\n1. `select count(*) as 摄像头数量`: 选择摄像头数量作为返回的结果，使用 COUNT 函数计算摄像头的总数。\n\n2. `from s_camera as 摄像头表`: 定义数据源，即摄像头表，假设这个表中存储了所有摄像头的信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将摄像头表与房间表通过 PID（可能是设备编号）关联起来，这样可以通过每个摄像头的房间信息进一步筛选。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将房间表和楼栋表通过 PID 关联起来，这样可以获取每个摄像头的所在楼栋的信息。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将楼栋表和区域表通过 PID 关联起来，这样可以获取每个摄像头的所在区域（比如校区、学院等）的信息。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将区域表和单位表通过 PID 关联起来，这样可以获取每个摄像头的所在单位的信息。\n\n7. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 根据这些条件筛选出符合条件的摄像头记录，即位于“图书教育中心”且属于“高新校区”和“中国科学技术大学”的摄像头。\n\n最后执行这段 SQL 语句，就会得到满足上述条件的摄像头数量。"
    },
    {
        "query": "1号学科楼的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='1号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL语句用于查询\"1号学科楼\"当前的人数。首先，它从一个名为`a_people_spread_day_building`的表中获取数据，该表可能包含人员分布情况的信息，包括统计时间、建筑名称等字段。然后，通过WHERE子句筛选出满足以下条件的记录：\n\n- `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：这条语句计算了从统计时间（`stat_time`）到现在的时间差，并限制这个时间差小于5小时，意味着我们只考虑最近5小时内的数据。\n- `人数分布表.building_name = '1号学科楼'`：表示只有当建筑名称为\"1号学科楼\"时，才保留该记录。\n- `人数分布表.region_name = '高新校区'`：表示只有当地区名称为\"高新校区\"时，才保留该记录。\n- `人数分布表.org_name = '中国科学技术大学'`：表示只有当组织名称为\"中国科学技术大学\"时，才保留该记录。\n\n最后，使用`order by`子句按统计时间降序排列结果集，并使用`limit 1`子句仅返回一条记录，即最新的一条关于\"1号学科楼\"的人员统计数据。"
    },
    {
        "query": "体育馆总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算体育馆内安装摄像头的数量。下面是各部分解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数（count）返回的结果作为\"摄像头数量\"列。\n\n2. `from s_camera as 摄像头表`：定义数据来源，即摄像头信息表，这里简写为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，条件是摄像头表的pid等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，条件是房间表的pid等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，条件是楼栋表的pid等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，条件是区域表的pid等于单位表的id。\n\n7. `where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即查找满足体育馆、高新校区和中国科学技术大学对应信息的摄像头信息。\n\n通过以上操作，这个SQL查询会返回体育馆内摄像头的总数。"
    },
    {
        "query": "统计学生食堂一个月内每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一段SQL查询语句，用于从数据库中获取一个学生食堂在一个月内的最少每日就餐人数。具体解释如下：\n\n1. `SELECT`: SQL的命令，用于从数据表中选取需要的列。\n\n2. `MIN()`: 一个聚合函数，用于求分组后的最小值。这里用来找出每一天的最小就餐人数。\n\n3. `round()`: 另一个聚合函数，用于四舍五入某个数值。这里用在MIN()的结果上，确保结果保留整数。\n\n4. `a_people_spread_day_building`: 假设是数据库中的一个表名，存储了各个建筑的每日人数分布信息。\n\n5. `building_name`, `region_name`, `org_name`: 这三个是a_people_spread_day_building表的列名，分别表示建筑名称、地区名称和学校名称。\n\n6. `DATE_DIFF()`: MySQL的一个内置函数，计算两个日期之间的差值。这里用现在的时间减去统计数据的时间，小于30天则认为是在一个月内。\n\n7. `GROUP BY`: SQL的命令，将具有相同值的行组合成一组。这里按统计日期（stat_day）进行分组。\n\n8. `ORDER BY`: SQL的命令，对返回的记录进行排序。这里按照统计时间（stat_time）升序排列。\n\n总结起来，这段SQL代码的作用是从a_people_spread_day_building表中筛选出学生食堂一个月内每天的最低人数，并按照日期升序排列。"
    },
    {
        "query": "目前哪些建筑人数最多？",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num desc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中查询当前（距离现在5小时以内）在“高新校区”的“中国科学技术大学”内人数最多的10座建筑物及其人数。\n\n具体解释如下：\n\n1. `select 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数`：选择两个列，分别是建筑名称和人数。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定查询的数据表名为`a_people_spread_day_building`，并简称为`人数分布表`。\n\n3. `where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：限制查询条件，只选取5小时以内的数据。\n\n4. `and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：进一步限制条件，只选取位于“高新校区”且属于“中国科学技术大学”的数据。\n\n5. `order by 人数分布表.num desc`：按照人数进行降序排列，即先显示人数最多的记录。\n\n6. `limit 10`：限制结果集的大小，只返回前10条记录。"
    },
    {
        "query": "信智楼有多少行人未持物？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个复杂的SQL查询语句，用于计算某个时间范围内（比如过去五分钟）在特定地点（如信智楼）的未持物的行人数量。\n\n这个查询涉及多个表，包括`d_people`（人员表）、`s_camera`（摄像头表）、`s_room`（房间表）、`s_building`（楼栋表）、`s_region`（区域表）和`s_organization`（单位表），以及一个中间表`t_hold_object`（持物维表）。下面是这个查询的主要部分及其功能：\n\n1. `select count(*) as 手里拿东西的人数`: 这是查询的目标，即计算未持物的行人数量。\n2. `from d_people as 人员表 join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 从`d_people`表开始，与`s_camera`表连接，基于摄像头ID匹配对应的人员记录。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid=单位表.id`: 依次与`s_room`（房间表）、`s_building`（楼栋表）、`s_region`（区域表）和`s_organization`（单位表）连接，以获取更详细的建筑信息。\n4. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`: 最后与`t_hold_object`（持物维表）连接，基于持物名称匹配对应的人员记录。\n5. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'`: 设置时间过滤条件，只考虑过去五分钟内的数据，同时要求持物维表的名称字段为“未持物”。\n6. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 设置空间过滤条件，只考虑位于“高新校区”的中国科学技术大学的“信智楼”的数据。\n\n这个查询结果将返回信智楼在过去五分钟内在场且未持物的行人数量。"
    },
    {
        "query": "2号学科楼监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段用于查询\"2号学科楼\"监控数量的数据库SQL语句。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数count()，计算摄像头的数量。\n2. `from s_camera as 摄像头表`: 从s_camera（假设这是一个存储摄像头的数据表）作为数据来源，简称为摄像头表。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room（假设这是一个存储各个房间的数据表），连接条件是摄像头表的pid与房间表的id相等。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building（假设这是一个存储各个楼栋的数据表），连接条件是房间表的pid与楼栋表的id相等。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region（假设这是一个存储各个校区/区域的数据表），连接条件是楼栋表的pid与区域表的id相等。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization（假设这是一个存储各个单位/学校的数据表），连接条件是区域表的pid与单位表的id相等。\n7. `where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 根据条件筛选出满足条件的记录，即楼栋名为“2号学科楼”，区域名为“高新校区”，单位名为“中国科学技术大学”的记录。"
    },
    {
        "query": "食堂每天最多有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取某个特定时间段内（例如过去30天）的“学生食堂”（位于“高新校区”的中国科学技术大学内）每天的最高就餐人数。\n\n以下是查询语句的主要部分和功能说明：\n\n1. SELECT子句: 从`a_people_spread_day_building`表中选择数据。\n2. MIN()函数: 获取每个`stat_day`的最小`stat_time`值作为\"统计时间\"。\n3. ROUND()函数: 将`num`字段的平均值四舍五入到最接近的整数。这里`NUM`表示每天的人数。\n4. GROUP BY子句: 对`stat_day`进行分组。\n5. WHERE子句: 过滤条件，只选择满足以下条件的数据：\n- `building_name` = '学生食堂'\n- `DATEDIFF(now(), stat_time) < 30`：表示查询过去30天的数据。\n- `region_name` = '高新校区'\n- `org_name` = '中国科学技术大学'\n6. ORDER BY子句: 按`stat_time`升序排列结果。"
    },
    {
        "query": "科大高新校区里面有哪些楼栋？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称 from s_building as 楼栋表  join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid = 单位表.id where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'  order by 楼栋表.building_name asc;\n```\n该SQL语句用于查询“高新校区”的中国科学技术大学的所有楼宇名称。它涉及到三个表：s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。\n\n具体解释如下：\n\n1. select 楼栋表.building_name as 楼宇名称：从楼栋表中选择building_name字段，并将其重命名为“楼宇名称”。\n2. from s_building as 楼栋表：指定数据来源是s_building表，并为其设置别名“楼栋表”。\n3. join s_region as 区域表 on 楼栋表.pid=区域表.id：将s_region表与s_building表通过on子句连接在一起，其中连接条件是楼栋表中的pid字段等于区域表中的id字段，并为区域表设置别名“区域表”。\n4. join s_organization as 单位表 on 区域表.pid = 单位表.id：将s_organization表与区域表通过on子句连接在一起，其中连接条件是区域表中的pid字段等于单位表中的id字段，并为单位表设置别名“单位表”。\n5. where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'：设定查询条件，即单位表的org_name字段值为“中国科学技术大学”且区域表的region_name字段值为“高新校区”。\n6. order by 楼栋表.building_name asc：对查询结果按照楼栋表的building_name字段值进行升序排序。"
    },
    {
        "query": "5分钟内识别到多少背双肩包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于计算5分钟内在指定区域（高新校区）内识别到的背双肩包的行人人数。下面是对这个SQL语句的解释：\n\n1. select count(*) as 背双肩包的人数: 选择计数函数count()作为结果，返回背双肩包的人数。\n\n2. from d_people as 人员表: 数据来源是d_people表，代表行人信息。\n\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 连接s_camera表（包含摄像头信息的表），通过人员表中的camera_id与摄像头表的主键id进行匹配。\n\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接s_room表（包含房间信息的表），通过摄像头表的pid与房间表的主键id进行匹配。\n\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接s_building表（包含楼栋信息的表），通过房间表的pid与楼栋表的主键id进行匹配。\n\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接s_region表（包含区域信息的表），通过楼栋表的pid与区域表的主键id进行匹配。\n\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接s_organization表（包含单位信息的表），通过区域表的pid与单位表的主键id进行匹配。\n\n8. join t_bag as 背包维表 on 人员表.bag=背包维表.id: 连接t_bag表（包含背包名称的表），通过人员表的bag字段与背包维表的主键id进行匹配。\n\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5: 限制条件，要求人员表的moment时间距离现在的时间小于5分钟。\n\n10. and 背包维表.name='背包': 限制条件，要求背包维表的name字段值为‘背包’。\n\n11. and 区域表.region_name='高新校区': 限制条件，要求区域表的region_name字段值为‘高新校区’。\n\n12. and 单位表.org_name='中国科学技术大学': 限制条件，要求单位表org_name字段值为‘中国科学技术大学’。"
    },
    {
        "query": "到达1号学生公寓的行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.end_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='1号学生公寓' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一段SQL查询语句，用于从多个表中获取特定条件下的数据。以下是各子句的含义：\n\n1. `select 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id`：选择从“行人轨迹表”中返回的数据列，包括“轨迹起始时间”、“轨迹结束时间”、“虚拟人名”和“经过的摄像头Id”。\n\n2. `from a_people_trail as 行人轨迹表`：指定查询的主表是“a_people_trail”（行人轨迹表）。\n\n3. `join s_camera as 摄像头表 on 行人轨迹表.end_camera_id=摄像头表.id`：连接摄像头表（s_camera）到行人轨迹表，连接条件是“行人轨迹表的end_camera_id等于摄像头表的id”。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表（s_room）到摄像头表，连接条件是“摄像头表的pid等于房间表的id”。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表（s_building）到房间表，连接条件是“房间表的pid等于楼栋表的id”。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表（s_region）到楼栋表，连接条件是“楼栋表的pid等于区域表的id”。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表（s_organization）到区域表，连接条件是“区域表的pid等于单位表的id”。\n\n8. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='1号学生公寓'`：设置查询条件，要求区域表的区域名是“高新校区”，单位表的单位名是“中国科学技术大学”，楼栋表的楼栋名是“1号学生公寓”。\n\n9. `order by 行人轨迹表.start_time desc`：按照行人轨迹表的起始时间降序排列结果。\n\n10. `limit 10`：限制查询结果的数量为10条。"
    },
    {
        "query": "查一下食堂的所有摄像头的基本信息",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于查询学校食堂所有摄像头的基本信息。以下是各部分解释：\n\n1. select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置: 这部分是选择要查询的列。摄像头编号、IP地址和安装位置是摄像头表（s_camera）和房间表（s_room）中的字段。\n\n2. from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id: 这部分定义了查询的表结构，摄像头表（s_camera）和房间表（s_room）将通过摄像头表中的pid与房间表中的id进行关联。\n\n3. join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id: 这部分是进一步的联表操作。通过房间表中的pid分别与楼栋表（s_building）和区域表（s_region）进行关联，以获取更多的建筑信息和地区信息。\n\n4. join s_organization as 单位表 on 区域表.pid=单位表.id: 这部分是再次的联表操作。通过区域表中的pid与单位表（s_organization）进行关联，以获取单位的名称信息。\n\n5. where 楼栋表.building_name='学生食堂': 这部分是查询条件，仅选择“学生食堂”的建筑信息。\n\n6. and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学': 这部分也是查询条件，进一步限制只选择“高新校区”和“中国科学技术大学”的信息。\n\n7. order by 摄像头表.id asc limit 1000: 这部分是对查询结果进行排序和限制。按照摄像头表（s_camera）的id字段从小到大排序（asc表示升序），并限制返回的结果数为1000条。"
    },
    {
        "query": "给出7号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于查询满足特定条件的摄像头的数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数count(*)作为结果集，将返回的总数命名为摄像头数量。\n\n2. `from s_camera as 摄像头表`：定义摄像头表（假设该表名为s_camera）作为数据来源。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，依据的条件是摄像头表中的pid与房间表的id相等。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，依据的条件是房间表中的pid与楼栋表的id相等。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，依据的条件是楼栋表中的pid与区域表的id相等。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，依据的条件是区域表中的pid与单位表的id相等。\n\n7. `where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设定查询条件，只返回满足这三个条件的数据。即：7号学生公寓、高新校区和中国科学技术大学。\n\n这段SQL语句的作用是计算满足指定条件的摄像头数量。"
    },
    {
        "query": "图教中心安装了哪些摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从数据库中获取安装在特定位置（如“图书教育中心”）的摄像头的信息。以下是各个子句的详细解释：\n\n1. `select`: 选择需要返回的字段。这里选择了摄像头编号、IP地址和安装位置。\n\n2. `摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 定义了返回字段的别名。这样在查询结果中，我们可以通过\"摄像头编号\"、\"IP地址\"和\"安装位置\"来查看对应的数据。\n\n3. `from s_camera as 摄像头表`: 指定数据来源，即摄像头信息表（s_camera表）。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接（JOIN）摄像头表和房间表，连接条件是摄像头表的pid（父ID）等于房间表的id（主键）。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接摄像头表、房间表和楼栋表，连接条件是房间表的pid（父ID）等于楼栋表的id（主键）。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接摄像头表、房间表、楼栋表和区域表，连接条件是楼栋表的pid（父ID）等于区域表的id（主键）。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接摄像头表、房间表、楼栋表、区域表和单位表，连接条件是区域表的pid（父ID）等于单位表的id（主键）。\n\n8. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设定查询条件，即摄像头所在楼栋的名称必须是“图书教育中心”，所在区域的名称必须是“高新校区”，所在单位的名称必须是“中国科学技术大学”。\n\n9. `order by 摄像头表.id asc limit 1000`: 对查询结果进行排序，按照摄像头编号（id）从小到大排序（asc表示升序），并限制返回记录数为1000条。"
    },
    {
        "query": "现在有多少人在办公楼？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政办公楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL查询语句的目的是获取当前在\"行政办公楼\"中的人数。这里有一些关键部分需要解释：\n\n1. `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这行代码计算了从当前时间（now()）到记录时间（stat_time）的小时数差，并设置了一个条件，即这个差值要小于5小时。这样可以确保我们只考虑最近5小时内的数据。\n\n2. `and 人数分布表.building_name='行政办公楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 这行代码设置了其他三个筛选条件，分别是办公楼名、地区和机构名称，它们必须分别等于指定的值（这里是“行政办公楼”、“高新校区”和“中国科学技术大学”）。\n\n3. `order by 人数分布表.stat_time desc limit 1`: 这行代码按统计时间（stat_time）降序排列结果集（即最新的记录排在最前面），然后限制返回的结果数量为1条。这样，我们就可以得到最新的数据，也就是目前在\"行政办公楼\"中的人员数量。"
    },
    {
        "query": "找出近期到达1号学生公寓的10条行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.end_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='1号学生公寓' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一段SQL查询语句，用于从多个关联的数据表中获取满足特定条件的行人轨迹信息。下面是对该SQL语句的详细解读：\n\n1. select ... from ...: SQL查询的起始部分，定义了要查询哪些字段和要从哪些数据表进行查询。本例中需要查询的字段包括轨迹起始时间、轨迹结束时间、虚拟人名和经过的摄像头ID列表。\n\n2. start_time, end_time, name, camera_id_list: 要查询的字段名称。\n\n3. a_people_trail as 行人轨迹表: 定义了第一个数据表，即行人轨迹表。\n\n4. join ... on ...: SQL查询中的JOIN子句，用于连接多个相关联的数据表。本例中共使用了5个JOIN子句，分别连接了s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。\n\n5. where ...: SQL查询中的WHERE子句，用于设置查询条件。本例中的条件是区域名称为“高新校区”，单位名称为中国科学技术大学，楼栋名为“1号学生公寓”。\n\n6. order by ... desc: SQL查询中的ORDER BY子句，用于对查询结果进行排序。本例中按照轨迹起始时间的降序进行排序。\n\n7. limit 10: SQL查询中的LIMIT子句，用于限制查询结果的条数。本例中只返回最近到达10条行人轨迹。"
    },
    {
        "query": "当前信智楼空着的房间有多少？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'     and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n该SQL语句用于查询\"信智楼\"当前无人使用的房间数量。以下是详细的解析过程：\n\n1. `s_camera`（摄像头表）：存储摄像头的数据，包括摄像头编号（camera_id）等信息；\n2. `s_room`（房间表）：存储房间的数据，包括房间名称（room_name）、摄像头编号（camera_id）等信息；\n3. `s_building`（楼栋表）：存储楼栋的数据，包括楼栋名称（building_name）等信息；\n4. `s_region`（区域表）：存储区域的数据，包括区域名称（region_name）等信息；\n5. `s_organization`（单位表）：存储单位的数据，包括单位名称（org_name）等信息；\n6. `d_people`（人员表）：存储人员的数据，包括摄像头编号（camera_id）、进入时间（moment）等信息；\n7. `count(房间表.room_name)`：计算房间表中的房间数量，即统计所有房间的总数；\n8. `有人的房间数量`：从摄像头表开始，通过JOIN连接其他表格，筛选出当前有人使用的摄像头编号，并排除这些摄像头编号对应的房间数，即为无人的房间数量；\n9. `TIMESTAMPDIFF(MINUTE, moment, now()) < 10`：判断人员在房间内停留的时间是否小于10分钟，若小于10分钟则认为该摄像头对应房间为有人状态。\n\n总结：这个查询的目的是找出\"信智楼\"当前没有人在内的房间数量，它首先连接多个表格获取相关信息，然后通过筛选条件排除掉当前有人使用的房间，最后统计剩余的无人的房间数量。"
    },
    {
        "query": "给出8号学生公寓的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从数据库中获取8号学生公寓的摄像头数量。下面是对这个查询语句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数`count(*)`作为结果集，并将其命名为`摄像头数量`。这将返回符合条件的摄像头总数。\n\n2. `from s_camera as 摄像头表`: 从名为`s_camera`的表中开始查询，并将此表简称为`摄像头表`。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将`s_room`表（简称`房间表`）与`摄像头表`通过外键`pid`和主键`id`连接起来。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将`s_building`表（简称`楼栋表`）与`房间表`通过外键`pid`和主键`id`连接起来。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将`s_region`表（简称`区域表`）与`楼栋表`通过外键`pid`和主键`id`连接起来。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将`s_organization`表（简称`单位表`）与`区域表`通过外键`pid`和主键`id`连接起来。\n\n7. `where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，即楼栋名称、区域名称和单位名称必须分别等于\"8号学生公寓\"、\"高新校区\"和\"中国科学技术大学\"。\n\n综上所述，这个查询语句将从相关表中联接并计算满足条件的摄像头数量，即8号学生公寓的摄像头数量。"
    },
    {
        "query": "8号学生公寓的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='8号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取\"8号学生公寓\"的人数信息。以下是各部分解释：\n\n1. `select 人数分布表.num as 人数`：选择\"人数\"作为查询结果的字段名，该字段来自于\"人数分布表\"。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表为\"a_people_spread_day_building\"，并为其取名为\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置筛选条件，即距离当前时间（now()）小于5小时的记录。\n\n4. `and 人数分布表.building_name='8号学生公寓'`：进一步限制筛选条件，即只有\"building_name\"（建筑名称）等于\"8号学生公寓\"的记录才会被查询出来。\n\n5. `and 人数分布表.region_name='高新校区'`：继续设置筛选条件，即只有\"region_name\"（区域名称）等于\"高新校区\"的记录才会被查询出来。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：继续设置筛选条件，即只有\"org_name\"（组织名称）等于\"中国科学技术大学\"的记录才会被查询出来。\n\n7. `order by 人数分布表.stat_time desc`：按\"stat_time\"（统计时间）降序排列查询结果。\n\n8. `limit 1;`：限制查询结果的条数为1条。"
    },
    {
        "query": "5分钟内识别到多少戴眼镜的行人？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于从多个表中联合查询并统计满足条件的戴眼镜行人数量。具体解释如下：\n\n1. `select count(*) as 戴眼镜人数`: 选择计数函数count(*)作为查询结果，将返回的行数命名为\"戴眼镜人数\"。\n\n2. `from d_people as 人员表`: 从人员信息表（d_people）开始查询，将其简称为“人员表”。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接摄像头信息表（s_camera），条件是“人员表”的camera_id等于“摄像头表”的id字段。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接房间信息表（s_room），条件是“摄像头表”的pid等于“房间表”的id字段。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接楼栋信息表（s_building），条件是“房间表”的pid等于“楼栋表”的id字段。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接区域信息表（s_region），条件是“楼栋表”的pid等于“区域表”的id字段。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接单位信息表（s_organization），条件是“区域表”的pid等于“单位表”的id字段。\n\n8. `join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id`: 连接眼镜维护表（t_glasses），条件是“人员表”的glasses字段等于“眼镜维表”的id字段。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='戴眼镜' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，包括时间差限制（过去5分钟内的数据）、眼镜类型（必须为'戴眼镜'）、所在区域和单位信息。\n\n综合以上信息，这个SQL语句将在满足特定条件（如5分钟以内、戴眼镜等）的范围内，统计并返回高新校区的中国科学技术大学内所有戴眼镜的行人总数。"
    },
    {
        "query": "图书馆的摄像头安装情况",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个 SQL 查询语句，用于从多个表中获取图书馆摄像头的安装信息。以下是各部分解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：这是查询的结果集，包括摄像头编号、IP地址和安装位置三个列。其中 `as` 关键字用于给列设置别名。\n\n2. `from s_camera as 摄像头表`：指定查询的主表，即摄像头信息表（s_camera）。这里使用 `as` 关键字为其设置了一个别名“摄像头表”，以便在后续连接操作中方便引用。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是一个连接操作，将摄像头信息表（s_camera）与房间信息表（s_room）进行连接，连接条件是摄像头表的 pid 字段等于房间表的 id 字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：又一个连接操作，将房间信息表（s_room）与楼栋信息表（s_building）进行连接，连接条件是房间表的 pid 字段等于楼栋表的 id 字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：继续一个连接操作，将楼栋信息表（s_building）与区域信息表（s_region）进行连接，连接条件是楼栋表的 pid 字段等于区域表的 id 字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：最后一个连接操作，将区域信息表（s_region）与单位信息表（s_organization）进行连接，连接条件是区域表的 pid 字段等于单位表的 id 字段。\n\n7. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：查询条件，只选择满足这些条件的摄像头信息。分别是：楼栋名称为“图书教育中心”，区域名称为“高新校区”，单位名称是“中国科学技术大学”。\n\n8. `order by 摄像头表.id asc limit 1000;`：结果排序和限制，按照摄像头表的 id 字段升序排列（asc），并限制返回结果的数量最多为 1000 条。"
    },
    {
        "query": "办公楼的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政办公楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的\"人数\"字段信息。以下是各部分解释：\n\n1. `select 人数分布表.num as 人数`：选择\"人数分布表\"表中的\"num\"字段，并将结果命名为\"人数\"；\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源为\"a_people_spread_day_building\"表，并为其起别名\"人数分布表\"；\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：限制统计时间距离当前时间（now()函数返回）在5小时以内；\n4. `and 人数分布表.building_name='行政办公楼'`：限制建筑名称为\"行政办公楼\"；\n5. `and 人数分布表.region_name='高新校区'`：限制地区名称为\"高新校区\"；\n6. `and 人数分布表.org_name='中国科学技术大学'`：限制组织名称为\"中国科学技术大学\"；\n7. `order by 人数分布表.stat_time desc`：按统计数据的时间戳降序排列；\n8. `limit 1`：仅返回满足条件的最新的一条记录。"
    },
    {
        "query": "安装了多少监控点位？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算满足特定条件的监控点位的数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数count，对结果集的行数进行统计，将返回值命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`：指定数据来源是s_camera表，并将其简称为\"摄像头表\"。\n\n3. `join s_room as 房间表`：连接s_room表（假设这些表之间有相关关系），将其简称为\"房间表\"。\n\n4. `on 摄像头表.pid=房间表.id`：定义摄像头表和房间表的连接条件，即摄像头表中的pid字段等于房间表中的id字段。\n\n5. `join s_building as 楼栋表`：连接s_building表，将其简称为\"楼栋表\"。\n\n6. `on 房间表.pid=楼栋表.id`：定义房间表和楼栋表的连接条件，即房间表中的pid字段等于楼栋表中的id字段。\n\n7. `join s_region as 区域表`：连接s_region表，将其简称为\"区域表\"。\n\n8. `on 楼栋表.pid=区域表.id`：定义楼栋表和区域表的连接条件，即楼栋表中的pid字段等于区域表中的id字段。\n\n9. `join s_organization as 单位表`：连接s_organization表，将其简称为\"单位表\"。\n\n10. `on 区域表.pid=单位表.id`：定义区域表和单位表的连接条件，即区域表中的pid字段等于单位表中的id字段。\n\n11. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即区域表中的region_name字段等于“高新校区”且单位表中的org_name字段等于“中国科学技术大学”。\n\n这个查询语句最终会返回满足条件的摄像头数量的统计结果。"
    },
    {
        "query": "镜头中没有人的室内摄像头有哪些？",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中获取数据。下面是各子句的详细解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`: 这是查询结果中显示的字段，分别是摄像头的ID、安装位置的名称和所属大楼的名称。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分是连接各个表的连接子句。`s_camera`（摄像头表）、`s_room`（房间表）、`s_building`（楼栋表）、`s_region`（区域表）和`s_organization`（单位表）是5个不同的数据库表，通过`on`关键字指定的关系进行连接。\n\n3. `where 摄像头表.inhouse = 1 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 这部分是筛选条件的子句。`inhouse`字段表示摄像头是否在室内，`= 1`表示在室内的摄像头。`not in`子句表示不在这个范围内的摄像头，即没有人的摄像头。`d_people`（人员表）中的`camera_id`字段表示该摄像头被某个人占用，`TIMESTAMPDIFF()`函数计算某个时间戳与当前时间的差值，这里小于10分钟，表示该摄像头在最近10分钟内被某人占用。\n\n4. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是额外的筛选条件子句，只选择位于“高新校区”且属于“中国科学技术大学”的摄像头。\n\n5. `order by 摄像头表.id asc limit 1000`: 这部分是排序和限制结果的子句。`order by`关键字按照摄像头的ID从小到大排序，`limit`关键字限制返回的结果数量为1000条。"
    },
    {
        "query": "高发异常行为类型",
        "script": "```sql\nselect 异常类型表.name as 异常行为类型 from d_abnormal_behavior as 异常行为表 join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by count(*) desc  limit 10;\n```\n这是一段SQL查询语句，用于从多个关联表中获取并统计特定区域的特定单位的高发异常行为类型。具体解释如下：\n\n1. `select 异常类型表.name as 异常行为类型`: 查询结果中显示的列名为“异常行为类型”，实际数据来源于\"t_abnormal_type\"表的\"name\"字段。\n\n2. `from d_abnormal_behavior as 异常行为表`: 查询的数据来源是异常行为记录表\"d_abnormal_behavior\"。\n\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`: 与摄像头信息表\"s_camera\"进行关联，通过条件\"异常行为表.camera_id=摄像头表.id\"实现。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 与房间信息表\"s_room\"进行关联，通过条件\"摄像头表.pid=房间表.id\"实现。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 与楼栋信息表\"s_building\"进行关联，通过条件\"房间表.pid=楼栋表.id\"实现。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 与区域信息表\"s_region\"进行关联，通过条件\"楼栋表.pid=区域表.id\"实现。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 与单位信息表\"s_organization\"进行关联，通过条件\"区域表.pid=单位表.id\"实现。\n\n8. `join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id`: 与异常类型表\"t_abnormal_type\"进行关联，通过条件\"异常行为表.abnormal_type=异常类型表.id\"实现。\n\n9. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 过滤条件，仅选择\"区域表.region_name\"为\"高新校区\"且\"单位表.org_name\"为\"中国科学技术大学\"的记录。\n\n10. `group by 异常类型表.name`: 对查询结果按照\"异常类型表.name\"进行分组。\n\n11. `order by count(*) desc`: 对每组按照计数（即异常行为的数量）降序排列。\n\n12. `limit 10`: 返回查询结果的前10条记录。"
    },
    {
        "query": "2号学科楼摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算2号学科楼的摄像头数量。以下是各个子句的解释：\n\n1. select: 选择要返回的列和计算的字段。\n2. count(*): 返回满足条件的摄像头的总数。\n3. as 摄像头数量: 给计数结果起个名称“摄像头数量”，方便后续使用。\n4. from: 从数据库中选取数据源。这里从s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）、s_organization（单位表）这5个表中获取数据。\n5. join: 联接多个表以获取所需信息。这里通过联接这些表，可以找到每个摄像头的详细信息以及它所在的楼层、楼栋、区域和单位。\n6. on: 指定联接条件。例如摄像头表与房间表的联接条件是pid相等，表示一个摄像头对应一个房间；其他表之间的联接也类似。\n7. where: 设置筛选条件。只有满足筛选条件的摄像头才会被计算数量。这里筛选出位于\"2号学科楼\"、\"高新校区\"和\"中国科学技术大学\"的摄像头。\n8. building_name, region_name, org_name: 分别是楼栋表、区域表和单位表的主键字段，用于确定摄像头的具体位置。"
    },
    {
        "query": "办公楼总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算\"行政办公楼\"中摄像头的数量。以下是各部分解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数`count(*)`，并将结果命名为`摄像头数量`。\n\n2. `from s_camera as 摄像头表`：从名为`s_camera`的表（这里称为“摄像头表”）开始查询。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将名为`s_room`的表（这里称为“房间表”）与摄像头表连接，连接条件是摄像头表的主键`pid`等于房间表的`id`。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将名为`s_building`的表（这里称为“楼栋表”）与房间表连接，连接条件是房间表的`pid`等于楼栋表的`id`。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将名为`s_region`的表（这里称为“区域表”）与楼栋表连接，连接条件是楼栋表的`pid`等于区域表的`id`。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将名为`s_organization`的表（这里称为“单位表”）与区域表连接，连接条件是区域表的`pid`等于单位表的`id`。\n\n7. `where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即楼栋表的名称为“行政办公楼”，区域表的名称为“高新校区”，单位表的名称为“中国科学技术大学”。\n\n这段SQL查询语句通过多表连接和筛选条件，计算出\"行政办公楼\"中的摄像头数量。"
    },
    {
        "query": "1号学科楼监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于统计1\"1号学科楼\"监控数量。下面是每个子句的详细解释：\n\n1. `SELECT count(*) as 摄像头数量`: 选择计数函数COUNT(*)作为查询结果，并为其分配一个别名“摄像头数量”。这将返回满足后续WHERE子句条件的摄像头总数。\n\n2. `FROM s_camera as 摄像头表`: 从s_camera（假设这是摄像头数据表）中获取数据。使用AS关键字将表名缩写为“摄像头表”以便于阅读和理解。\n\n3. `JOIN s_room as 房间表 ON 摄像头表.pid=房间表.id`: 连接s_room（假设这是房间数据表）到摄像头表。连接条件是摄像头表中的pid字段等于房间表的id字段。\n\n4. `JOIN s_building as 楼栋表 ON 房间表.pid=楼栋表.id`: 连接s_building（假设这是楼栋数据表）到房间表。连接条件是房间表中的pid字段等于楼栋表的id字段。\n\n5. `JOIN s_region as 区域表 ON 楼栋表.pid=区域表.id`: 连接s_region（假设这是区域数据表）到楼栋表。连接条件是楼栋表中的pid字段等于区域表的id字段。\n\n6. `JOIN s_organization as 单位表 ON 区域表.pid=单位表.id`: 连接s_organization（假设这是单位/组织数据表）到区域表。连接条件是区域表中的pid字段等于单位表的id字段。\n\n7. `WHERE 楼栋表.building_name='1号学科楼' AND 区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学'`: 设置查询的WHERE过滤条件。这些条件限制只统计属于“1号学科楼”、“高新校区”和“中国科学技术大学”的摄像头数量。\n\n这个查询的目的是从多个关联表中找出所有位于特定楼栋、特定校区和单位的所有摄像头，并计算它们的总数。"
    },
    {
        "query": "7号学生公寓人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='7号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取7号学生公寓的人数。以下是各部分解释：\n\n1. `a_people_spread_day_building`：是数据库中的一个表名，用来存储人员数量在不同时间和建筑物的分布信息。\n\n2. `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：这部分计算的是距离当前时间过去不到五个小时的时间区间。\n\n3. `and 人数分布表.building_name='7号学生公寓'`：表示只选择“7号学生公寓”的数据。\n\n4. `and 人数分布表.region_name='高新校区'`：表示只选择位于“高新校区”的数据。\n\n5. `and 人数分布表.org_name='中国科学技术大学'`：表示只选择属于“中国科学技术大学”的数据。\n\n6. `order by 人数分布表.stat_time desc`：按照统计时间倒序排列数据，即最新的数据排在最前面。\n\n7. `limit 1`：限制返回的结果只有一条。\n\n综上，这个SQL语句的目的是查询7号学生公寓在最近的5小时内的人数分布情况（如果有的话），且该数据属于“中国科学技术大学”的“高新校区”。"
    },
    {
        "query": "行政办公楼监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于统计某校区某个单位的行政办公楼内的摄像头数量。以下是各个子句的说明：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数`count()`计算摄像头的总数，并将结果命名为“摄像头数量”。\n2. `from s_camera as 摄像头表`: 从摄像头表（假设名为s_camera）开始查询。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接房间表（假设名为s_room），连接条件是摄像头表的pid字段等于房间表的id字段。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接楼栋表（假设名为s_building），连接条件是房间表的pid字段等于楼栋表的id字段。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接区域表（假设名为s_region），连接条件是楼栋表的pid字段等于区域表的id字段。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接单位表（假设名为s_organization），连接条件是区域表的pid字段等于单位表的id字段。\n7. `where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只返回满足这些条件的记录。即：楼栋名称为“行政办公楼”、区域名称为“高新校区”且单位为“中国科学技术大学”的数据。"
    },
    {
        "query": "给出所有室外摄像头的编号",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse=0 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id  limit 1000;\n```\n这是一个SQL查询语句，用于从数据库中获取所有室外摄像头的编号、安装位置、所在大楼等信息。以下是各部分的具体解释：\n\n1. select: 选择需要返回的数据列。\n2. 摄像头表.id as 摄像头编号: 从摄像头表中选取id列作为摄像头编号。\n3. 房间表.room_name as 安装位置: 从房间表中选取room_name列作为摄像头的安装位置。\n4. 楼栋表.building_name as 所在大楼: 从楼栋表中选取building_name列作为摄像头的所在大楼。\n5. from: 指定数据源，即要从哪些表中获取数据。\n6. s_camera as 摄像头表: 将s_camera表称为摄像头表。\n7. join: 连接其他表与摄像头表。\n8. s_room as 房间表: 将s_room表称为房间表。\n9. on: 指定连接条件，即摄像头表的pid等于房间表的id。\n10. s_building as 楼栋表: 将s_building表称为楼栋表。\n11. on: 指定连接条件，即房间表的pid等于楼栋表的id。\n12. s_region as 区域表: 将s_region表称为区域表。\n13. on: 指定连接条件，即楼栋表的pid等于区域表的id。\n14. s_organization as 单位表: 将s_organization表称为单位表。\n15. on: 指定连接条件，即区域表的pid等于单位表的id。\n16. where: 设置查询条件，即要满足以下条件才返回结果。\n17. 摄像头表.inhouse=0: 摄像头的室内/室外属性为0，表示是室外摄像头。\n18. 区域表.region_name='高新校区': 区域名为“高新校区”。\n19. 单位表.org_name='中国科学技术大学': 单位为“中国科学技术大学”。\n20. order by: 对查询结果进行排序，这里按照摄像头表的id升序排列。\n21. limit: 限制返回的记录数，这里是1000条。"
    },
    {
        "query": "统计师生活动中心每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中获取某个建筑（师生活动中心）在特定时间段内（过去30天内）的单日最大人流量信息。下面是各部分的具体解释：\n\n1. select：选择要返回的列。在这个例子中，选择了两个列，分别是统计时间和平均人数。\n2. min(人数分布表.stat_time) as 统计时间：获取每天的最早时间作为该天的代表时间。min函数在这里用来获取每一天的最小时间（即最早的时间）。\n3. round(max(人数分布表.num)) as 平均人数：计算并保留每位小数的人数均值。round函数在此用于将计算出的最大人数四舍五入到指定的小数位数。\n4. from：指定数据来源表。这里是`a_people_spread_day_building`表，通常用于存储人流量数据。\n5. WHERE：过滤条件。这里设置了多个过滤条件，包括建筑名、日期范围、校区和机构名称等，确保只选取满足这些条件的数据。\n6. DATEDIFF(now(), 人数分布表.stat_time) < 30：这个子句限制返回的数据是在过去30天内记录的。DATEDIFF是SQL中用于计算两个日期之间差值的函数，这里用现在的时间和统计时间相减来判断是否在过去30天内。\n7. group by：按照某一列或多列对数据进行分组，这里按照`人数分布表.stat_day`进行分组，即将同一天的数据视为一组。\n8. order by：排序方式，这里按照最小统计时间升序排列。"
    },
    {
        "query": "师生活动中心安装了哪些摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从数据库中获取安装在特定地点的摄像头的详细信息。具体来说：\n\n1. `select`: 选择要查询的列。\n2. `摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 列出需要查询的摄像头、IP地址和安装位置的名称。\n3. `from`: 指定要查询的数据库表，这里包括四个表：`s_camera（摄像头表）`，`s_room（房间表）`，`s_building（楼栋表）`和`s_region（区域表）`。\n4. `join`: 连接这些表以获取所需信息。这里的连接条件是摄像头表的`pid`与房间表的`id`相等，房间表的`pid`与楼栋表的`id`相等，楼栋表的`pid`与区域表的`id`相等，区域表的`pid`与单位表的`id`相等。\n5. `where`: 设定查询条件。这里是限制查询结果为“师生活动中心”的摄像头，且位于“高新校区”和“中国科学技术大学”。\n6. `order by`: 按摄像头表的`id`升序排列查询结果。\n7. `limit 1000`: 限制查询结果的数量为1000条。"
    },
    {
        "query": "给出师生活动中心的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从数据库中获取\"师生活动中心\"的摄像头数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择摄像头的总数作为结果集的一列，命名为\"摄像头数量\"。\n2. `from s_camera as 摄像头表`：指定摄像头数据所在的表名为\"s_camera\"，这里将其简称为\"摄像头表\"。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将\"s_room\"表（表示各个房间）与\"摄像头表\"进行连接，连接条件是摄像头表的\"pid\"字段等于房间表的\"id\"字段。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将\"s_building\"表（表示各个楼宇）与\"房间表\"进行连接，连接条件是房间表的\"pid\"字段等于楼栋表的\"id\"字段。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将\"s_region\"表（表示各个地区）与\"楼栋表\"进行连接，连接条件是楼栋表的\"pid\"字段等于区域表的\"id\"字段。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将\"s_organization\"表（表示各个单位）与\"区域表\"进行连接，连接条件是区域表的\"pid\"字段等于单位表的\"id\"字段。\n7. `where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设定查询条件，即查找满足以下条件的摄像头：位于\"师生活动中心\"楼宇、\"高新校区\"地区和\"中国科学技术大学\"单位的摄像头。\n\n综合以上，这个查询语句的目的是计算位于\"师生活动中心\"的\"中国科学技术大学\"的\"高新校区\"内的摄像头数量。"
    },
    {
        "query": "操场摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算某个特定条件下的摄像头数量。下面是各子句的解释：\n\n1. `SELECT`: 选择需要返回的列和表达式。这里选择的是`COUNT(*)`，表示计算所有摄像头的总数。\n\n2. `COUNT(*) AS 摄像头数量`: 计算并返回摄像头的数量，将其命名为`摄像头数量`。\n\n3. `FROM s_camera AS 摄像头表`: 指定数据来源表是`s_camera`，并将其简称为`摄像头表`。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid=房间表.id`: 联接`s_room`表（简称`房间表`），连接条件是`摄像头表`中的`pid`等于`房间表`的`id`。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid=楼栋表.id`: 联接`s_building`表（简称`楼栋表`），连接条件是`房间表`的`pid`等于`楼栋表`的`id`。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid=区域表.id`: 联接`s_region`表（简称`区域表`），连接条件是`楼栋表`的`pid`等于`区域表`的`id`。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid=单位表.id`: 联接`s_organization`表（简称`单位表`），连接条件是`区域表`的`pid`等于`单位表`的`id`。\n\n8. `WHERE 楼栋表.building_name='体育场' AND 区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学'`: 设置查询条件，即只返回满足以下条件的数据：楼栋名为“体育场”，区域名为“高新校区”，单位名为“中国科学技术大学”。\n\n综上，这段SQL语句的目的是查询满足特定条件（体育场、高新校区、中国科学技术大学）的所有摄像头的数量。"
    },
    {
        "query": "当前没拍到人的室内摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从数据库中获取满足特定条件的摄像头信息。以下是各部分解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`：这是查询的字段，包括摄像头的ID（摄像头编号）、安装位置的名称（房间名）和所属大楼的名称。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id`：这是连接各个表的JOIN子句，通过摄像头表的`pid`字段将摄像头与房间、楼栋、区域和单位关联起来。\n\n3. `where 摄像头表.inhouse = 1 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是WHERE子句，过滤出以下条件下的摄像头信息：摄像头在室内（`摄像头表.inhouse = 1`）；摄像头在过去的10分钟内没有拍摄到人的记录（通过子查询判断，即`摄像头表.id not in (...)`）；摄像头位于指定区域（'高新校区'）和单位（'中国科学技术大学'）。\n\n4. `order by 摄像头表.id asc limit 1000;`：这是ORDER BY和LIMIT子句，按照摄像头ID从小到大排序（ASC升序），并限制返回结果的数量为1000条。"
    },
    {
        "query": "3号学科楼安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个 SQL 查询语句，用于统计 3 号学科楼安装的监控数量。这个查询涉及到多个表（s_camera, s_room, s_building, s_region 和 s_organization），通过连接和条件筛选来计算结果。\n\n1. select count(*) as 摄像头数量: 这行代码用于计算满足后续条件的摄像头数量。\n2. from s_camera as 摄像头表: 从 s_camera 这个表开始查询，为了方便阅读，给它起了个别名“摄像头表”。\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id: 这行代码将摄像头表与房间表通过摄像头的项目编号（pid）与房间的项目编号（id）相等进行连接。\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 这行代码将房间表与楼栋表通过房间的项目编号（pid）与楼栋的项目编号（id）相等进行连接。\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id: 这行代码将楼栋表与区域表通过楼栋的项目编号（pid）与区域的项目编号（id）相等进行连接。\n6. join s_organization as 单位表 on 区域表.pid=单位表.id: 这行代码将区域表与单位表通过区域的项目编号（pid）与单位的组织名称（id）相等进行连接。\n7. where 楼栋表.building_name='3号学科楼': 这行代码设置了筛选条件，即要求查询的楼栋名为“3号学科楼”。\n8. and 区域表.region_name='高新校区': 这行代码继续设置筛选条件，即要求查询的区域名称为“高新校区”。\n9. and 单位表.org_name='中国科学技术大学': 这行代码再次设置筛选条件，即要求查询的单位组织名称为“中国科学技术大学”。"
    },
    {
        "query": "信智楼5分钟内识别到多少背双肩包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个复杂的SQL查询语句，用于从多个表中选择并统计满足特定条件的数据。下面是对这个SQL语句的分解和解释：\n\n1. `SELECT count(*) as 背双肩包的人数`: 选择计数函数（count）对所有行进行计算，并将结果命名为\"背双肩包的人数\"。\n\n2. `FROM d_people AS 人员表`: 从d_people表开始查询，并将该表简写为“人员表”。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`: 将s_camera表与人员表通过camera_id字段连接在一起，摄像头表的字段被缩写为“摄像头表.id”。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 将s_room表与摄像头表通过pid字段连接在一起，房间表的字段被缩写为“房间表.id”。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 将s_building表与房间表通过pid字段连接在一起，楼栋表的字段被缩写为“楼栋表.id”。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 将s_region表与楼栋表通过pid字段连接在一起，区域表的字段被缩写为“区域表.id”。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 将s_organization表与区域表通过pid字段连接在一起，单位表的字段被缩写为“单位表.id”。\n\n8. `JOIN t_bag AS 背包维表 ON 人员表.bag = 背包维表.id`: 将t_bag表与人员表通过bag字段连接在一起，背包维表的字段被缩写为“背包维表.id”。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, NOW()) < 5 AND 背包维表.name = '背包' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学' AND 楼栋表.building_name = '信智楼'`: 设置查询条件，要求时间戳差（即人员表中的moment时间与当前时间的分钟差）小于5分钟，并且背包维表的name字段值为“背包”，区域表的region_name字段值为“高新校区”，单位表的org_name字段值为“中国科学技术大学”，楼栋表的building_name字段值为“信智楼”。"
    },
    {
        "query": "师生活动中心人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='师生活动中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中检索关于师生活动中心的最近的人数数据。具体解释如下：\n\n1. `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这个条件是限制统计时间距离当前时间（即now()函数返回的时间）在五小时以内。\n\n2. `and 人数分布表.building_name='师生活动中心'`: 这个条件是限制检索的记录必须是师生活动中心的。\n\n3. `and 人数分布表.region_name='高新校区'`: 这个条件是限制检索的记录必须是高新校区的。\n\n4. `and 人数分布表.org_name='中国科学技术大学'`: 这个条件是限制检索的记录必须是中国科学技术大学的。\n\n5. `order by 人数分布表.stat_time desc`: 这个条件是按统计时间降序排列，也就是最新的数据排在最前面。\n\n6. `limit 1`: 这个条件是限制只返回一条记录，也就是最新的关于师生活动中心的人数数据。"
    },
    {
        "query": "信智楼安装了哪些摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从数据库中获取安装在特定地点的摄像头信息。以下是各子句的解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 这是查询的字段，包括摄像头的ID（摄像头编号）、IP地址和安装位置（房间名）。\n\n2. `from s_camera as 摄像头表`: 指定数据来源，即摄像头信息表，简称为摄像头表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表与房间表，基于摄像头表中的pid（父级ID）等于房间表中的id这一条件进行联接。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表与楼栋表，基于房间表中的pid（父级ID）等于楼栋表中的id这一条件进行联接。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表与区域表，基于楼栋表中的pid（父级ID）等于区域表中的id这一条件进行联接。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表与单位表，基于区域表中的pid（父级ID）等于单位表中的id这一条件进行联接。\n\n7. `where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求查询出的摄像头位于名为“信智楼”的建筑，且该建筑位于名为“高新校区”的区域，以及该区域的单位是名为“中国科学技术大学”的单位。\n\n8. `order by 摄像头表.id asc limit 1000;`: 对查询结果按照摄像头表的id升序排序，并限制返回的结果数量为1000条。"
    },
    {
        "query": "人员密集区",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num desc  limit 10;\n```\n这是一段SQL查询语句，用于查询某个时间段内在指定区域和组织的某建筑内的人数分布情况，并将结果按照人数降序排列，只返回前10条记录。\n\n具体解析如下：\n\n1. `select 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数`: 选择两个列，一个是建筑名称（用别名“建筑名称”表示），另一个是人数（用别名“人数”表示）。\n\n2. `from a_people_spread_day_building as 人数分布表`: 指定数据来源表，名为a_people_spread_day_building，并为其设置一个别名“人数分布表”，方便后续在查询条件中使用。\n\n3. `where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 设定查询条件，要求统计时间距现在的时间小于5小时，所在区域名称为“高新校区”，所在组织名称为“中国科学技术大学”。\n\n4. `order by 人数分布表.num desc`: 对查询结果按照人数进行降序排序。\n\n5. `limit 10`: 限制查询结果的条数，只返回前10条记录。"
    },
    {
        "query": "找出图书馆一个月内，每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取图书馆一个月内每天的最大人数。以下是各部分的解释：\n\n1. `SELECT min(人数分布表.stat_time) as 统计时间`: 选择最小的时间（即一个月的第一天）作为“统计时间”。\n\n2. `round(max(人数分布表.num)) as 平均人数`: 计算每天的最高人数，并保留小数位后的数字（四舍五入），将其命名为“平均人数”。\n\n3. `FROM a_people_spread_day_building as 人数分布表`: 从名为\"a_people_spread_day_building\"的表中选取数据，并将此表简称为“人数分布表”。\n\n4. `WHERE 人数分布表.building_name='图书教育中心'`: 限制条件，仅选择\"图书教育中心\"的数据。\n\n5. `AND DATEDIFF(now(), 人数分布表.stat_time) < 30`: 计算当前时间与统计表中的时间差，确保结果在一个月内。\n\n6. `AND 人数分布表.region_name='高新校区'`: 限制条件，仅选择位于“高新校区”的数据。\n\n7. `AND 人数分布表.org_name='中国科学技术大学'`: 限制条件，仅选择属于“中国科学技术大学”的数据。\n\n8. `GROUP BY 人数分布表.stat_day`: 对每天的记录进行分组，以便于计算每天的最高人数。\n\n9. `ORDER BY min(人数分布表.stat_time) ASC`: 根据统计时间的最小值对结果进行排序，保证结果为按天顺序排列。"
    },
    {
        "query": "近期发生了哪些异常行为？",
        "script": "```sql\nselect 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) <1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 异常行为表.moment desc limit 10;\n```\n这是一段SQL查询语句，用于从多个表中获取特定条件下的数据。下面是各部分的具体解释：\n\n1. `select`: 选择要从表中获取的列。\n2. `异常行为表.camera_id as 摄像头编号`: 从异常行为表中选取camera_id列为摄像头编号。\n3. `房间表.room_name as 异常发生地点`: 从房间表中选取room_name列为异常发生地点。\n4. `异常行为表.moment as 异常发生时刻`: 从异常行为表中选取moment列为异常发生时刻。\n5. `异常类型表.name as 异常类型`: 从异常类型表中选取name列为异常类型。\n6. `from d_abnormal_behavior as 异常行为表`: 指定要查询的表，这里是异常行为表。\n7. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`: 连接摄像头表，根据camera_id列匹配两个表的记录。\n8. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接房间表，根据摄像头表的父级ID（pid）匹配两个表的记录。\n9. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接楼栋表，根据房间表的父级ID（pid）匹配两个表的记录。\n10. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接区域表，根据楼栋表的父级ID（pid）匹配两个表的记录。\n11. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接单位表，根据区域表的父级ID（pid）匹配两个表的记录。\n12. `join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id`: 连接异常类型表，根据异常行为表的异常类型字段（abnormal_type）匹配两个表的记录。\n13. `where DATEDIFF(now(), 异常行为表.moment) <1`: 设置查询条件，即异常行为发生的时刻与当前时刻（now()函数返回当前日期和时间）的时间差小于1天。\n14. `and 区域表.region_name='高新校区'`: 设置额外的查询条件，即区域表中的region_name字段值为'高新校区'。\n15. `and 单位表.org_name='中国科学技术大学'`: 设置额外的查询条件，即单位表中的org_name字段值为'中国科学技术大学'。\n16. `order by 异常行为表.moment desc limit 10`: 对查询结果进行排序，按照异常发生时刻（moment）降序排列，然后限制返回的结果数量为10条。"
    },
    {
        "query": "最近发生的异常行为有哪些？",
        "script": "```sql\nselect 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) <1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 异常行为表.moment desc limit 10;\n```\n这是一段SQL查询语句，用于从数据库中获取特定条件下的异常行为信息。以下是各子句的解析：\n\n1. `select 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型`：定义了要查询的列，包括摄像头编号（实际存储在异常行为表中，这里为了方便理解起见，将其称为“摄像头编号”）、异常发生地点（实际存储在房间表中，这里为了方便理解起见，将其称为“异常发生地点”）、异常发生时刻（实际存储在异常行为表中，这里为了方便理解起见，将其称为“异常发生时刻”）和异常类型（实际存储在异常类型表中，这里为了方便理解起见，将其称为“异常类型”）。\n\n2. `from d_abnormal_behavior as 异常行为表`：指定查询的起始表为异常行为表（假设该表的名称是d_abnormal_behavior）。\n\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`：将摄像头表与异常行为表通过camera_id字段连接在一起。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将房间表与摄像头表通过pid字段连接在一起。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将楼栋表与房间表通过pid字段连接在一起。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将区域表与楼栋表通过pid字段连接在一起。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将单位表与区域表通过pid字段连接在一起。\n\n8. `join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id`：将异常类型表与异常行为表通过abnormal_type字段连接在一起。\n\n9. `where DATEDIFF(now(), 异常行为表.moment) <1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询的条件，即：异常行为发生的时间距离现在不超过1天；异常行为发生在“高新校区”；异常行为发生在“中国科学技术大学”。\n\n10. `order by 异常行为表.moment desc limit 10`：按照异常行为发生的时间降序排列，并返回前10条结果。"
    },
    {
        "query": "现在有多少人在信智楼？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='信智楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取\"信智楼\"当前的人数。下面是对该SQL的解析：\n\n1. `select 人数分布表.num as 人数`：选择名为\"人数分布表\"的表中的\"num\"字段，并将结果命名为\"人数\"；\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源为\"a_people_spread_day_building\"表，并将其简称为\"人数分布表\"；\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：筛选出距离当前时间（now()函数返回）在5小时以内的记录；\n4. `and 人数分布表.building_name='信智楼'`：限制建筑名称为\"信智楼\"的记录；\n5. `and 人数分布表.region_name='高新校区'`：限制地区名称为\"高新校区\"的记录；\n6. `and 人数分布表.org_name='中国科学技术大学'`：限制组织名称为\"中国科学技术大学\"的记录；\n7. `order by 人数分布表.stat_time desc`：按照统计时间的降序排列记录；\n8. `limit 1`：只返回一条记录。"
    },
    {
        "query": "找出近期从学生食堂出发的一些行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中查找并返回一些记录。以下是各部分的主要解释：\n\n1. `select`: SQL的关键字，用于告诉数据库我们需要获取哪些列的数据。\n\n2. `start_time as 轨迹起始时间, end_time as 轨迹结束时间, name as 虚拟人名, camera_id_list as 经过的摄像头Id`: 这四列是我们想要获取的列数据。\"start_time\"和\"end_time\"分别表示行人轨迹的开始时间和结束时间，\"name\"是虚拟人的名字，\"camera_id_list\"是行人经过的摄像头ID列表。\n\n3. `from a_people_trail as 行人轨迹表`: 这是我们从哪个表中获取数据。在这个例子中，我们是从一个名为\"a_people_trail\"的表中获取数据，并将这个表称为\"行人轨迹表\"。\n\n4. `join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id`: 这是第一个连接条件。我们将\"a_people_trail\"表（行人轨迹表）与另一个名为\"s_camera\"的表（摄像头表）进行连接，连接条件是\"行人轨迹表\"中的\"start_camera_id\"等于\"摄像头表\"中的\"id\"。\n\n5. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这是第二个连接条件。我们将\"摄像头表\"与另一个名为\"s_room\"的表（房间表）进行连接，连接条件是\"摄像头表\"中的\"pid\"等于\"房间表\"中的\"id\"。\n\n6. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这是第三个连接条件。我们将\"房间表\"与另一个名为\"s_building\"的表（楼栋表）进行连接，连接条件是\"房间表\"中的\"pid\"等于\"楼栋表\"中的\"id\"。\n\n7. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这是第四个连接条件。我们将\"楼栋表\"与另一个名为\"s_region\"的表（区域表）进行连接，连接条件是\"楼栋表\"中的\"pid\"等于\"区域表\"中的\"id\"。\n\n8. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这是第五个连接条件。我们将\"区域表\"与另一个名为\"s_organization\"的表（单位表）进行连接，连接条件是\"区域表\"中的\"pid\"等于\"单位表\"中的\"id\"。\n\n9. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂'`: 这是过滤条件。只有满足这些条件的记录才会被查询出来。在这个例子中，我们需要找到位于\"高新校区\"且属于\"中国科学技术大学\"，同时起点是\"学生食堂\"的行人轨迹。\n\n10. `order by 行人轨迹表.start_time desc`: 这是排序条件。我们将结果按照\"行人轨迹表\"中的\"start_time\"降序排列，即最近的记录会排在前面。\n\n11. `limit 10`: 这是限制条件。我们只取满足上述条件的最近10条记录。"
    },
    {
        "query": "目前信智楼没人的房间有多少？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'     and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一段SQL查询语句，用于计算某个特定条件下的房间数量。以下是各子句的解读：\n\n1. `count(房间表.room_name)`：统计房间数量。这里使用了`count()`函数和`room_name`字段作为参数，目的是获取满足条件的房间总数。\n\n2. `s_camera as 摄像头表`、`s_room as 房间表`、`s_building as 楼栋表`、`s_region as 区域表` 和 `s_organization as 单位表`：这是五个关联表的别名。这些表分别对应摄像头的数据、房间的数据、楼栋的数据、区域的数据和单位（如学校）的数据。\n\n3. `on 摄像头表.pid=房间表.id`、`on 摄像头表.pid=楼栋表.id`、`on 房间表.pid=楼栋表.id` 和 `on 楼栋表.pid=区域表.id`：这四个连接条件表示了这些表之间的关系。在这里，摄像头与房间通过PID（项目ID）进行关联，房间与楼栋同样通过PID关联，楼栋与区域通过PID关联。\n\n4. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`：这个条件筛选出特定的区域、单位和楼栋的信息，即\"高新校区\"的中国科学技术大学的\"信智楼\"。\n\n5. `and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：这个子句进一步过滤了摄像头数据，排除掉在10分钟内有人员出现的摄像头对应的房间。这样可以保证计算的是当前没有人员的房间数量。"
    },
    {
        "query": "镜头中有人的室内摄像头有哪些？",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中检索特定条件下的数据。以下是各部分解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`: 选择要返回的列，包括摄像头的ID（作为摄像头编号）、所在房间名称（作为安装位置）和所属楼栋名称（作为所属大楼）。\n\n2. `from s_camera as 摄像头表`: 指定查询的主表，即摄像头表（s_camera）。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和房间表，基于摄像头所在房间的关系（摄像头表的pid等于房间表的id）。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表和楼栋表，基于房间所属楼栋的关系（房间表的pid等于楼栋表的id）。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表和区域表，基于楼栋所在区域的关系（楼栋表的pid等于区域表的id）。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表和单位表，基于区域所属单位的关系（区域表的pid等于单位表的id）。\n\n7. `where 摄像头表.inhouse = 1 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 设置筛选条件，要求摄像头是在室内的（摄像头表中的inhouse字段值为1），并且这些摄像头在最近10分钟内有人使用过（通过子查询d_people获取）。\n\n8. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 进一步限制查询结果，要求摄像头所在的区域名称为“高新校区”，且所属单位为“中国科学技术大学”。\n\n9. `order by 摄像头表.id asc limit 1000`: 对查询结果进行排序（按照摄像头ID从小到大排列）并限制返回数量（最多1000条记录）。"
    },
    {
        "query": "5分钟内识别到多少戴帽子的行人？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于在5分钟时间内识别并统计戴帽子的行人数量。以下是各子句和表的解释：\n\n1. `d_people`：人员表，存储了行人的相关信息，如相机ID等；\n2. `s_camera`：摄像头表，存储了摄像头的详细信息，包括ID和所在房间等信息；\n3. `s_room`：房间表，存储了每个房间的相关信息，包括所属楼栋ID；\n4. `s_building`：楼栋表，存储了每个楼栋的详细信息，包括所属区域的ID；\n5. `s_region`：区域表，存储了各个区域的详细信息，包括所属单位的ID；\n6. `s_organization`：单位表，存储了各单位的详细信息；\n7. `t_hat`：帽子维表，存储了不同帽子的信息，包括名称等；\n8. `TIMESTAMPDIFF(MINUTE, moment, now()) < 5`：表示只计算在过去5分钟内出现的行人数量；\n9. `帽子维表.name='戴帽子'`：过滤出戴帽子的行人数量；\n10. `区域表.region_name='高新校区'`：限制统计的范围是高新校区；\n11. `单位表.org_name='中国科学技术大学'`：限制统计的单位为中国科学技术大学。\n\n这个查询的目的是计算在最近5分钟内，高新校区的中国科学技术大学内的摄像头捕捉到的戴帽子的行人数量。"
    },
    {
        "query": "不同朝向的人数",
        "script": "```sql\nselect 朝向维表.name as 朝向, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 朝向维表.name  order by 朝向维表.name asc;\n```\n这是一个SQL查询语句，用于统计不同朝向的人数。下面是各个子句的解析：\n\n1. select 朝向维表.name as 朝向, count(*) as 人数: 选择字段，其中“朝向”是朝向维表的名称字段，“人数”是每个朝向的人数。\n\n2. from d_people as 人员表: 从d_people（人员表）开始查询。\n\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 联接s_camera（摄像头表），依据条件是人员表中的camera_id等于摄像头表中的id。\n\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 联接s_room（房间表），依据条件是摄像头表中的pid等于房间表中的id。\n\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 联接s_building（楼栋表），依据条件是房间表中的pid等于楼栋表中的id。\n\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 联接s_region（区域表），依据条件是楼栋表中的pid等于区域表中的id。\n\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 联接s_organization（单位表），依据条件是区域表中的pid等于单位表中的id。\n\n8. join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id: 联接t_orientation（朝向维表），依据条件是人员表中的orientation等于朝向维表中的id。\n\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学': 查询条件，限制结果为最近5分钟内的数据，且区域为\"高新校区\"，单位为\"中国科学技术大学\"。\n\n10. group by 朝向维表.name: 对每个朝向进行分组，以便计算该朝向的人数。\n\n11. order by 朝向维表.name asc: 对朝向进行升序排列，结果按照朝向的字母顺序展示。"
    },
    {
        "query": "运动场安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算在某个特定条件下运动场安装的摄像头数量。以下是各个子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数COUNT(*)作为查询结果，并将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`: 指定查询的主表s_camera，将其简称为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 使用INNER JOIN连接s_camera和s_room两张表，连接条件是摄像头表的pid等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 使用INNER JOIN连接s_room和s_building两张表，连接条件是房间表的pid等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 使用INNER JOIN连接s_building和s_region两张表，连接条件是楼栋表的pid等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 使用INNER JOIN连接s_region和s_organization两张表，连接条件是区域表的pid等于单位表的id。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询的条件，即楼栋表的building_name必须等于\"体育场\"，区域表的region_name必须等于\"高新校区\"，单位表的org_name必须等于\"中国科学技术大学\"。\n\n综合以上各部分，这个SQL语句的目的是查询满足特定条件的运动场的摄像头数量，即位于\"高新校区\"的\"中国科学技术大学\"的\"体育场\"内的摄像头数量。"
    },
    {
        "query": "老师食堂的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL语句是用于查询某个特定时间范围内（比如过去5小时内）的某个学校食堂（这里是教工食堂）的人数情况。以下是各子句的解释：\n\n1. `select 人数分布表.num as 人数`: 这行代码表示选择`人数分布表`中的`num`字段并将它重命名为`人数`；\n\n2. `from a_people_spread_day_building as 人数分布表`: 这行代码表示从这个名为`a_people_spread_day_building`的表中选择数据，并将这个表暂时重命名为`人数分布表`以便于后续操作；\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这行代码表示只选择在过去的5小时内的数据；\n\n4. `and 人数分布表.building_name='教工食堂'`: 这行代码表示只选择食堂名称为“教工食堂”的数据；\n\n5. `and 人数分布表.region_name='高新校区'`: 这行代码表示只选择位于“高新校区”的数据；\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 这行代码表示只选择属于“中国科学技术大学”的数据；\n\n7. `order by 人数分布表.stat_time desc`: 这行代码表示按照统计时间倒序排列数据；\n\n8. `limit 1`: 这行代码表示只返回一条数据。"
    },
    {
        "query": "食堂安装了多少摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于查询满足特定条件的食堂安装了摄像头的数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数count(*)作为结果，并将返回的结果命名为“摄像头数量”。\n2. `from s_camera as 摄像头表`：指定数据源，即摄像头表，别名设为“摄像头表”以便在后续连接中使用。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，连接条件是摄像头表的pid（可能是设备ID）等于房间表的id。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，连接条件是房间表的pid等于楼栋表的id。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，连接条件是楼栋表的pid等于区域表的id。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，连接条件是区域表的pid等于单位表的id。\n7. `where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即楼栋名称必须为“学生食堂”，区域名称必须为“高新校区”，单位名称必须为“中国科学技术大学”。\n\n这个查询语句的目的是计算满足这些条件的食堂安装了摄像头的数量。"
    },
    {
        "query": "信智楼未背包的人数",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这个SQL语句是一个复杂的联表查询，用于查询\"信智楼\"未背包的人数。以下是各个子句的作用：\n\n1. `SELECT count(*) as 背双肩包的人数`：选择计数函数count(*)作为结果，并将其命名为“背双肩包的人数”。\n\n2. `FROM d_people as 人员表`：指定查询的主表是d_people，并为其起别名“人员表”。\n\n3. `JOIN s_camera as 摄像头表 ON 人员表.camera_id = 摄像头表.id`：将s_camera表与人员表通过camera_id和id字段连接起来。\n\n4. `JOIN s_room as 房间表 ON 摄像头表.pid = 房间表.id`：将s_room表与摄像头表通过pid和id字段连接起来。\n\n5. `JOIN s_building as 楼栋表 ON 房间表.pid = 楼栋表.id`：将s_building表与房间表通过pid和id字段连接起来。\n\n6. `JOIN s_region as 区域表 ON 楼栋表.pid = 区域表.id`：将s_region表与楼栋表通过pid和id字段连接起来。\n\n7. `JOIN s_organization as 单位表 ON 区域表.pid = 单位表.id`：将s_organization表与区域表通过pid和id字段连接起来。\n\n8. `JOIN t_bag as 背包维表 ON 人员表.bag = 背包维表.id`：将t_bag表与人员表通过bag和id字段连接起来。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, NOW()) < 5 AND 背包维表.name = '未背包' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学' AND 楼栋表.building_name = '信智楼'`：设置查询条件，包括时间差、背包状态、校区名称、单位名称以及楼栋名称等。\n\n这个SQL语句的目的是查询在\"信智楼\"且\"未背包\"的人员数量。"
    },
    {
        "query": "查一下图书教育中心的所有摄像头的基本信息",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这个SQL查询语句的目的是获取“图书教育中心”所有摄像头的基本信息。它从多个关联的表格（s_camera、s_room、s_building、s_region和s_organization）中获取数据。以下是这个查询语句的解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：这是查询的结果集，包含了摄像头编号、IP地址和安装位置这三个字段。\n\n2. `from s_camera as 摄像头表`：指定查询的主表是s_camera，也就是摄像头信息表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过摄像头表的pid字段与房间表的id字段关联，获取每个摄像头的具体安装位置。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：通过房间表的pid字段与楼栋表的id字段关联，获取每个摄像头的所在楼栋信息。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过楼栋表的pid字段与区域表的id字段关联，获取每个摄像头的所在区域信息。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：通过区域表的pid字段与单位表的id字段关联，获取每个摄像头的所在单位信息。\n\n7. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，只返回“图书教育中心”、“高新校区”和“中国科学技术大学”的摄像头信息。\n\n8. `order by 摄像头表.id asc limit 1000`：按照摄像头编号升序排列结果集，并限制返回的前1000条记录。"
    },
    {
        "query": "统计图书馆一个月内每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个 SQL 查询语句，用于统计图书馆在一个月内（从当前日期往前推30天）每天的最大人数。具体解释如下：\n\n1. `select`: 选择要返回的列；\n2. `min(人数分布表.stat_time) as 统计时间`: 选择每天的人数统计数据的最小值作为统计时间；\n3. `round(max(人数分布表.num)) as 平均人数`: 计算每天的最大人数并四舍五入保留整数位；\n4. `from a_people_spread_day_building as 人数分布表`: 数据来源是 \"a_people_spread_day_building\" 表，这里将其重命名为 \"人数分布表\" 以便于理解；\n5. `WHERE`: 设置筛选条件；\n6. `DATEDIFF(now(), 人数分布表.stat_time) < 30`: 限制条件是统计时间在当前日期往前推30天内；\n7. `and`: 连接多个筛选条件；\n8. `人数分布表.building_name='图书教育中心'`: 只选择 \"图书教育中心\" 的数据；\n9. `and`: 继续连接筛选条件；\n10. `人数分布表.region_name='高新校区'`: 只选择 \"高新校区\" 的数据；\n11. `and`: 继续连接筛选条件；\n12. `人数分布表.org_name='中国科学技术大学'`: 只选择 \"中国科学技术大学\" 的数据；\n13. `group by`: 对每天的统计结果进行分组；\n14. `order by`: 对每组数据进行排序；\n15. `min(人数分布表.stat_time) asc`: 按照统计时间的最小值升序排列。"
    },
    {
        "query": "统计图书教育中心一个月内每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个 SQL 查询语句，用于从数据库中获取图书教育中心在一个月内的最高每日人数。以下是各部分的解释：\n\n1. `select`: 选择需要查询的列。这里选择了最小统计时间和最大平均人数。\n2. `min(人数分布表.stat_time) as 统计时间`: 选择每日的最小统计时间（即开始时间）作为统计时间。\n3. `round(max(人数分布表.num)) as 平均人数`: 计算并取整每天的最高人数作为平均人数。\n4. `from a_people_spread_day_building as 人数分布表`: 指定数据来源表，名为“a_people_spread_day_building”，别名设为“人数分布表”。\n5. `WHERE`: 设定查询条件。这里要求建筑名称为“图书教育中心”，统计时间与当前时间之差小于30天，所在地区名称为“高新校区”，组织名称为“中国科学技术大学”。\n6. `group by`: 对结果进行分组，按照统计日期（人数分布表.stat_day）分组。\n7. `order by`: 对结果进行排序，按统计时间升序排列。\n\n这个查询会返回一个包含一个月内在图书教育中心每日最高人数的表格，按照统计时间升序排列。"
    },
    {
        "query": "给出4号学生公寓的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一条SQL查询语句，用于计算4号学生公寓的摄像头数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择函数count(*)作为摄像头数量列。count(*)是聚合函数，用于计算满足条件的数据行数。这里将计数结果命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`: 从名为s_camera的数据表（摄像头表）中获取数据。这是摄像头的数据表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room数据表（房间表）。在摄像头表和房间表之间建立关联，条件是摄像头表的pid等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building数据表（楼栋表）。在房间表和楼栋表之间建立关联，条件是房间表的pid等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region数据表（区域表）。在楼栋表和区域表之间建立关联，条件是楼栋表的pid等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization数据表（单位表）。在区域表和单位表之间建立关联，条件是区域表的pid等于单位表的id。\n\n7. `where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件。要求楼栋表的建筑名称是'4号学生公寓'，区域表的区域名称是'高新校区'，单位表的机构名称是'中国科学技术大学'。\n\n综合以上信息，这条SQL语句的目的是查找并计算满足特定条件（4号学生公寓、高新校区和中国科学技术大学）的所有摄像头数量。"
    },
    {
        "query": "统计信智楼每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取“信智楼”（a_people_spread_day_building）每天的最小人数。以下是各部分解释：\n\n1. select min(人数分布表.stat_time) as 统计时间: 选择最小的时间作为统计时间\n2. round(min(人数分布表.num)) as 平均人数: 计算最小的人数并保留小数位\n3. from a_people_spread_day_building as 人数分布表: 从名为“人数分布表”的表格获取数据\n4. WHERE 人数分布表.building_name='信智楼': 筛选出“信智楼”的数据\n5. AND DATEDIFF(now(), 人数分布表.stat_time) < 30: 限制日期范围，仅返回过去30天的数据\n6. AND 人数分布表.region_name='高新校区': 筛选出“高新校区”的数据\n7. AND 人数分布表.org_name='中国科学技术大学': 筛选出“中国科学技术大学”的数据\n8. GROUP BY 人数分布表.stat_day: 根据统计日期对数据进行分组\n9. ORDER BY min(人数分布表.stat_time) ASC;: 按照统计时间的最小值进行升序排列"
    },
    {
        "query": "目前人数最少的建筑是哪些？",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num asc  limit 10;\n```\n这是一段SQL查询语句，用于从数据库中获取特定条件下的人数最少的建筑物信息。以下是该SQL语句的详细解释：\n\n1. `select`: SQL的关键字，表示从这个查询中选择某些列。\n2. `a_people_spread_day_building as 人数分布表`: 从这个名为`a_people_spread_day_building`的表格中获取数据。这里将这个表格命名为“人数分布表”。\n3. `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这是一个条件语句，表示统计时间（`stat_time`）与当前时间（`now()`）之间的差值小于5小时。\n4. `and 人数分布表.region_name='高新校区'`: 这是另一个条件语句，表示所选建筑物位于“高新校区”。\n5. `and 人数分布表.org_name='中国科学技术大学'`: 这是第三个条件语句，表示所选建筑物属于“中国科学技术大学”。\n6. `order by 人数分布表.num asc`: 根据建筑物的人数进行升序排序。\n7. `limit 10`: 只返回满足条件的前10个记录。\n\n这段SQL语句的目的是查找并返回过去5小时内位于“高新校区”且隶属于“中国科学技术大学”的建筑物中人数最少的10座建筑物的名称和人数。"
    },
    {
        "query": "哪栋建筑安装的摄像头最少？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) asc limit 1;\n```\n这是一条用于查询摄像头安装最少的建筑的SQL语句。下面是对这条SQL语句的解释：\n\n1. `s_camera as 摄像头表`: 这张表存储了摄像头的详细信息。\n2. `s_room as 房间表`: 这张表存储了每个房间的信息，包括其所属的楼栋和区域。\n3. `s_building as 楼栋表`: 这张表存储了每个楼栋的信息，包括其所属的区域和单位。\n4. `s_region as 区域表`: 这张表存储了每个区域的信息，包括其所属的单位。\n5. `s_organization as 单位表`: 这张表存储了每个单位的信息。\n\n接下来是`WHERE`子句的部分：\n\n6. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这是查询条件，限制结果只包含位于\"高新校区\"且属于\"中国科学技术大学\"的楼栋。\n\n然后我们来看`GROUP BY`和`ORDER BY`子句：\n\n7. `group by 楼栋表.building_name`: 这是分组依据，按照楼栋名称对结果进行分组。\n8. `order by count(*) asc`: 这是排序依据，按照每个楼栋的摄像头数量进行升序排序。\n\n最后看`LIMIT`子句：\n\n9. `limit 1`: 这是限制结果只返回一条记录，也就是摄像头数量最少的那个楼栋。\n\n整句SQL的意思就是查询并返回摄像头数量最少的那个楼栋及其摄像头数量。"
    },
    {
        "query": "行政办公楼安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算\"行政办公楼\"安装了多少个监控（即摄像头的数量）。以下是各个子句的解释：\n\n1. `SELECT count(*) as 摄像头数量`: 选择函数COUNT(*)用于计算满足后续WHERE子句条件的摄像头表的行数，并将结果命名为“摄像头数量”。\n\n2. `FROM s_camera AS 摄像头表`: 从s_camera表（摄像头表）开始查询。\n\n3. `JOIN s_room AS 房间表 ON 摄像头表.pid=房间表.id`: 联接s_room表（房间表），连接条件是摄像头表的pid字段等于房间表的id字段。\n\n4. `JOIN s_building AS 楼栋表 ON 房间表.pid=楼栋表.id`: 联接s_building表（楼栋表），连接条件是房间表的pid字段等于楼栋表的id字段。\n\n5. `JOIN s_region AS 区域表 ON 楼栋表.pid=区域表.id`: 联接s_region表（区域表），连接条件是楼栋表的pid字段等于区域表的id字段。\n\n6. `JOIN s_organization AS 单位表 ON 区域表.pid=单位表.id`: 联接s_organization表（单位表），连接条件是区域表的pid字段等于单位表的id字段。\n\n7. `WHERE 楼栋表.building_name='行政办公楼' AND 区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学'`: 根据WHERE子句的条件筛选出符合条件的记录，即满足以下条件：楼栋名称为“行政办公楼”，所在区域为“高新校区”，所属单位为“中国科学技术大学”。\n\n通过上述联接和筛选，最后得到的摄像头数量即为\"行政办公楼\"的监控安装个数。"
    },
    {
        "query": "现在有多少人在5号学生公寓？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='5号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取5号学生公寓当前的人数。以下是各部分解释：\n\n1. `select 人数分布表.num as 人数`：选择`num`字段并命名为`人数`。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表，名为`a_people_spread_day_building`，并为其分配一个别名`人数分布表`。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：筛选条件，要求时间差（以小时为单位）小于5，即最近5小时内的时间。\n\n4. `and 人数分布表.building_name='5号学生公寓'`：筛选条件，要求建筑名称为'5号学生公寓'。\n\n5. `and 人数分布表.region_name='高新校区'`：筛选条件，要求地区名称为'高新校区'。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：筛选条件，要求组织名称为'中国科学技术大学'。\n\n7. `order by 人数分布表.stat_time desc`：按照统计时间降序排序。\n\n8. `limit 1`：限制返回结果的数量为1条。"
    },
    {
        "query": "现在有多少人在图书馆？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于查询当前在图书馆的人数。以下是各部分解释：\n\n1. `SELECT 人数分布表.num as 人数`: 选择字段\"人数\"（即记录人数）。\n2. `FROM a_people_spread_day_building as 人数分布表`: 从名为\"a_people_spread_day_building\"的表格中获取数据。这里将这个表格重命名为\"人数分布表\"，以便在后面的条件中使用。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这个子句限制只返回过去5小时内的记录。其中，TIMESTAMPDIFF()是MySQL的日期时间函数，计算两个日期之间的差值；now()是返回当前的日期和时间。\n4. `and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 这三个条件共同确定数据范围，只返回满足这些条件的记录，即在中国科学技术大学高新校区的图书教育中心的数据。\n5. `order by 人数分布表.stat_time desc limit 1`: 对结果按照统计时间的降序排列，然后只返回第一行（即最近的数据）。"
    },
    {
        "query": "近期识别到的人员中，未背包的有多少？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这个SQL语句是用于查询在指定时间范围内，位于特定区域（高新校区）的中国科学技术大学的未背包的人员数量。具体分析如下：\n\n1. `SELECT COUNT(*) AS 背双肩包的人数`: 选择计数函数COUNT，计算结果用别名\"背双肩包的人数\"表示。\n\n2. `FROM d_people AS 人员表`: 指定数据源是人员表，并为其起别名\"人员表\"。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id=摄像头表.id`: 联接摄像头表与人员表，依据条件是\"人员表的摄像头ID等于摄像头表的ID\"。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid=房间表.id`: 联接房间表与摄像头表，依据条件是\"摄像头表的PID等于房间表的ID\"。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid=楼栋表.id`: 联接楼栋表与房间表，依据条件是\"房间表的PID等于楼栋表的ID\"。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid=区域表.id`: 联接区域表与楼栋表，依据条件是\"楼栋表的PID等于区域表的ID\"。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid=单位表.id`: 联接单位表与区域表，依据条件是\"区域表的PID等于单位表的ID\"。\n\n8. `JOIN t_bag AS 背包维表 ON 人员表.bag=背包维表.id`: 联接背包维表与人员表，依据条件是\"人员表的背包等于背包维表的ID\"。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 AND 背包维表.name='未背包' AND 区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学'`: 设置查询条件，包括：\n   - 人员表的时刻到现在的分钟差小于5分钟；\n   - 背包维表的名称等于\"未背包\"；\n   - 区域表的名称等于\"高新校区\"；\n   - 单位表的名称等于\"中国科学技术大学\"。\n\n综合以上各部分，该SQL语句的目的是查询在给定时间范围内（从时刻到现在不到5分钟）、位于特定区域（高新校区）的中国科学技术大学的未背包的人员数量。"
    },
    {
        "query": "图书教育中心每天最多有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于获取\"图书教育中心\"在最近30天内每天的最大人流量。以下是各个部分的具体解释：\n\n1. `SELECT`子句：选择需要返回的列和聚合函数。这里选择了两个列，一个是`stat_time`（统计时间），另一个是`num`（人数），并应用了`min`和`max`聚合函数分别对这两个列进行操作。\n\n2. `FROM`子句：指定数据来源表名为`a_people_spread_day_building`，即“人数分布表”。\n\n3. `WHERE`子句：设置查询条件。这个查询要求`building_name`（建筑名称）等于“图书教育中心”，并且`DATEDIFF(now(), stat_time)`（日期差）小于30天，同时`region_name`（地区名称）等于“高新校区”和`org_name`（机构名称）等于“中国科学技术大学”。\n\n4. `GROUP BY`子句：按照`stat_day`（统计日）进行分组，以便计算每天的最大人流量。\n\n5. `ORDER BY`子句：按照`stat_time`（统计时间）升序排列结果集。\n\n6. `ROUND`函数：将结果取整。"
    },
    {
        "query": "图书教育中心的摄像头安装情况",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于查询摄像头的相关信息。下面是各部分解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：这是选择要查询的列，包括摄像头的ID（摄像头编号）、IP地址和安装位置（房间名）。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是指定数据来源，s_camera是摄像头信息表，s_room是房间信息表。通过摄像头表的pid（父级ID）与房间表的id进行联接操作，得到每个摄像头对应的房间信息。\n\n3. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id join s_region as 区域表 on 楼栋表.pid=区域表.id`：这两个联接操作用于获取每个摄像头对应的楼栋和区域信息。同样地，通过房间表的pid（父级ID）分别与楼栋表和区域表的id进行联接操作。\n\n4. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这个联接操作用于获取每个摄像头对应的单位（如学校、公司等）信息。通过区域表的pid（父级ID）和单位表的id进行联接操作。\n\n5. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是查询条件，只返回满足这些条件的摄像头信息，即位于“图书教育中心”这座楼的“高新校区”的中国科学技术大学的摄像头。\n\n6. `order by 摄像头表.id asc limit 1000`：这是排序和限制返回结果。按照摄像头表的id（摄像头编号）从小到大排序，并且只返回前1000条记录。"
    },
    {
        "query": "有多少行人戴帽子？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于计算某个特定时间范围内、位于特定区域的中国科学技术大学高新校区内有多少人戴帽子的数量。以下是各子句的作用：\n\n1. `SELECT count(*) as 戴帽子人数`：选择计数函数count()，计算满足条件的行数，并将结果命名为\"戴帽子人数\"。\n\n2. `FROM d_people as 人员表`：指定数据表d_people作为查询的主数据表，并为其设置别名\"人员表\"。\n\n3. `JOIN s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：联接s_camera数据表（摄像头信息），基于人员表和摄像头表的camera_id字段相等进行联接。\n\n4. `JOIN s_room as 房间表 on 摄像头表.pid=房间表.id`：联接s_room数据表（摄像头所在房间信息），基于摄像头表和房间表的pid字段相等进行联接。\n\n5. `JOIN s_building as 楼栋表 on 房间表.pid=楼栋表.id`：联接s_building数据表（楼栋信息），基于房间表和楼栋表的pid字段相等进行联接。\n\n6. `JOIN s_region as 区域表 on 楼栋表.pid=区域表.id`：联接s_region数据表（区域信息），基于楼栋表和区域表的pid字段相等进行联接。\n\n7. `JOIN s_organization as 单位表 on 区域表.pid=单位表.id`：联接s_organization数据表（单位信息），基于区域表和单位表的pid字段相等进行联接。\n\n8. `JOIN t_hat as 帽子维表 on 人员表.hat=帽子维表.id`：联接t_hat数据表（帽子类型信息），基于人员表的hat字段与帽子维表的id字段相等进行联接。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：限制条件，要求查询的时间范围是最近5分钟之内。\n\n10. `AND 帽子维表.name='戴帽子'`：限制条件，要求查询的帽子类型为\"戴帽子\"。\n\n11. `AND 区域表.region_name='高新校区'`：限制条件，要求查询的区域为中国科学技术大学高新校区。\n\n12. `AND 单位表.org_name='中国科学技术大学'`：限制条件，要求查询的单位为中国科学技术大学。"
    },
    {
        "query": "师生活动中心安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于查询师生活动中心（假设这是某个建筑名称）在特定校区和单位（假设是中国科学技术大学）内安装的摄像头数量。具体解析如下：\n\n1. select: 从数据库中选择一个或多个数据列；\n2. count(*): 计算匹配指定条件的行数；\n3. as 摄像头数量: 为结果设置一个别名，方便后续处理；\n4. from: 指定数据来源表，这里是s_camera（假设是摄像头信息表）;\n5. join: 连接操作，将其他表与摄像头表进行关联；\n6. on: 定义连接条件，即两个表中相关数据的对应关系；\n7. where: 设定筛选条件，只选择符合条件的数据进行统计；\n8. building_name: 假设这是楼栋表的名称字段；\n9. region_name: 假设这是区域表的名称字段；\n10. org_name: 假设这是单位表的名称字段。\n\n总结：这个查询语句的目的是计算师生活动中心在中国科学技术大学高新校区内的摄像头数量。通过连接摄像头表、房间表、楼栋表、区域表和单位表，并根据筛选条件，最终得到满足要求的摄像头数量。"
    },
    {
        "query": "高新校区的大楼",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称 from s_building as 楼栋表  join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid = 单位表.id where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'  order by 楼栋表.building_name asc;\n```\n这是一个SQL查询语句，用于从数据库中获取特定信息。以下是各部分的解释：\n\n1. `select building_name as 楼宇名称`：这是选择要查询的列（字段），在这个例子中，我们选择了名为`building_name`的列并将其重命名为`楼宇名称`。\n\n2. `from s_building as 楼栋表`：这指定了数据来源表，即`s_building`表，我们将其简称为`楼栋表`。\n\n3. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是连接操作，将`s_region`表（简称`区域表`）与`s_building`表通过`pid`和`id`两个列进行连接。这意味着我们要找到在两个表中具有相同`pid`和`id`的记录。\n\n4. `join s_organization as 单位表 on 区域表.pid = 单位表.id`：这是另一个连接操作，将`s_organization`表（简称`单位表`）与`s_region`表通过`pid`和`id`两个列进行连接。同样地，我们要找到在两个表中具有相同`pid`和`id`的记录。\n\n5. `where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'`：这是筛选条件，只有当`单位表`中的`org_name`等于\"中国科学技术大学\"且`区域表`中的`region_name`等于\"高新校区\"时，才会返回相应的记录。\n\n6. `order by 楼栋表.building_name asc;`：这是排序条件，按照`楼宇名称`（即`building_name`列）升序排列返回的结果。"
    },
    {
        "query": "6号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算\"6号学生公寓\"的摄像头数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数count(*)作为结果集，将返回的总数命名为摄像头数量。\n\n2. `from s_camera as 摄像头表`: 从名为s_camera的表中获取数据，将其简称为摄像头表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头的项目ID（PID）和房间的项目ID（ID）进行连接，形成房间表和摄像头表的关联数据。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间的项目ID（ID）和楼栋的项目ID（ID）进行连接，形成楼栋表和房间表的关联数据。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋的项目ID（ID）和区域的父级ID（ID）进行连接，形成区域表和楼栋表的关联数据。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域的父级ID（ID）和单位的项目ID（ID）进行连接，形成单位表和区域表的关联数据。\n\n7. `where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只返回满足条件的数据。这里要求楼栋名称为\"6号学生公寓\"、区域名称为\"高新校区\"以及单位名称为中国科学技术大学的记录。\n\n综上所述，这段SQL语句的目的是查询满足特定条件的\"6号学生公寓\"的摄像头数量。"
    },
    {
        "query": "3号学生公寓人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='3号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据表中检索关于\"3号学生公寓\"人数的详细信息。以下是各个部分的解释：\n\n1. `select 人数分布表.num as 人数`: 从\"人数分布表\"中选择名为\"num\"的列并将其重命名为\"人数\"。\n\n2. `from a_people_spread_day_building as 人数分布表`: 指定数据表名称为\"a_people_spread_day_building\"并为其分配一个别名\"人数分布表\"，以便在查询中使用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 设置一个条件，即从\"人数分布表\"中选择的\"stat_time\"（统计时间）与当前时间的小时差小于5小时。\n\n4. `and 人数分布表.building_name='3号学生公寓'`: 设置另一个条件，即\"人数分布表\"中的\"building_name\"（楼名）等于\"3号学生公寓\"。\n\n5. `and 人数分布表.region_name='高新校区'`: 设置另一个条件，即\"人数分布表\"中的\"region_name\"（地区名）等于\"高新校区\"。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 设置另一个条件，即\"人数分布表\"中的\"org_name\"（单位名称）等于\"中国科学技术大学\"。\n\n7. `order by 人数分布表.stat_time desc limit 1`: 对查询结果按照\"人数分布表\"中的\"stat_time\"降序排列，并限制返回的记录数为1条。"
    },
    {
        "query": "查一下食堂的所有摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中获取并关联食堂摄像头的相关信息。具体解释如下：\n\n1. `select`: 从数据库中检索数据。\n2. `摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 选择需要返回的列，包括摄像头编号、IP地址和安装位置。\n3. `from s_camera as 摄像头表`: 指定主表，即摄像头信息表，简称为“摄像头表”。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接另一个表（房间表），连接条件是摄像头表中的pid字段等于房间表的id字段。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接第三个表（楼栋表），连接条件是房间表中的pid字段等于楼栋表的id字段。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接第四个表（区域表），连接条件是楼栋表中的pid字段等于区域表的id字段。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接第五个表（单位表），连接条件是区域表中的pid字段等于单位表的id字段。\n8. `where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，即只返回与“学生食堂”、“高新校区”和“中国科学技术大学”相关的记录。\n9. `order by 摄像头表.id asc limit 1000`: 对查询结果按照摄像头编号（id）进行升序排序（asc表示升序，desc表示降序），并且限制返回记录数为1000条。"
    },
    {
        "query": "现在有多少人在操场？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取某个时间段内在某地（这里是“体育场”）的人数。以下是各个部分的具体解释：\n\n1. `select 人数分布表.num as 人数`: 这句是查询的目标字段，表示要获取的记录数量，这里假设是一个名为\"num\"的字段。\n\n2. `from a_people_spread_day_building as 人数分布表`: 这是指定查询数据的来源表，名字是 \"a_people_spread_day_building\"，在这里将其简称为\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这个条件是筛选满足在最近的5小时内的数据。TIMESTAMPDIFF函数计算两个日期之间的差值，这里是按小时为单位进行计算。\n\n4. `and 人数分布表.building_name='体育场'`: 这句是筛选出在\"体育场\"的数据。\n\n5. `and 人数分布表.region_name='高新校区'`: 这句是筛选出在\"高新校区\"的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 这句是筛选出在\"中国科学技术大学\"的数据。\n\n7. `order by 人数分布表.stat_time desc`: 这句是排序方式，按照统计时间降序排列。\n\n8. `limit 1`: 这句是限制返回的结果条数，这里是只返回一条数据。"
    },
    {
        "query": "3号学生公寓监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算3号学生公寓（假设这是一个建筑名称）的监控摄像头数量。以下是各个子句和表的解释：\n\n1. `select count(*) as 摄像头数量`: 这部分是查询的目标，即计算摄像头的数量。`count(*)`用于统计满足条件的摄像头数量，`as 摄像头数量`是将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`: 这是摄像头数据所在的表，这里将其简称为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这是连接摄像头和房间数据的子句。`s_room`表示房间数据所在的表，这里将其简称为“房间表”。`on 摄像头表.pid=房间表.id`是连接条件，意思是摄像头的父ID（即安装位置）与房间的ID相等。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这是连接摄像头和楼栋数据的子句。`s_building`表示楼栋数据所在的表，这里将其简称为“楼栋表”。`on 房间表.pid=楼栋表.id`是连接条件，意思是房间的父ID（即所属楼栋）与楼栋的ID相等。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这是连接摄像头和区域数据的子句。`s_region`表示区域数据所在的表，这里将其简称为“区域表”。`on 楼栋表.pid=区域表.id`是连接条件，意思是楼栋的父ID（即所属区域）与区域的ID相等。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这是连接摄像头和单位数据的子句。`s_organization`表示单位数据所在的表，这里将其简称为“单位表”。`on 区域表.pid=单位表.id`是连接条件，意思是区域的父ID（即所属单位）与单位的ID相等。\n\n7. `where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这是查询的条件，即只选择3号学生公寓、高新校区和中国科学技术大学的摄像头数据。\n\n综上，这个查询语句将返回3号学生公寓的监控摄像头数量。"
    },
    {
        "query": "4号学生公寓摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个关联表中统计4号学生公寓的摄像头数量。以下是各子句的解析：\n\n1. `select count(*) as 摄像头数量`：选择计数函数count()，计算符合条件的摄像头总数，并将结果命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`：指定查询的主表s_camera（摄像头表），表示摄像头的信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：联接s_room（房间表），条件是摄像头表的pid与房间表的id相等，即每个摄像头对应一个房间。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：联接s_building（楼栋表），条件是房间表的pid与楼栋表的id相等，即每个房间属于一个楼栋。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：联接s_region（区域表），条件是楼栋表的pid与区域表的id相等，即每个楼栋属于一个区域。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：联接s_organization（单位表），条件是区域表的pid与单位表的id相等，即每个区域属于一个单位。\n\n7. `where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，筛选出满足条件的数据，这里要求楼栋名称为\"4号学生公寓\"，区域名称为\"高新校区\"，单位名称为中国科学技术大学。"
    },
    {
        "query": "信智楼近期识别到多少不戴帽子的行人？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='未戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段 SQL 查询语句，用于计算信智楼近期（五分钟以内）识别到的不戴帽子的行人人数。\n\n以下是各表和字段的解释：\n\n1. `d_people`：人员表，包含行人的相关信息；\n2. `s_camera`：摄像头表，表示各个摄像头的位置信息；\n3. `s_room`：房间表，关联摄像头所在的房间信息；\n4. `s_building`：楼栋表，关联摄像头所在的楼栋信息；\n5. `s_region`：区域表，关联摄像头所在的校区或行政区域信息；\n6. `s_organization`：单位表，关联摄像头所在的单位或机构信息；\n7. `t_hat`：帽子维表，描述了不同的帽子类型及其名称；\n8. `moment`：人员表的记录时间字段；\n9. `now()`：当前时间的函数；\n10. `TIMESTAMPDIFF`：用于计算两个日期之间的差值（以分钟为单位）的函数；\n11. `name`：帽子维表中的帽子名称字段；\n12. `region_name`：区域表的名称字段；\n13. `org_name`：单位表的名称字段；\n14. `building_name`：楼栋表的名称字段。\n\n查询条件如下：\n- 过滤出最近五分钟内的数据；\n- 筛选出不戴帽子的行人（即帽子维表中名称为“未戴帽子”的行）；\n- 限定在信智楼的摄像头范围内；\n- 限定在中国科学技术大学的高新校区范围内。\n\n最后，通过 `COUNT(*)` 函数计算满足条件的行人数量。"
    },
    {
        "query": "告诉我现在信智楼有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='信智楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取“信智楼”的人数信息。以下是各部分的主要解释：\n\n1. select 人数分布表.num as 人数: 选择名为\"num\"的列（表示人数）作为结果集的\"人数\"字段。\n2. from a_people_spread_day_building as 人数分布表: 从名为a_people_spread_day_building的数据表（在这里简称为\"人数分布表\"）中获取数据。\n3. WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5: 筛选出在统计时间距离现在5小时以内的记录。\n4. and 人数分布表.building_name='信智楼': 限制条件，只选择\"信智楼\"的记录。\n5. and 人数分布表.region_name='高新校区': 限制条件，只选择\"高新校区\"的记录。\n6. and 人数分布表.org_name='中国科学技术大学': 限制条件，只选择\"中国科学技术大学\"的记录。\n7. order by 人数分布表.stat_time desc: 对结果按照\"stat_time\"降序排列。\n8. limit 1: 限制返回的结果集大小为1条记录。"
    },
    {
        "query": "体育馆安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算满足特定条件的体育馆内的摄像头数量。以下是各部分解释：\n\n1. select count(*) as 摄像头数量：选择计数函数`count(*)`作为结果，并命名为“摄像头数量”。\n2. from s_camera as 摄像头表：指定摄像头信息的数据库表（s_camera）作为查询来源。\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id：连接摄像头表和房间表，根据摄像头表中的`pid`与房间表中的`id`相等进行连接。\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：连接房间表和楼栋表，根据房间表中的`pid`与楼栋表中的`id`相等进行连接。\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id：连接楼栋表和区域表，根据楼栋表中的`pid`与区域表中的`id`相等进行连接。\n6. join s_organization as 单位表 on 区域表.pid=单位表.id：连接区域表和单位表，根据区域表中的`pid`与单位表中的`id`相等进行连接。\n7. where 楼栋表.building_name='体育馆'：设置过滤条件，只返回`building_name`字段值为“体育馆”的记录。\n8. and 区域表.region_name='高新校区'：设置过滤条件，只返回`region_name`字段值为“高新校区”的记录。\n9. and 单位表.org_name='中国科学技术大学'：设置过滤条件，只返回`org_name`字段值为“中国科学技术大学”的记录。"
    },
    {
        "query": "有多少人未背包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于计算某个特定条件下的数据量。下面是各部分的主要功能和解释：\n\n1. `SELECT COUNT(*) AS 背双肩包的人数`: 选择COUNT函数计算满足条件的记录数量，并命名为\"背双肩包的人数\"。\n\n2. `FROM d_people AS 人员表`: 从d_people表中获取数据，并将其简称为\"人员表\"。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`: 连接s_camera表（摄像头表），连接条件是人员表的camera_id等于摄像头表的id。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 连接s_room表（房间表），连接条件是摄像头表的pid等于房间表的id。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 连接s_building表（楼栋表），连接条件是房间表的pid等于楼栋表的id。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 连接s_region表（区域表），连接条件是楼栋表的pid等于区域表的id。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 连接s_organization表（单位表），连接条件是区域表的pid等于单位表的id。\n\n8. `JOIN t_bag AS 背包维表 ON 人员表.bag = 背包维表.id`: 连接t_bag表（背包维表），连接条件是人员表的bag等于背包维表的id。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 AND 背包维表.name = '未背包' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 设定查询条件，即时间差（当前时间与人员表中的moment时间戳之差）小于5分钟，同时要求背包维表的名字为“未背包”，并且区域表的区域名称为“高新校区”和单位表的名称是“中国科学技术大学”。\n\n该查询语句的目的是计算在当前时刻过去5分钟内，位于\"高新校区\"的\"中国科学技术大学\"区域内，未背包的人数。"
    },
    {
        "query": "统计图书馆一个月内每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个 SQL 查询语句，用于从数据库中统计图书馆在一个月内的每天平均人数。以下是各部分的解释：\n\n1. select: 选择要返回的列和计算的平均人数。\n2. min(人数分布表.stat_time) as 统计时间: 获取每天的开始时间（最小的时间戳）作为“统计时间”。\n3. round(avg(人数分布表.num)) as 平均人数: 计算每天的平均人数并保留小数点后两位数字。\n4. FROM: 从名为 \"a_people_spread_day_building\" 的表中读取数据，这个表记录了每天的人数分布情况。\n5. WHERE: 根据条件筛选数据，只考虑满足以下条件的数据：\n  - building_name 等于 '图书教育中心'\n  - DATEDIFF(now(), 人数分布表.stat_time) < 30：表示统计时间是最近30天内。\n  - region_name 等于 '高新校区'\n  - org_name 等于 '中国科学技术大学'\n6. GROUP BY: 按日期（人数分布表.stat_day）对数据进行分组，以便计算每日平均人数。\n7. ORDER BY: 按照统计时间的升序排列结果。"
    },
    {
        "query": "哪些房间很少发生异常行为？",
        "script": "```sql\nselect 房间表.room_name as 房间名称, count(*) as 5天内异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(),异常行为表.moment) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' GROUP by 房间表.room_name  ORDER by count(*) asc  limit 10;\n```\n这是一条SQL查询语句，用于查询在近5天内（DATEDIFF(now(),异常行为表.moment) < 5）发生在“高新校区”（区域表.region_name='高新校区'）且属于“中国科学技术大学”（单位表.org_name='中国科学技术大学'）的异常行为的房间及其数量。\n\n具体解释如下：\n\n1. select 部分：查询了四个表的关联信息，包括房间名称（房间表.room_name）和5天内异常行为数量（count(*)）。\n\n2. from 部分：连接了5个表，包括d_abnormal_behavior（异常行为表）、s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。\n\n3. on 部分：定义了各个表之间的关联条件。例如，异常行为表.camera_id=摄像头表.id，表示异常行为与摄像头的对应关系；摄像头表.pid=房间表.id，表示摄像头与房间的对应关系等。\n\n4. where 部分：限制了查询条件，包括日期范围限制（DATEDIFF(now(),异常行为表.moment) < 5）、校区和单位名限制（区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'）。\n\n5. group by 部分：按照房间表.room_name 对结果进行分组。\n\n6. order by 部分：按照异常行为数量（count(*)）升序排列。\n\n7. limit 部分：限定返回的结果数量为10条。"
    },
    {
        "query": "3号学生公寓总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算3号学生公寓的摄像头数量。下面是这段代码的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数（COUNT）作为聚合函数，统计满足条件的摄像头的数量。这里将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：定义数据来源是s_camera表，这里是摄像头数据存储的地方。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接（JOIN）s_room表，连接条件是摄像头表的pid字段等于房间表的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接s_building表，连接条件是房间表的pid字段等于楼栋表的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接s_region表，连接条件是楼栋表的pid字段等于区域表的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接s_organization表，连接条件是区域表的pid字段等于单位表的id字段。\n\n7. `where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置筛选条件，只返回满足以下条件的记录：楼栋名称是“3号学生公寓”，所在区域是“高新校区”，所属单位是“中国科学技术大学”。\n\n综上所述，这个SQL查询语句的目的是计算3号学生公寓的摄像头数量，同时限定在特定的区域和单位范围内。"
    },
    {
        "query": "给出图书教育中心的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于查询图书教育中心的摄像头数量。下面是对这段SQL的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数count(*)作为结果集，将返回的总数命名为摄像头数量。\n\n2. `from s_camera as 摄像头表`: 从名为s_camera的表中获取数据，将其简称为摄像头表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_camera（摄像头表）和s_room（房间表）两个表，连接条件是摄像头表中的pid字段等于房间表的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_room（房间表）和s_building（楼栋表）两个表，连接条件是房间表的pid字段等于楼栋表的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_building（楼栋表）和s_region（区域表）两个表，连接条件是楼栋表的pid字段等于区域表的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_region（区域表）和s_organization（单位表）两个表，连接条件是区域表的pid字段等于单位表的id字段。\n\n7. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求楼栋表的建筑名称是“图书教育中心”，区域表的区域名称是“高新校区”，单位表的单位名称是“中国科学技术大学”。满足这些条件的摄像头数量才会被计算出来。"
    },
    {
        "query": "给出所有室内摄像头的编号",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse=1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id  limit 1000;\n```\n这是一段SQL查询语句，用于从数据库中获取所有室内摄像头的编号、安装位置和所在大楼等信息。以下是各部分详细解释：\n\n1. `select`: SQL查询的开始关键字，用于指定需要返回的列和表达式。\n\n2. `摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼`: 这三列为查询结果中的列名，分别表示摄像头的编号（在摄像头表中）、安装位置（在房间表中）和所在大楼（在楼栋表中）。\"as\"关键字用于设置结果的别名，方便后续处理。\n\n3. `from`: SQL查询的关联表格。这里涉及到四个关联表：s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）和s_region（区域表）。\n\n4. `join`: SQL查询的联接操作，用于把多个表格根据共同的字段关联起来。这里有四个联接操作：摄像头表与房间表的联接条件是摄像头表的pid等于房间表的id；房间表与楼栋表的联接条件是房间表的pid等于楼栋表的id；楼栋表与区域表的联接条件是楼栋表的pid等于区域表的id；区域表与单位表的联接条件是区域表的pid等于单位表的id。\n\n5. `where`: SQL查询的条件过滤，只返回满足条件的记录。这里的条件是：摄像头表中的inhouse字段值为1（表示室内摄像头），且区域表中的region_name字段值为'高新校区'，单位表中的org_name字段值为'中国科学技术大学'。\n\n6. `order by`: SQL查询的结果排序，这里按照摄像头表的id字段升序排列。\n\n7. `limit`: SQL查询的结果限制，这里限制结果为前1000条。\n\n综合以上分析，这段SQL语句的目的是查询出位于'高新校区'的'中国科学技术大学'内所有室内摄像头的编号、安装位置和所在大楼，并按照摄像头编号进行升序排序，返回前1000条结果。"
    },
    {
        "query": "最近5分钟内识别到的人员中，不同朝向的人数是多少？",
        "script": "```sql\nselect 朝向维表.name as 朝向, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 朝向维表.name  order by 朝向维表.name asc;\n```\n这是一个 SQL 查询语句，用于在最近的 5 分钟内识别到的人中统计不同朝向的人数。下面是各部分详细解释：\n\n1. `select 朝向维表.name as 朝向, count(*) as 人数`: 选择结果中的列，其中 \"朝向\" 是人的朝向（来自朝向维表），而 \"人数\" 是每类朝向的人数。\n\n2. `from d_people as 人员表`: 从人员表中获取数据，这是记录人员位置和朝向的数据库表。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 通过摄像头的 ID 将人员表与摄像头表连接起来，因为摄像头是检测人员位置和朝向的设备。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头的父 ID（即房间的 ID）将摄像头表和房间表连接起来，以获取每个摄像头所在的房间信息。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间的父 ID（即楼栋的 ID）将房间表和楼栋表连接起来，以获取每个摄像头所在的楼栋信息。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋的父 ID（即区域的 ID）将楼栋表和区域表连接起来，以获取每个摄像头所在的区域信息。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域的父 ID（即单位的 ID）将区域表和单位表连接起来，以获取每个摄像头所在的单位名称信息。\n\n8. `join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id`: 通过人员的朝向（从人员表）和朝向维表的 ID 将它们连接起来，以便按朝向对人员进行分类。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求时间差（当前时间与人员信息记录的时间差）小于 5 分钟，并且区域名称为“高新校区”，单位名称为“中国科学技术大学”。\n\n10. `group by 朝向维表.name`: 对结果按照朝向进行分组，这样每组会对应一个特定朝向的人数。\n\n11. `order by 朝向维表.name asc`: 对分组后的结果按照朝向的名称从小到大排序，即按照朝向东、朝南、朝西、朝北的顺序排列。"
    },
    {
        "query": "师生活动中心每天平均有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一段SQL查询语句，用于计算师生活动中心在过去的30天内每天的平均人数。\n\n以下是各部分解释：\n\n1. `min(人数分布表.stat_time) as 统计时间`：取人数分布表中每个分组（根据日期）的统计时间的最小值，即每天的起始时间。\n2. `round(avg(人数分布表.num)) as 平均人数`：计算每一天的人数平均值。\n3. `from a_people_spread_day_building as 人数分布表`：从名为\"a_people_spread_day_building\"的数据表中选择数据，将其重命名为\"人数分布表\"以方便理解。\n4. `WHERE 人数分布表.building_name='师生活动中心'`：筛选出\"师生活动中心\"的数据。\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`：限制条件为距离现在的时间（按天计算）小于30天。\n6. `and 人数分布表.region_name='高新校区'`：筛选出位于\"高新校区\"的数据。\n7. `and 人数分布表.org_name='中国科学技术大学'`：筛选出属于\"中国科学技术大学\"的数据。\n8. `group by 人数分布表.stat_day`：按照日期进行分组，以便对每一天的人数进行求平均操作。\n9. `order by min(人数分布表.stat_time) asc`：按照每天的起始时间升序排列结果。"
    },
    {
        "query": "信智楼近期识别到多少挎单肩包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于从多个表中联合查询数据，并统计在“信智楼”最近五分钟内有挎单肩包的行人数量。下面是对这个查询语句的详细解释：\n\n1. `select count(*) as 背双肩包的人数`：这是查询的目标，即计算满足条件的挎单肩包的行人数量。\n\n2. `from d_people as 人员表`：这是查询的主表，存储了行人的信息，包括他们所携带的背包类型。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：这是联接摄像头的表，用来获取行人在哪个摄像头下被检测到。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是联接房间的表，用来获取摄像头所在的房间信息。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是联接楼栋的表，用来获取房间所在的楼栋信息。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是联接区域的表，用来获取楼栋所在的位置信息。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是联接单位的表，用来获取区域所属的单位信息。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`：这是联接背包的表，用来获取行人所携带的背包的具体信息。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：这是查询的时间条件，只考虑在最近五分钟内检测到的行人信息。\n\n10. `and 背包维表.name='单肩包'`：这是查询的背包条件，只考虑携带单肩包的人的信息。\n\n11. `and 区域表.region_name='高新校区'`：这是查询的区域条件，只考虑位于“高新校区”的数据。\n\n12. `and 单位表.org_name='中国科学技术大学'`：这是查询的单位条件，只考虑属于“中国科学技术大学”的数据。\n\n13. `and 楼栋表.building_name='信智楼'`：这是查询的楼栋条件，只考虑位于“信智楼”的数据。"
    },
    {
        "query": "图书教育中心的监控安装情况",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中检索关于图书教育中心监控安装情况的数据。具体解释如下：\n\n1. `s_camera`: 摄像头表，包含摄像头的各种信息，例如ID、IP地址等；\n2. `s_room`: 房间表，包含每个房间的信息，例如房间名称、所属楼栋等；\n3. `s_building`: 楼栋表，包含每个楼栋的信息，例如楼栋名称、所属区域等；\n4. `s_region`: 区域表，包含每个区域的信息，例如区域名称、所属单位等；\n5. `s_organization`: 单位表，包含每个单位的信息，例如单位名称、地址等。\n\n这个查询的主要目的是找出位于“图书教育中心”的监控设备信息。具体步骤如下：\n\n1. 通过`JOIN`子句将`s_camera`, `s_room`, `s_building`, `s_region`, `s_organization`这五个表连接在一起，以便在查询中同时获取这些表中的数据。\n\n2. 使用`WHERE`子句设置查询条件：\n   - 要求`s_building.building_name`等于\"图书教育中心\"；\n   - 要求`s_region.region_name`等于\"高新校区\"；\n   - 要求`s_organization.org_name`等于\"中国科学技术大学\"；\n\n3. 使用`ORDER BY`子句对查询结果按照摄像头编号（`s_camera.id`）进行升序排列；\n4. 使用`LIMIT`子句限制查询结果的条数为1000条。"
    },
    {
        "query": "告诉我现在运动场有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前（时间戳差小于5小时）在体育场的人数信息。下面是各部分的详细解析：\n\n1. `select 人数分布表.num as 人数`: 选择字段`num`并为其设置别名`人数`，表示要返回的数据字段。\n\n2. `from a_people_spread_day_building as 人数分布表`: 从`a_people_spread_day_building`表中选择数据，并将该表重命名为`人数分布表`，方便后续操作。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 限制条件，只返回过去5小时内的数据。其中，`TIMESTAMPDIFF`是SQL的时间间隔函数，用于计算两个日期之间的差异；`now()`是系统当前时间。\n\n4. `and 人数分布表.building_name='体育场'`: 限制条件，只返回`building_name`字段值为“体育场”的数据。\n\n5. `and 人数分布表.region_name='高新校区'`: 限制条件，只返回`region_name`字段值为“高新校区”的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 限制条件，只返回`org_name`字段值为“中国科学技术大学”的数据。\n\n7. `order by 人数分布表.stat_time desc`: 对结果按照`stat_time`字段的降序排序。\n\n8. `limit 1`: 限制返回的结果数量，即只返回一条记录。"
    },
    {
        "query": "老师食堂人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个 SQL 查询语句，用于从数据库中获取特定条件下的信息。下面是该语句的详细分解：\n\n1. `select 人数分布表.num as 人数`：选择字段 \"num\"（假设这是表示人数的列），并为其赋予别名 \"人数\"，这样在结果集中可以更直观地看到返回的是人数数据。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表名为 \"a_people_spread_day_building\"，并为该表取别名 \"人数分布表\"，以便在查询语句中简化对表的引用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置筛选条件，即只返回 \"stat_time\"（假设这是记录人员统计时间的列）与当前时间（now()）之间的小时差小于5的记录。\n\n4. `and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：进一步设定筛选条件，即仅返回满足以下条件的记录：食堂名称为 \"教工食堂\"，所在区域为 \"高新校区\"，所属单位为 \"中国科学技术大学\"。\n\n5. `order by 人数分布表.stat_time desc`：按照 \"stat_time\" 降序排列结果集，也就是按时间顺序倒序排列。\n\n6. `limit 1`：限制返回的结果集条数为 1 条。"
    },
    {
        "query": "学生食堂哪些地方安装了摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个 SQL 查询语句，用于从多个表中获取摄像头的数据信息。下面是该语句的详细分解和解释：\n\n1. `select`: 选择需要返回的字段。这里选择了摄像头编号、IP地址和安装位置。\n2. `from`: 指定数据来源表。这里是`s_camera`（摄像头表）作为主表。\n3. `join`: 连接其他相关表。这里有5个联接操作：\n   - `s_room`（房间表）：通过摄像头表的`pid`字段与房间表的`id`字段关联。\n   - `s_building`（楼栋表）：通过房间表的`pid`字段与楼栋表的`id`字段关联。\n   - `s_region`（区域表）：通过楼栋表的`pid`字段与区域表的`id`字段关联。\n   - `s_organization`（单位表）：通过区域表的`pid`字段与单位表的`id`字段关联。\n4. `where`: 设定过滤条件。这里是查找安装在\"学生食堂\"（楼栋表中的`building_name`字段），位于\"高新校区\"（区域表中的`region_name`字段），属于\"中国科学技术大学\"（单位表中的`org_name`字段）的摄像头。\n5. `order by`: 设定排序规则。这里是按照摄像头编号（`id`字段）升序排列。\n6. `limit`: 设定返回记录数。这里是限制返回1000条记录。\n\n整个SQL语句的意思是：查找并返回安装在“学生食堂”（楼栋名）的摄像头的详细信息，包括摄像头编号、IP地址和安装位置；这些摄像头属于“中国科学技术大学”（单位名称）的“高新校区”（区域名）；结果按照摄像头编号升序排列，最多返回1000条记录。"
    },
    {
        "query": "信智楼人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='信智楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一段 SQL 语言，用于查询某个时间段内信智楼的人数。下面是对这段 SQL 语句的解释：\n\n1. `select 人数分布表.num as 人数`: 从\"人数分布表\"这个表中选取字段 \"num\" 作为 \"人数\"进行输出。\n\n2. `from a_people_spread_day_building as 人数分布表`: 定义了数据源表名为\"a_people_spread_day_building\",并将该表简称为\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 筛选出统计时间与当前时间的时间差小于5小时的记录。\n\n4. `and 人数分布表.building_name='信智楼'`: 限制查询的建筑物名称为 \"信智楼\"。\n\n5. `and 人数分布表.region_name='高新校区'`: 限制查询的校区名称为 \"高新校区\"。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 限制查询的学校名称为 \"中国科学技术大学\"。\n\n7. `order by 人数分布表.stat_time desc`: 按统计时间的降序排列结果。\n\n8. `limit 1`: 返回满足条件的最近的一条记录。"
    },
    {
        "query": "告诉我现在师生服务中心有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政与师生服务中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前在“行政与师生服务中心”的人数。下面是对这个语句的详细解释：\n\n1. `select 人数分布表.num as 人数`：选择名为\"num\"的字段作为查询结果中的\"人数\"字段。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定查询的数据来源表为`a_people_spread_day_building`（可以理解为存储人员分布信息的数据库表），并为这个表起了别名“人数分布表”以便于后续查询使用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：限制查询的时间条件，只返回在过去5小时内记录的数据。这里使用了`TIMESTAMPDIFF()`函数计算当前时间和统计时间之间的小时差。\n\n4. `and 人数分布表.building_name='行政与师生服务中心'`：筛选出满足特定条件的数据，即`building_name`（建筑名称）等于“行政与师生服务中心”。\n\n5. `and 人数分布表.region_name='高新校区'`：同上，筛选出`region_name`（区域名称）等于“高新校区”的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：筛选出`org_name`（组织名称）等于“中国科学技术大学”的数据。\n\n7. `order by 人数分布表.stat_time desc limit 1`：按照`stat_time`（统计时间）降序排列查询结果，并仅返回第一条记录。这里的`limit 1`表示只取一条记录，如果有两条或更多条记录都满足查询条件，那么这条语句将随机选取其中一条。"
    },
    {
        "query": "镜头中没有人的室外摄像头有哪些？",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中获取摄像头信息，包括摄像头的ID、安装位置、所属大楼等信息。以下是各个子句的详细解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`：选择需要查询的字段，包括摄像头的ID（用作主键）、安装的房间名称和所属的大楼名称。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id`：指定查询的主表（摄像头表），并连接摄像头表和房间表，条件是摄像头表的`pid`字段等于房间表的`id`字段。\n\n3. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接摄像头表和楼栋表，条件是房间表的`pid`字段等于楼栋表的`id`字段。\n\n4. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接摄像头表和区域表，条件是楼栋表的`pid`字段等于区域表的`id`字段。\n\n5. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接摄像头表和单位表，条件是区域表的`pid`字段等于单位表的`id`字段。\n\n6. `where 摄像头表.inhouse = 0 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：过滤条件，要求摄像头表中的`inhouse`字段值为0（表示摄像头在室外），并且摄像头的ID不在最近的10分钟内有人员出现（通过d_people表中的`moment`字段和当前时间进行比较得出）。\n\n7. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：进一步过滤条件，要求摄像头所在区域为“高新校区”，且所属单位为“中国科学技术大学”。\n\n8. `order by 摄像头表.id asc limit 1000;`：排序和限制查询结果，按照摄像头的ID升序排列，并返回前1000条记录。"
    },
    {
        "query": "告诉我现在8号学生公寓有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='8号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据信息。下面是对这个SQL语句的解释：\n\n1. `select 人数分布表.num as 人数`：选择字段\"人数\"（即num）作为输出列的名称。\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表，名为a_people_spread_day_building，这里将其别名为“人数分布表”。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置一个时间过滤条件，即从当前时间（now()）减去统计时间（stat_time）的时间差小于5小时。\n4. `and 人数分布表.building_name='8号学生公寓'`：设置第二个过滤条件，要求被查询的公寓名称为'8号学生公寓'。\n5. `and 人数分布表.region_name='高新校区'`：设置第三个过滤条件，要求被查询的地区名称为'高新校区'。\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置第四个过滤条件，要求被查询的组织名称为'中国科学技术大学'。\n7. `order by 人数分布表.stat_time desc`：按照统计时间（stat_time）降序排列输出的数据。\n8. `limit 1`：限制返回的数据条数为1，即只返回一条记录。"
    },
    {
        "query": "安装摄像头最多的是哪栋楼？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取某特定区域的某个单位内安装摄像头最多的楼的信息。下面是各子句的解释：\n\n1. select: 选择要返回的列（字段）。这里是三个列：楼宇名称（来自楼栋表），摄像头数量（通过计数得到）。\n\n2. from: 指定数据来源表。这里涉及到四个表：摄像头表（s_camera），房间表（s_room），楼栋表（s_building）和区域表（s_region）。\n\n3. join: 联接操作，用于结合多个表中的数据。这里是四个联接：摄像头表和房间表联接（on条件是摄像头表的PID等于房间表的ID）；房间表和楼栋表联接（on条件是房间表的PID等于楼栋表的ID）；楼栋表和区域表联接（on条件是楼栋表的PID等于区域表的ID）；区域表和单位表联接（on条件是区域表的PID等于单位表的ID）。\n\n4. where: 设置过滤条件。这里是两个条件：区域表的region_name等于'高新校区'；单位表的org_name等于'中国科学技术大学'。\n\n5. group by: 对结果进行分组。这里是按照楼栋表的building_name进行分组。\n\n6. order by: 对分组后的结果进行排序。这里是按照摄像头数量（count(*)）降序排列。\n\n7. limit: 限制返回的结果条数。这里是限制返回一条结果。\n\n执行该查询后，将返回\"高新校区\"的中国科学技术大学内安装摄像头最多的那栋楼的名称及其摄像头数量。"
    },
    {
        "query": "找出近期从食堂出发的一些行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中查找并返回一些行人轨迹数据。这个查询涉及多个表格的关联和筛选。下面是详细的解析：\n\n1. `select`子句: 选择了需要返回的列。包括：`轨迹起始时间（start_time）`, `轨迹结束时间（end_time）`, `虚拟人名（name）`, `经过的摄像头Id（camera_id_list）`。\n\n2. `from`子句: 指定了要查询的数据来源表格。在这个例子中，数据来源是`a_people_trail`（行人轨迹表），同时连接了其他辅助查询的表格。\n\n3. `join`子句: 定义了不同表格之间的关系。在这个例子中，通过摄像头ID将`a_people_trail`与`s_camera`（摄像头表）、`s_room`（房间表）、`s_building`（楼栋表）、`s_region`（区域表）以及`s_organization`（单位表）建立了联系。\n\n4. `where`子句: 设置了查询条件，即只选择满足以下条件的数据：区域名称为\"高新校区\"，单位名称是\"中国科学技术大学\"，楼栋名称是\"学生食堂\"。\n\n5. `order by`子句: 按照轨迹起始时间的降序排列数据，这样最新的数据会排在最前面。\n\n6. `limit`子句: 限制返回的结果数量，这里只返回前10条结果。\n\n所以，这个SQL语句的目的是找出近期从\"学生食堂\"出发的行人的轨迹，并且要求这些行人经过的区域和单位符合指定的名称。"
    },
    {
        "query": "信智楼近期识别到的人员中，戴眼镜的有多少？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于从多个表中获取满足特定条件的人员数据，并计算戴眼镜的人数。以下是各个部分的作用：\n\n1. `d_people as 人员表`: 人员信息表，存储每个人的基本信息；\n2. `s_camera as 摄像头表`: 摄像头信息表，存储每个摄像头的详细信息；\n3. `s_room as 房间表`: 房间信息表，存储每个房间的信息；\n4. `s_building as 楼栋表`: 楼栋信息表，存储每个楼栋的信息；\n5. `s_region as 区域表`: 区域信息表，存储每个区域的详细信息；\n6. `s_organization as 单位表`: 单位信息表，存储每个单位的名称；\n7. `t_glasses as 眼镜维表`: 眼镜类型信息表，存储不同类型的眼镜名称；\n8. `TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 限制最近5分钟内的数据；\n9. `眼镜维表.name='戴眼镜'`: 筛选出戴眼镜的人员；\n10. `区域表.region_name='高新校区'`: 筛选出位于“高新校区”的人员；\n11. `单位表.org_name='中国科学技术大学'`: 筛选出属于“中国科学技术大学”的单位；\n12. `楼栋表.building_name='信智楼'`: 筛选出位于“信智楼”的人员；\n13. `count(*) as 戴眼镜人数`: 计算戴眼镜的人数。"
    },
    {
        "query": "现在有多少人在运动场？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一段SQL查询语句，用于从数据库中获取某个特定时间范围内在体育场的人数信息。以下是各部分的具体解释：\n\n1. `select 人数分布表.num as 人数`：选择字段，这里选择了“人数分布表”的“num”字段并将其重命名为“人数”。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定查询来源，这里是“a_people_spread_day_building”表，将其别名为“人数分布表”。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：过滤条件，限制查询结果中的人数记录必须是过去5小时内的数据。\n\n4. `and 人数分布表.building_name='体育场'`：进一步过滤条件，要求被查询的数据所在的建筑名称必须等于“体育场”。\n\n5. `and 人数分布表.region_name='高新校区'`：同上，要求所在地区名称必须等于“高新校区”。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：同上，要求所属组织名称必须等于“中国科学技术大学”。\n\n7. `order by 人数分布表.stat_time desc`：排序方式，按照统计时间倒序排列。\n\n8. `limit 1`：限制返回的结果数量，只返回一条记录。\n\n综上，这段SQL语句的目的是获取过去5小时内，位于“体育场”、“高新校区”并且属于“中国科学技术大学”的人数信息，并返回最新的（按统计时间倒序排列）一条记录。"
    },
    {
        "query": "信智楼空房间数量",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'     and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一段 SQL 查询语句，用于计算信智楼中当前没有人员的房间数量。\n\n以下是各子句和表的解释：\n\n1. `select count(房间表.room_name)`：选择计算房间表中的房间名称（room_name）作为结果，这将返回一个数值，即满足条件的房间数量。\n\n2. `from s_camera as 摄像头表`：指定从摄像头表（s_camera）开始查询。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，基于摄像头表（s_camera）的 pid 字段与房间表（s_room）的 id 字段相等。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，基于房间表（s_room）的 pid 字段与楼栋表（s_building）的 id 字段相等。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，基于楼栋表（s_building）的 pid 字段与区域表（s_region）的 id 字段相等。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，基于区域表（s_region）的 pid 字段与单位表（s_organization）的 id 字段相等。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`：设置筛选条件，只考虑属于高新校区、中国科学技术大学和信智楼的记录。\n\n8. `and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：这个子句的意思是，排除距离现在时间小于10分钟的摄像头的记录。也就是说，只有当该房间的摄像头在10分钟以内没有被检测到有人进入或离开时，才认为该房间是空的。"
    },
    {
        "query": "信智楼跨单肩包的人数",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段 SQL 语言，用于查询某个特定条件下的数据。以下是各部分的主要功能和作用：\n\n1. `SELECT`: 选择要返回的列（字段），这里选择的是计算结果（count(*) as 背双肩包的人数）。\n2. `COUNT(*)`: 对满足条件的记录进行计数。\n3. `as`: 给计数值起一个别名，方便后续使用。\n4. `d_people`、`s_camera`、`s_room`、`s_building`、`s_region`、`s_organization` 和 `t_bag`: 是各个表的名称。\n5. `ON`: 指定各表之间的关系。\n6. `TIMESTAMPDIFF`: 计算时间差。\n7. `NOW()`: 返回当前日期和时间。\n8. `<`: 小于运算符，用于设置时间差范围。\n9. `AND`: 逻辑连接词，表示多个条件的组合。\n10. `OR`: 逻辑连接词，表示多个条件的并集。\n11. `LIKE`: 用于模糊匹配字符串。\n12. `WHERE`: 设置查询条件的位置。\n13. `GROUP BY`: 按照指定的列对查询结果进行分组。\n14. `HAVING`: 在分组后设置筛选条件。"
    },
    {
        "query": "最高发的异常行为是哪些类型？",
        "script": "```sql\nselect 异常类型表.name as 异常行为类型 from d_abnormal_behavior as 异常行为表 join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by count(*) desc  limit 10;\n```\n这是一个复杂的SQL查询语句，用于从多个表中获取信息。下面是每个子句的解释：\n\n1. SELECT: 选择需要返回的列。这里是`异常类型表.name`，表示将返回异常行为类型。\n\n2. FROM: 从这些表中获取数据。这里涉及到多个表连接，包括：\n- `d_abnormal_behavior`（异常行为表）\n- `s_camera`（摄像头表）\n- `s_room`（房间表）\n- `s_building`（楼栋表）\n- `s_region`（区域表）\n- `s_organization`（单位表）\n- `t_abnormal_type`（异常类型表）\n\n3. JOIN: 连接这些表以获取所需的数据。连接条件如下：\n- `异常行为表.camera_id = 摄像头表.id`\n- `摄像头表.pid = 房间表.id`\n- `房间表.pid = 楼栋表.id`\n- `楼栋表.pid = 区域表.id`\n- `区域表.pid = 单位表.id`\n- `异常行为表.abnormal_type = 异常类型表.id`\n\n4. WHERE: 设置查询条件。这里指定了区域名和单位的名称：\n- `区域表.region_name = '高新校区'`\n- `单位表.org_name = '中国科学技术大学'`\n\n5. GROUP BY: 对结果按照某个字段进行分组。这里按照`异常类型表.name`对结果进行分组。\n\n6. ORDER BY: 对分组后的结果按照某个字段进行排序。这里按照`count(*)`（即记录数）进行降序排序。\n\n7. LIMIT: 限制返回的结果数量。这里设置为10，即返回前10个记录。\n\n综上，这个SQL查询的目的是查找在“高新校区”的“中国科学技术大学”内，出现次数最多的10种异常行为类型。"
    },
    {
        "query": "2号学科楼人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='2号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定时间范围内的“2号学科楼”的人数信息。以下是该语句的详细解读：\n\n1. `select 人数分布表.num as 人数`: 从`a_people_spread_day_building`这张表中选取名为`num`的列作为结果中的\"人数\"字段。\n\n2. `from 人数分布表`: 定义数据来源，即`a_people_spread_day_building`这张表。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这个条件限制在最近的5小时内选取数据。\n\n4. `and 人数分布表.building_name='2号学科楼'`: 只选取`building_name`（建筑名称）等于'2号学科楼'的数据。\n\n5. `and 人数分布表.region_name='高新校区'`: 只选取`region_name`（地区名称）等于'高新校区'的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 只选取`org_name`（机构名称）等于'中国科学技术大学'的数据。\n\n7. `order by 人数分布表.stat_time desc`: 对选取的数据按照`stat_time`（统计时间）降序排列，即最新的记录排在最前面。\n\n8. `limit 1`: 限制返回的结果集数量为1条。"
    },
    {
        "query": "8号学生公寓总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言查询代码，用于计算“8号学生公寓”的摄像头数量。\n\n以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择摄像头的计数作为结果，并给这个结果起名为“摄像头数量”。\n2. `from s_camera as 摄像头表`：从摄像头表（s_camera）中选取数据。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将房间表（s_room）与摄像头表通过摄像头的项目ID（摄像头表中的.pid）和房间的项目ID（房间表中的.id）相等联接起来。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将楼栋表（s_building）与房间表通过房间的项目ID（房间表中的.pid）和楼栋的项目ID（楼栋表中的.id）相等联接起来。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将区域表（s_region）与楼栋表通过楼栋的项目ID（楼栋表中的.pid）和区域的项目ID（区域表中的.id）相等联接起来。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将单位表（s_organization）与区域表通过区域的项目ID（区域表中的.pid）和单位的项目ID（单位表中的.id）相等联接起来。\n7. `where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设定查询条件，即只有满足这三个条件的摄像头才会被计算入总数。"
    },
    {
        "query": "2号学生公寓人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='2号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一段SQL查询语句，用于从数据库中获取\"2号学生公寓\"的实时人数。具体解释如下：\n\n1. `select 人数分布表.num as 人数`：选择名为\"num\"的字段作为结果中的\"人数\"字段。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定查询数据的来源表，这里表示\"a_people_spread_day_building\"表，同时将其简称为\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置过滤条件，即统计时间与当前时间的小时差小于5小时的数据。\n\n4. `and 人数分布表.building_name='2号学生公寓'`：过滤出\"building_name\"字段值为\"2号学生公寓\"的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：过滤出\"region_name\"字段值为\"高新校区\"的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：过滤出\"org_name\"字段值为\"中国科学技术大学\"的数据。\n\n7. `order by 人数分布表.stat_time desc`：按照\"stat_time\"字段的降序排序数据。\n\n8. `limit 1`：限制返回的数据条数为1条。"
    },
    {
        "query": "告诉我现在师生活动中心有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='师生活动中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于查询当前（最近5小时内）在\"师生活动中心\"的人数信息。以下是各部分详细解释：\n\n1. `a_people_spread_day_building`：这是数据表名称，用来存储人数分布的数据。\n2. `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：这个条件是限制查询时间范围，即仅返回过去5小时内的数据。\n3. `and 人数分布表.building_name='师生活动中心'`：这个条件是指定查询的建筑物名称，这里只选择“师生活动中心”。\n4. `and 人数分布表.region_name='高新校区'`：这个条件是指定查询的校区名称，这里只选择“高新校区”。\n5. `and 人数分布表.org_name='中国科学技术大学'`：这个条件是指定查询的学校名称，这里只选择“中国科学技术大学”。\n6. `order by 人数分布表.stat_time desc limit 1`：这个是查询结果的排序和限制，按照统计时间降序排列（即最新的时间排在最前面），并只返回一条结果。"
    },
    {
        "query": "信智楼有多少人持物？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于计算信智楼里有多少人手里拿着东西。下面是各个子句的简要解释：\n\n1. `select count(*) as 手里拿东西的人数`：这是查询的目标字段，即要获取手里拿着东西的人数。\n\n2. `from d_people as 人员表`：定义源数据表，这里指的是人员表（d_people），用来存储人员信息。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接摄像头表（s_camera），通过人员表的camera_id和摄像头表的id进行关联。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表（s_room），通过摄像头表的pid和房间表的id进行关联。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表（s_building），通过房间表的pid和楼栋表的id进行关联。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表（s_region），通过楼栋表的pid和区域表的id进行关联。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表（s_organization），通过区域表的pid和单位表的id进行关联。\n\n8. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`：连接持物维表（t_hold_object），通过人员表的hold_obj和持物维表的id进行关联。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：设置条件，限制时间差（从人员表记录的时刻到当前时间的分钟数）小于5分钟。\n\n10. `and 持物维表.name='持物'`：设置条件，限制持物维表的名字为“持物”。\n\n11. `and 区域表.region_name='高新校区'`：设置条件，限制区域表的名称（region_name）为“高新校区”。\n\n12. `and 单位表.org_name='中国科学技术大学'`：设置条件，限制单位表的名称（org_name）为“中国科学技术大学”。\n\n13. `and 楼栋表.building_name='信智楼'`：设置条件，限制楼栋表的名称（building_name）为“信智楼”。\n\n这个查询语句的目的是找出在信智楼内、过去5分钟内被摄像头捕捉到的、手中持有物品的人的数量。"
    },
    {
        "query": "师生活动中心哪些地方安装了监控",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从数据库中获取安装在特定地点的摄像头信息。以下是各部分的解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：这是查询结果中的列名，包括摄像头的编号、IP地址和安装位置。\n\n2. `from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id`：这是连接各个表的连接条件，通过摄像头表与房间表、楼栋表、区域表和单位表之间的关联关系将它们连接在一起。\n\n3. `where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是查询条件，只有满足这些条件的摄像头信息才会被查询出来。\n\n4. `order by 摄像头表.id asc limit 1000;`：这是排序和限制返回结果的命令。这里按照摄像头编号从小到大排序（ASC表示升序），并限制返回的结果数量为1000条。"
    },
    {
        "query": "师生活动中心的监控安装情况",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从数据库中获取特定条件下摄像头的信息。以下是各个部分的解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：这部分定义了查询结果的字段，包括摄像头的ID（摄像头编号）、IP地址和安装位置（来自房间表）。\n\n2. `from s_camera as 摄像头表`：指定数据来源，即摄像头信息表（s_camera表）。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是内连接操作，将摄像头表与房间表连接在一起，条件是摄像头表的pid字段等于房间表的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是内连接操作，将房间表与楼栋表连接在一起，条件是房间表的pid字段等于楼栋表的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是内连接操作，将楼栋表与区域表连接在一起，条件是楼栋表的pid字段等于区域表的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是内连接操作，将区域表与单位表连接在一起，条件是区域表的pid字段等于单位表的id字段。\n\n7. `where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这部分设置查询条件，即楼栋名称必须为“师生活动中心”，区域名称必须为“高新校区”，单位名称必须为“中国科学技术大学”。\n\n8. `order by 摄像头表.id asc limit 1000;`：这部分对查询结果进行排序（按摄像头ID升序排列）并限制返回的记录数量（最多1000条）。"
    },
    {
        "query": "师生服务中心人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政与师生服务中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定建筑（如“行政与师生服务中心”）在特定时间范围内（例如过去五小时内）的人数信息。以下是各个部分的解释：\n\n1. `SELECT 人数分布表.num AS 人数`: 从数据表中选择名为`num`的列，并将其重命名为`人数`。\n2. `FROM a_people_spread_day_building as 人数分布表`: 指定要从中获取数据的表名（a_people_spread_day_building），并将该表临时重命名为`人数分布表`，以便于后续的操作。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这部分条件设定是限制查询的时间范围。`TIMESTAMPDIFF()`函数计算两个日期之间的差值，这里是以小时为单位。这个条件表示只返回在过去五小时内的数据。\n4. `and 人数分布表.building_name='行政与师生服务中心'`: 这个条件筛选出特定建筑的数据，即“行政与师生服务中心”。\n5. `and 人数分布表.region_name='高新校区'`: 这个条件进一步限制了数据所在的校区，即“高新校区”。\n6. `and 人数分布表.org_name='中国科学技术大学'`: 这个条件再次对数据进行筛选，只返回属于“中国科学技术大学”的数据。\n7. `ORDER BY 人数分布表.stat_time DESC LIMIT 1`: 对查询结果进行排序（按照`stat_time`降序排列），并仅返回第一条记录（即最近的一条数据）。"
    },
    {
        "query": "信智楼有多少行人不戴帽子？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='未戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询语句，用于计算在“信智楼”里、最近5分钟内未戴帽子的行人人数。以下是各子句和表的说明：\n\n1. `select count(*) as 戴帽子人数`: 选择计数函数，计算满足条件的行数。\n2. `from d_people as 人员表`: 数据来源是“d_people”表，代表行人信息。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接“s_camera”表（代表摄像头信息），条件是两个表的“camera_id”字段相等。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接“s_room”表（代表房间信息），条件是两个表的“pid”字段相等。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接“s_building”表（代表楼栋信息），条件是两个表的“pid”字段相等。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接“s_region”表（代表区域信息），条件是两个表的“pid”字段相等。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接“s_organization”表（代表单位信息），条件是两个表的“pid”字段相等。\n8. `join t_hat as 帽子维表 on 人员表.hat=帽子维表.id`: 连接“t_hat”表（代表帽子类型信息），条件是两个表的“hat”字段相等。\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 限制条件是行人记录的时间与当前时间相差小于5分钟。\n10. `and 帽子维表.name='未戴帽子'`: 限制条件是行人的帽子状态为“未戴帽子”。\n11. `and 区域表.region_name='高新校区'`: 限制条件是区域的名称是“高新校区”。\n12. `and 单位表.org_name='中国科学技术大学'`: 限制条件是单位的名称是“中国科学技术大学”。\n13. `and 楼栋表.building_name='信智楼'`: 限制条件是楼栋的名称是“信智楼”。"
    },
    {
        "query": "查看到达1号学生公寓的行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.end_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='1号学生公寓' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从多个表中获取并展示数据。具体解释如下：\n\n1. `a_people_trail`: 行人轨迹表，包含了每个虚拟人的行动轨迹信息，如起点（start_time）、终点（end_time）和经过的摄像头ID（camera_id_list）等；\n2. `s_camera`: 摄像头表，存储了各个摄像头的ID以及所属楼栋等信息；\n3. `s_room`: 房间表，关联了楼栋ID与摄像头ID，记录了摄像头所在的房间；\n4. `s_building`: 楼栋表，记录了各楼栋的信息，包括名称、所属区域等；\n5. `s_region`: 区域表，关联了楼栋表与单位表，记录各楼栋所属的区域；\n6. `s_organization`: 单位表，存储了各单位（如学校）的信息，包括名称、所属区域等；\n\n查询条件部分（WHERE子句）中，通过设置区域表（region_name）和单位表（org_name）的条件，筛选出位于“高新校区”的中国科学技术大学的所有数据；然后通过限制楼栋表（building_name）的条件，进一步筛选出属于“1号学生公寓”的数据。\n\n排序和限制部分（ORDER BY和LIMIT子句）则按照轨迹起始时间的降序排列（即最新的10条轨迹记录）。"
    },
    {
        "query": "信智楼近期识别到多少戴帽子的行人？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询语句，用于统计信智楼（假设是一个建筑或者地点）附近在一定时间内识别到的戴帽子的行人人数。下面我为您详细解释这个SQL查询的每一部分：\n\n1. select count(*) as 戴帽子人数: 选择计数函数count(*)，将结果命名为\"戴帽子人数\"。\n\n2. from d_people as 人员表: 假设有一个表叫做d_people，其中存储了被摄像头识别到的人的信息。\n\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 通过摄像头ID将人员和摄像头关联起来，这样我们可以知道每个行人的摄像来源。\n\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 假设有一个表叫做s_room，其中存储了摄像头的房间信息，通过房间ID建立关联。\n\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 假设有一个表叫做s_building，其中存储了楼栋信息，通过楼栋ID建立关联。\n\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 假设有一个表叫做s_region，其中存储了区域信息，通过区域ID建立关联。\n\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 假设有一个表叫做s_organization，其中存储了单位信息，通过单位ID建立关联。\n\n8. join t_hat as 帽子维表 on 人员表.hat=帽子维表.id: 假设有一个表叫做t_hat，其中存储了各种帽子的信息，通过人员表的帽子类型与帽子维表的ID建立关联。\n\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5: 限制查询的时间范围，即只查询过去5分钟内的数据。\n\n10. and 帽子维表.name='戴帽子': 限制查询的帽子状态，即只查询“戴帽子”的行人。\n\n11. and 区域表.region_name='高新校区': 限制查询的区域，即只查询位于“高新校区”的数据。\n\n12. and 单位表.org_name='中国科学技术大学': 限制查询的单位，即只查询属于“中国科学技术大学”的数据。\n\n13. and 楼栋表.building_name='信智楼': 限制查询的楼栋，即只查询位于“信智楼”的数据。\n\n综上所述，这段SQL查询的目的是获取信智楼附近在过去5分钟内识别到的戴帽子的行人人数。"
    },
    {
        "query": "手里没拿东西的人数",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于计算“高新校区”的“中国科学技术大学”中，手中没有拿东西的人数。以下是各子句的解释：\n\n1. `select count(*) as 手里拿东西的人数`: 选择计数函数（count）作为查询结果，返回手里拿东西的人数。\n\n2. `from d_people as 人员表`: 从d_people表中获取数据，并称之为“人员表”。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接s_camera表，基于条件“人员表的camera_id等于摄像头表的id”。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表，基于条件“摄像头表的pid等于房间表的id”。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表，基于条件“房间表的pid等于楼栋表的id”。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表，基于条件“楼栋表的pid等于区域表的id”。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表，基于条件“区域表的pid等于单位表的id”。\n\n8. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`: 连接t_hold_object表，基于条件“人员表的hold_obj等于持物维表的id”。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'`: 限制查询条件，要求时间差（人员表的时刻与当前时间的差值，单位为分钟）小于5分钟，并且持物维表的名字为'未持物'。\n\n10. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 附加限制条件，要求区域表的区域名称为'高新校区'，且单位表的名称为单位表.org_name='中国科学技术大学'。"
    },
    {
        "query": "给出办公楼安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算\"行政办公楼\"在\"高新校区\"的\"中国科学技术大学\"内安装的摄像头数量。\n\n1. `select count(*) as 摄像头数量`: 选择计数函数COUNT，将返回结果命名为\"摄像头数量\"；\n2. `from s_camera as 摄像头表`: 从s_camera表中获取数据，将其命名为\"摄像头表\"；\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头表的pid字段与房间表的id字段关联两个表的数据；\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间表的pid字段与楼栋表的id字段关联两个表的数据；\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋表的pid字段与区域表的id字段关联两个表的数据；\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域表的pid字段与单位表的id字段关联两个表的数据；\n7. `where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置筛选条件，只选取满足条件的记录；\n8. `;`: 表示SQL语句结束。"
    },
    {
        "query": "5号学生公寓人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='5号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取5号学生公寓的人数。以下是各部分的解释：\n\n1. `select 人数分布表.num as 人数`: 选择名为\"人数\"的列作为查询结果。\n\n2. `from a_people_spread_day_building as 人数分布表`: 从名为\"a_people_spread_day_building\"的表中获取数据，并将其简称为\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 限制条件之一是，从\"stat_time\"（记录时间）到当前时间的小时数差小于5小时。\n\n4. `and 人数分布表.building_name='5号学生公寓'`: 限制条件之二是，建筑名称必须是\"5号学生公寓\"。\n\n5. `and 人数分布表.region_name='高新校区'`: 限制条件之三是，所在区域名称为\"高新校区\"。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 限制条件之四是，所属组织名称为\"中国科学技术大学\"。\n\n7. `order by 人数分布表.stat_time desc`: 对查询结果按照\"stat_time\"降序排列。\n\n8. `limit 1;`: 只返回一条查询结果。"
    },
    {
        "query": "近几天各种异常行为发生了有多少次？",
        "script": "```sql\nselect 异常类型表.name as 异常行为类型, count(*) as 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by 异常类型表.name asc;\n```\n这是一个SQL查询语句，用于统计近7天内（即现在时间减去7天）发生在指定地点（这里假设是高新校区）和中国科学技术大学的各种异常行为次数。以下是各子句和表结构的简单解释：\n\n1. `SELECT 异常类型表.name AS 异常行为类型, COUNT(*) AS 异常行为数量`：这是选择要查询的列，其中`COUNT(*)`会计算每一种异常行为发生的次数。\n\n2. `FROM d_abnormal_behavior AS 异常行为表`：这是数据来源，是一个记录异常行为的表。\n\n3. `JOIN s_camera AS 摄像头表 ON 异常行为表.camera_id = 摄像头表.id`：这是连接摄像头表的子句，通过摄像头ID将摄像头表与异常行为表关联起来。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`：这是连接房间表的子句，通过房间ID将房间表与摄像头表关联起来。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`：这是连接楼栋表的子句，通过楼栋ID将楼栋表与房间表关联起来。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`：这是连接区域表的子句，通过区域ID将区域表与楼栋表关联起来。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`：这是连接单位表的子句，通过单位ID将单位表与区域表关联起来。\n\n8. `JOIN t_abnormal_type AS 异常类型表 ON 异常行为表.abnormal_type = 异常类型表.id`：这是连接异常类型表的子句，通过异常类型ID将异常类型表与异常行为表关联起来。\n\n9. `WHERE DATEDIFF(NOW(), 异常行为表.moment) < 7 AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`：这是过滤条件，只考虑近7天内发生在高新校区和中国科学技术大学的异常行为。\n\n10. `GROUP BY 异常类型表.name`：这是分组依据，按照异常行为类型进行分组。\n\n11. `ORDER BY 异常类型表.name ASC`：这是排序方式，按异常行为类型名称从小到大排序。"
    },
    {
        "query": "给出2号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从数据库中获取“2号学生公寓”安装的摄像头数量。以下是各部分的具体含义：\n\n1. `count(*) as 摄像头数量`：计算摄像头的总数并将其命名为“摄像头数量”。\n2. `from s_camera as 摄像头表`：指定摄像头的数据表名（s_camera），并为它取别名“摄像头表”。\n3. `join s_room as 房间表`：连接房间数据表（s_room），并为其取别名“房间表”。\n4. `on 摄像头表.pid=房间表.id`：指定摄像头表和房间表之间的关联条件，即摄像头表的pid（可能表示摄像头所属的房间ID）等于房间表的id。\n5. `join s_building as 楼栋表`：连接楼栋数据表（s_building），并为其取别名“楼栋表”。\n6. `on 房间表.pid=楼栋表.id`：指定房间表和楼栋表之间的关联条件，即房间表的pid等于楼栋表的id。\n7. `join s_region as 区域表`：连接区域数据表（s_region），并为其取别名“区域表”。\n8. `on 楼栋表.pid=区域表.id`：指定楼栋表和区域表之间的关联条件，即楼栋表的pid等于区域表的id。\n9. `join s_organization as 单位表`：连接单位数据表（s_organization），并为其取别名“单位表”。\n10. `on 区域表.pid=单位表.id`：指定区域表和单位表之间的关联条件，即区域表的pid等于单位表的id。\n11. `where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置筛选条件，只选取符合条件的记录，即楼栋名称是“2号学生公寓”、区域名称是“高新校区”并且单位名称是“中国科学技术大学”的记录。"
    },
    {
        "query": "给出行政与师生服务中心安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算\"行政与师生服务中心\"在高新校区的中国科学技术大学的摄像头数量。\n\n具体解释如下：\n\n1. `select count(*) as 摄像头数量`: 这句是选择摄像头的总数作为一个名为\"摄像头数量\"的新列；\n\n2. `from s_camera as 摄像头表`: 从s_camera这张表开始查询（假设这是存储摄像头信息的数据库表）；\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这句是将摄像头表和房间表进行连接，连接条件是摄像头表的pid字段等于房间表的id字段；\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这句是将房间表和楼栋表进行连接，连接条件是房间表的pid字段等于楼栋表的id字段；\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这句是将楼栋表和区域表进行连接，连接条件是楼栋表的pid字段等于区域表的id字段；\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这句是将区域表和单位表进行连接，连接条件是区域表的pid字段等于单位表的id字段；\n\n7. `where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这句是设定查询条件，只返回满足条件的数据，即：要求查询的摄像头属于\"行政与师生服务中心\"，且位于\"高新校区\"，同时归属于\"中国科学技术大学\"；\n\n综合以上信息，这段SQL将返回满足上述所有条件的摄像头数量。"
    },
    {
        "query": "告诉我现在行政办公楼有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政办公楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一段SQL查询语句，用于从数据库中获取\"行政办公楼\"当前的人数信息。以下是各部分的解释：\n\n1. `select 人数分布表.num as 人数`: 选择名为\"num\"的列并将其重命名为\"人数\"。\n\n2. `from a_people_spread_day_building as 人数分布表`: 从名为\"a_people_spread_day_building\"的表中获取数据，将其临时称为\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 设置过滤条件，要求统计时间（即记录生成的时间）与当前时间的小时差小于5小时。\n\n4. `and 人数分布表.building_name='行政办公楼'`: 过滤条件，要求记录的楼房名称是\"行政办公楼\"。\n\n5. `and 人数分布表.region_name='高新校区'`: 过滤条件，要求记录的区域名是\"高新校区\"。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 过滤条件，要求记录的机构名是\"中国科学技术大学\"。\n\n7. `order by 人数分布表.stat_time desc`: 对结果进行排序，按统计时间降序排列。\n\n8. `limit 1`: 限制返回的结果集大小为1条，这里表示只返回最新的、符合上述条件的记录。"
    },
    {
        "query": "给出6号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算6号学生公寓（即‘6号学生公寓’）安装的摄像头数量。以下是各个子句和表的解释：\n\n1. `SELECT count(*) as 摄像头数量`: 选择函数count(*)，统计摄像头的数量，并将结果命名为“摄像头数量”。\n2. `from s_camera as 摄像头表`: 指定摄像头的数据表名称为s_camera。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表与房间表，基于摄像头所属的房间ID进行匹配。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表与楼栋表，基于房间所属的楼栋ID进行匹配。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表与区域表，基于楼栋所属的区域ID进行匹配。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表与单位表，基于区域所属的单位ID进行匹配。\n7. `where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 根据条件筛选出满足条件的摄像头，即位于‘6号学生公寓’、属于‘高新校区’且隶属于‘中国科学技术大学’的数据。"
    },
    {
        "query": "信智楼拿手提包的人数",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个复杂的SQL查询语句，用于计算某个时间范围内在特定地点（信智楼）拿着指定类型背包（手提包）的人数。以下是各子句的详细解释：\n\n1. `SELECT COUNT(*) AS 背双肩包的人数`: 选择计数函数，计算满足条件的行数，并命名为“背双肩包的人数”。\n\n2. `FROM d_people AS 人员表`: 从名为\"d_people\"的表（在这里是人员表）开始查询。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`: 通过\"摄像头表\"与\"人员表\"进行连接，条件是\"人员表\"的\"camera_id\"等于\"摄像头表\"的\"id\"。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 通过\"房间表\"与\"摄像头表\"进行连接，条件是\"摄像头表\"的\"pid\"等于\"房间表\"的\"id\"。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 通过\"楼栋表\"与\"房间表\"进行连接，条件是\"房间表\"的\"pid\"等于\"楼栋表\"的\"id\"。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 通过\"区域表\"与\"楼栋表\"进行连接，条件是\"楼栋表\"的\"pid\"等于\"区域表\"的\"id\"。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 通过\"单位表\"与\"区域表\"进行连接，条件是\"区域表\"的\"pid\"等于\"单位表\"的\"id\"。\n\n8. `JOIN t_bag AS 背包维表 ON 人员表.bag = 背包维表.id`: 通过\"背包维表\"与\"人员表\"进行连接，条件是\"人员表\"的\"bag\"等于\"背包维表\"的\"id\"。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, NOW()) < 5 AND 背包维表.name = '手提包' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学' AND 楼栋表.building_name = '信智楼'`: 设置查询条件，包括当前时刻与记录时刻的时间差小于5分钟，背包名称是\"手提包\"，区域名称为\"高新校区\"，单位名称是\"中国科学技术大学\"，以及楼栋名称为\"信智楼\"。\n\n这个查询语句的目的是计算在特定时间内位于特定地点且持有特定背包的信智楼内人数。"
    },
    {
        "query": "有多少行人拿手提包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这个SQL语句是一个复杂的联表查询，用于从多个表中统计某个条件下的行人数。以下是各子句的解释：\n\n1. `select count(*) as 背双肩包的人数`：这是查询的主体，用于计算满足后续条件的行人人数。\n\n2. `from d_people as 人员表`：这是查询的主表，用于存储行人信息。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：这是第一个联表查询，将摄像头表与人员表关联，以便获取每个行人的摄像头的ID信息。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是第二个联表查询，将房间表与摄像头表关联，以便获取每个摄像头所在的具体房间的信息。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是第三个联表查询，将楼栋表与房间表关联，以便获取每个房间所在的楼栋的信息。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是第四个联表查询，将区域表与楼栋表关联，以便获取每个楼栋所在的区域的信息。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是第五个联表查询，将单位表与区域表关联，以便获取每个区域所属的单位的信息。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`：这是第六个联表查询，将背包维表与人员表关联，以便获取每个行人的背包类型（如“手提包”）的信息。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：这是一个时间过滤条件，只返回在5分钟以内更新过的数据。\n\n10. `and 背包维表.name='手提包'`：这是一个筛选条件，只返回背包类型为“手提包”的行人信息。\n\n11. `and 区域表.region_name='高新校区'`：这是一个筛选条件，只返回位于“高新校区”的行人信息。\n\n12. `and 单位表.org_name='中国科学技术大学'`：这是一个筛选条件，只返回属于“中国科学技术大学”单位的行人信息。"
    },
    {
        "query": "中国科学技术大学高新校区有哪些建筑？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称 from s_building as 楼栋表  join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid = 单位表.id where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'  order by 楼栋表.building_name asc;\n```\n这是一个SQL查询语句，用于从数据库中检索中国科学技术大学高新校区的所有建筑信息。这个查询涉及到了三个表格：s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。\n\n以下是查询语句的解释：\n\n1. `select 楼栋表.building_name as 楼宇名称`：选择要返回的列，即楼栋表的building_name字段，并为其分配一个别名“楼宇名称”。\n\n2. `from s_building as 楼栋表`：指定数据来源，即s_building表，并为该表提供一个别名“楼栋表”以便在查询中引用。\n\n3. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：联接s_region表（并为它提供别名“区域表”），连接条件是楼栋表的pid字段等于区域表的id字段。\n\n4. `join s_organization as 单位表 on 区域表.pid = 单位表.id`：联接s_organization表（并为它提供别名“单位表”），连接条件是区域表的pid字段等于单位表的id字段。\n\n5. `where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'`：设置过滤条件，只有满足单位表的org_name字段值为“中国科学技术大学”且区域表的region_name字段值为“高新校区”的记录才会被选中。\n\n6. `order by 楼栋表.building_name asc;`：按照楼宇名称的字母顺序对结果进行排序，升序排列（asc表示升序，desc表示降序）。"
    },
    {
        "query": "给出办公楼的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询某个特定办公楼的摄像头数量。具体来说：\n\n1. `select count(*) as 摄像头数量`: 这句是查询语句的核心部分，用于计算满足条件的摄像头的总数。`count(*)` 是聚合函数，用于统计满足条件的记录数；`as 摄像头数量` 将结果命名为 \"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`: 从 \"s_camera\" 这个表格中获取数据，这个表格可以看作是一个摄像头信息的表格。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过 \"s_room\" 表格（可以看作是一个房间信息表格）与 \"s_camera\" 表格进行连接。连接条件是 \"摄像头表\" 的 \"pid\" 字段值等于 \"房间表\" 的 \"id\" 字段值。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过 \"s_building\" 表格（可以看作是一个楼栋信息表格）与 \"s_room\" 表格进行连接。连接条件是 \"房间表\" 的 \"pid\" 字段值等于 \"楼栋表\" 的 \"id\" 字段值。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过 \"s_region\" 表格（可以看作是一个区域信息表格）与 \"s_building\" 表格进行连接。连接条件是 \"楼栋表\" 的 \"pid\" 字段值等于 \"区域表\" 的 \"id\" 字段值。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过 \"s_organization\" 表格（可以看作是一个单位信息表格）与 \"s_region\" 表格进行连接。连接条件是 \"区域表\" 的 \"pid\" 字段值等于 \"单位表\" 的 \"id\" 字段值。\n\n7. `where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只返回满足 \"楼栋表\" 的 \"building_name\" 字段值为 \"行政办公楼\"、\"区域表\" 的 \"region_name\" 字段值为 \"高新校区\" 和 \"单位表\" 的 \"org_name\" 字段值为 \"中国科学技术大学\" 的记录。"
    },
    {
        "query": "2号学生公寓安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算2号学生公寓的监控摄像头数量。这个查询涉及到的表结构如下：\n\n1. `s_camera`（摄像头表）：存储摄像头的基本信息，包括摄像头ID、名称等；\n2. `s_room`（房间表）：存储房间的基本信息，包括房间ID、名称等；\n3. `s_building`（楼栋表）：存储楼栋的基本信息，包括楼栋ID、名称等；\n4. `s_region`（区域表）：存储区域的基本信息，包括区域ID、名称等；\n5. `s_organization`（单位表）：存储单位的基本信息，包括单位ID、名称等。\n\n以下是查询的具体步骤和含义：\n\n1. `select count(*) as 摄像头数量`：选择摄像头数量的计算结果作为查询结果，这里的`count(*)`表示统计满足条件的摄像头的数量；\n2. `from s_camera as 摄像头表`：指定从摄像头表开始进行查询；\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，条件是摄像头表中的pid等于房间表中的id；\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，条件是房间表中的pid等于楼栋表中的id；\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，条件是楼栋表中的pid等于区域表中的id；\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，条件是区域表中的pid等于单位表中的id；\n7. `where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，要求楼栋名称为'2号学生公寓'，区域名称为'高新校区'，单位名称是'中国科学技术大学'。\n\n最后，查询结果将返回2号学生公寓的监控摄像头数量。"
    },
    {
        "query": "告诉我现在操场有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前操场上的人数信息。下面是各个部分的主要解释：\n\n1. `select 人数分布表.num as 人数`：这是选择要查询的字段，即`人数分布表`中的`num`字段，并将它重命名为`人数`。\n\n2. `from a_people_spread_day_building as 人数分布表`：这是指定数据来源，即`a_people_spread_day_building`表，并将其简称为`人数分布表`。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：这个条件是限制查询的时间范围，只选取在过去5小时内记录的数据。其中`TIMESTAMPDIFF`函数用于计算两个时间之间的差值（以小时为单位），`now()`函数返回当前的系统时间。\n\n4. `and 人数分布表.building_name='体育场'`：这个条件是限制查询的地点，只选取在“体育场”的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：这个条件是限制查询的地区，只选取在“高新校区”的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：这个条件是限制查询的组织单位，只选取在“中国科学技术大学”的数据。\n\n7. `order by 人数分布表.stat_time desc limit 1`：这是对查询结果进行排序和筛选。`order by`子句用于按`stat_time`字段的降序排列数据，`limit 1`子句用于只返回一条记录，即最近的记录。"
    },
    {
        "query": "统计图教中心每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。以下是各部分的解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数`：选择最小（最近）的统计时间和最大的平均人数作为结果集的列。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表，这里表示从`a_people_spread_day_building`表中获取数据。\n\n3. `WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：设置查询条件，这里表示仅选择建筑名为“图书教育中心”、距离现在的时间小于30天、位于“高新校区”且属于“中国科学技术大学”的数据。\n\n4. `group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc`：按照`stat_day`进行分组，并按最近的统计时间（`min(人数分布表.stat_time)`）升序排列。\n\n整个查询的目的是找到最近30天内“图书教育中心”在“高新校区”的中国科学技术大学中的最高人数。"
    },
    {
        "query": "信智楼近期识别到多少不戴眼镜的行人？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='未戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于从多个表中联合查询数据，并统计出“信智楼”（假设是一个地方）近期（五分钟以内）未戴眼镜的行人数量。\n\n以下是这个查询的各个部分及其功能解释：\n\n1. `select count(*) as 戴眼镜人数`: 选择计数函数count(*)作为结果，并将其命名为\"戴眼镜人数\"。\n\n2. `from d_people as 人员表`: 从d_people表开始查询，假设该表存储了所有人的信息。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 联接s_camera表，其中每个记录对应一个摄像头。摄像头表和人员表的连接条件是摄像头ID等于摄像头表的ID。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接s_room表，其中每个记录对应一个房间。房间表和摄像头表的连接条件是摄像头所在的房间ID等于房间表的ID。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接s_building表，其中每个记录对应一个建筑（例如一栋楼）。楼栋表和房间表的连接条件是房间所在的楼栋ID等于楼栋表的ID。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接s_region表，其中每个记录对应一个地理区域。区域表和楼栋表的连接条件是楼栋所在的区域ID等于区域表的ID。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接s_organization表，其中每个记录对应一个单位（例如学校或公司）。单位表和区域表的连接条件是区域所属的单位ID等于单位表的ID。\n\n8. `join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id`: 联接t_glasses表，其中每个记录对应一个人是否戴眼镜的信息。人员表和眼镜维表的连接条件是人员表中的glasses字段等于眼镜维表的ID。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='未戴眼镜'`: 这个WHERE子句设置了一个过滤条件，只考虑在五分钟内采集到的数据（人员表.moment字段的记录时间距今不超过五分钟），且必须是没有戴眼镜的人（眼镜维表.name字段的值必须是'未戴眼镜'）。\n\n10. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 这个WHERE子句进一步限制了查询范围，只考虑在“高新校区”的中国科学技术大学的“信智楼”的数据。\n\n综上，这个SQL查询语句的目的是计算出“信智楼”近期未戴眼镜的行人数量。"
    },
    {
        "query": "1号学生公寓现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='1号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取1号学生公寓当前的人数信息。以下是各部分详细解释：\n\n1. `SELECT`子句：选择要返回的列。这里选择了名为\"num\"的列（即人数）。\n2. `as`关键字：用于将列重命名为更容易理解的名称。这里是将\"num\"重命名为\"人数\"。\n3. `from`子句：指定数据源表，这里是\"a_people_spread_day_building\"表，通常是一个存储人员分布数据的表。\n4. `WHERE`子句：过滤满足条件的记录。这里的条件是时间戳差（TIMESTAMPDIFF），即从记录统计时间到当前时间的小时数小于5。这个条件意味着只考虑在过去5小时内的数据。\n5. `AND`关键字：连接多个条件。这里是连接多个关于建筑物、地区和组织名称的条件。\n6. `building_name='1号学生公寓'\"：表示只有当建筑物的名称为“1号学生公寓”时才满足该条件。\n7. `region_name='高新校区'\"：表示只有当地区的名称为“高新校区”时才满足该条件。\n8. `org_name='中国科学技术大学'\"：表示只有当组织的名称为“中国科学技术大学”时才满足该条件。\n9. `order by`子句：对结果按照某个字段进行排序。这里是按照统计时间（stat_time）降序排列。\n10. `desc`关键字：表示按降序排序。\n11. `limit`子句：限制返回的结果数量。这里是限制返回一条记录。"
    },
    {
        "query": "信智楼现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='信智楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于查询\"信智楼\"在\"高新校区\"的中国科学技术大学里当前的人数。\n\n以下是该SQL语句各部分的功能和含义：\n\n1. `SELECT`: 选择数据列。在这个例子中，我们选择了名为`人数`的数据列。\n2. `人数分布表.num AS 人数`: 这行代码指定了我们将返回的列名（在这里是`人数`）。这是为了避免关键字冲突，因为`NUM`在SQL中是保留关键字。\n3. `FROM`: 指定数据来源表，这里是从`a_people_spread_day_building`这张表获取数据。\n4. `WHERE`: 设定筛选条件。在这行代码中，它限制了统计时间距离现在不到5小时，并且所在的建筑名为“信智楼”，所在地区名为“高新校区”，所在单位名为“中国科学技术大学”。\n5. `ORDER BY`: 对结果进行排序。这行代码表示按统计时间降序排列。\n6. `LIMIT 1`: 限制查询结果只返回一条记录。"
    },
    {
        "query": "有哪些异常？",
        "script": "```sql\nselect 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) <1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 异常行为表.moment desc limit 10;\n```\n这是一个SQL查询语句，用于从多个表中获取并展示异常行为信息。具体解释如下：\n\n1. `select`: 选择要从表格中获取的数据字段。\n2. `异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点`: 这两个是摄像头ID和异常发生的地点信息。\n3. `异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型`: 这两个是异常发生的时刻以及异常的类型信息。\n4. `from d_abnormal_behavior as 异常行为表`: 指定数据来源表为d_abnormal_behavior。\n5. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`: 将摄像头表通过摄像头ID与异常行为表进行连接。\n6. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将房间表通过房间ID与摄像头表进行连接。\n7. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将楼栋表通过楼栋ID与房间表进行连接。\n8. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将区域表通过区域ID与楼栋表进行连接。\n9. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将单位表通过单位ID与区域表进行连接。\n10. `join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id`: 将异常类型表通过异常类型ID与异常行为表进行连接。\n11. `where DATEDIFF(now(), 异常行为表.moment) <1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这是查询条件，表示只查找过去24小时内在“高新校区”的“中国科学技术大学”发生的异常行为。\n12. `order by 异常行为表.moment desc limit 10`: 对查询结果按照异常发生时间降序排列，并限制返回的结果条数为10条。"
    },
    {
        "query": "找出学生食堂一个月内，每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这个SQL语句的目的是找出在一个月内（现在的时间减去30天），学生食堂每天的平均人数。具体步骤如下：\n\n1. `SELECT`子句：选择要返回的列。这里选择了两个列：`min(人数分布表.stat_time)`（最近日期）和`round(avg(人数分布表.num))`（每日平均人数）。\n\n2. `FROM`子句：指定数据来源。这里是`a_people_spread_day_building`表，简称为`人数分布表`。\n\n3. `WHERE`子句：过滤条件。这里设置了四个条件：`building_name`（建筑名称）等于`学生食堂`；日期与当前日期的差值小于30天；`region_name`（地区名称）等于`高新校区`；`org_name`（组织名称）等于`中国科学技术大学`。\n\n4. `GROUP BY`子句：按`人数分布表.stat_day`对结果进行分组，以便计算每天的平均人数。\n\n5. `ORDER BY`子句：按`min(人数分布表.stat_time)`升序排列结果，即按照最近日期的顺序排序。\n\n6. `ROUND`函数：对平均人数进行四舍五入，保留小数点前一位。"
    },
    {
        "query": "信智楼近期识别到的人员中，戴帽子的有多少？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于从多个表中获取并统计“戴帽子”的人数。以下是各个子句的解释：\n\n1. `select count(*) as 戴帽子人数`: 选择计数函数count，对符合条件的人员进行统计，并将结果命名为\"戴帽子人数\"。\n\n2. `from d_people as 人员表`: 指定数据来源，即d_people表，作为\"人员表\"。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接s_camera表（摄像头信息）与人员表，以摄像头ID作为连接条件。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表（房间信息）与摄像头表，以房间ID作为连接条件。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表（楼栋信息）与房间表，以楼栋ID作为连接条件。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表（区域信息）与楼栋表，以区域ID作为连接条件。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表（单位信息）与区域表，以单位ID作为连接条件。\n\n8. `join t_hat as 帽子维表 on 人员表.hat=帽子维表.id`: 连接t_hat表（帽子信息）与人员表，以帽子ID作为连接条件。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 限制条件，要求人员表的记录时间（moment字段）与当前时间（now()函数）的时间差小于5分钟。\n\n10. `and 帽子维表.name='戴帽子'`: 限制条件，要求帽子维表的name字段值为'戴帽子'。\n\n11. `and 区域表.region_name='高新校区'`: 限制条件，要求区域表的区域名（region_name字段）为'高新校区'。\n\n12. `and 单位表.org_name='中国科学技术大学'`: 限制条件，要求单位表的单位名（org_name字段）为'中国科学技术大学'。\n\n13. `and 楼栋表.building_name='信智楼'`: 限制条件，要求楼栋表的楼栋名（building_name字段）为'信智楼'。\n\n综合以上条件，这个SQL查询语句会返回在“信智楼”内，最近5分钟内被摄像头识别到且戴帽子的人员数量。"
    },
    {
        "query": "学生食堂的监控安装情况",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中获取并展示安装在“学生食堂”的摄像头信息。\n\n以下是这个查询语句的详细解读：\n\n1. select: 从指定的表中选取数据。\n2. 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置: 选择需要展示的数据字段，包括摄像头的编号、IP地址和安装位置。\n3. from: 指定数据来源的表。这里有多个表（s_camera、s_room、s_building、s_region 和 s_organization）需要通过连接操作（JOIN）组合在一起。\n4. JOIN: 将不同的表通过共享的字段连接起来。例如，摄像头表通过其父ID（pid）与房间表、楼栋表、区域表和单位表进行连接。\n5. where: 设定筛选条件。在这个查询中，只返回在“学生食堂”的摄像头信息。同时，还需要满足区域为“高新校区”且单位为“中国科学技术大学”的条件。\n6. order by: 对结果进行排序。在这里按照摄像头编号从小到大（asc）排序。\n7. limit: 限制返回的结果数量。在这里设置为1000条。\n\n整个查询语句的意思是：从多个表中连接并筛选出位于“学生食堂”的摄像头信息，按照摄像头编号从小到大排序，并限制返回结果的数量为1000条。"
    },
    {
        "query": "师生活动中心安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于查询\"师生活动中心\"安装的摄像头数量。这个语句涉及到5个表格（s_camera, s_room, s_building, s_region, s_organization），通过复杂的连接条件将它们关联起来，以便获取所需的摄像头数量信息。以下是这个语句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择摄像头数量作为结果，即返回满足条件的摄像头总数。\n2. `from s_camera as 摄像头表`: 从名为s_camera的表中开始查询，将其简称为\"摄像头表\"。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_camera表和s_room表，基于摄像头表中的pid等于房间表中的id进行连接。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_room表和s_building表，基于房间表中的pid等于楼栋表中的id进行连接。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_building表和s_region表，基于楼栋表中的pid等于区域表中的id进行连接。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_region表和s_organization表，基于区域表中的pid等于单位表中的id进行连接。\n7. `where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 限制查询条件，只有当楼栋表中的建筑名称是\"师生活动中心\"，区域表中的地区名称是\"高新校区\"，单位表中的单位名称是\"中国科学技术大学\"时，才返回相应的摄像头数量。"
    },
    {
        "query": "校区监控安装情况",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) desc;\n```\n这是一个SQL查询语句，用于统计高新校区（区域名）的中国科学技术大学（单位名称）的每栋楼宇的监控摄像头数量。具体解释如下：\n\n1. select 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量：选择出每栋楼房的名字和对应的摄像头数量作为结果输出。\n\n2. from s_camera as 摄像头表：摄像头信息表，存储摄像头的详细信息。\n\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id：连接房间信息表，通过摄像头ID与房间ID进行关联，获取每个摄像头对应的具体房间信息。\n\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：连接楼房信息表，通过房间ID与楼房ID进行关联，获取每个摄像头所在的具体楼房信息。\n\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id：连接区域信息表，通过楼房ID与区域ID进行关联，获取每个摄像头所在的区域信息。\n\n6. join s_organization as 单位表 on 区域表.pid=单位表.id：连接单位信息表，通过区域ID与单位ID进行关联，获取每个摄像头所在单位的名称信息。\n\n7. where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'：限制查询条件，只返回高新校区且为中国科学技术大学的摄像头信息。\n\n8. group by 楼栋表.building_name：按照楼房名字对数据进行分组，便于统计每个楼房的摄像头数量。\n\n9. order by count(*) desc：按摄像头数量降序排列，即从摄像头最多的楼宇开始排序。"
    },
    {
        "query": "师生活动中心每天有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这个SQL语句是用于查询师生活动中心在过去30天内的每日平均人数。以下是各部分详细解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 这行代码选取了人数分布表中统计时间的最小值（也就是最早的日期）作为统计时间。\n\n2. `round(avg(人数分布表.num)) as 平均人数`: 这行代码计算了每一天的平均人数。`round()`函数用来四舍五入平均人数，以便保留一定的小数位数。\n\n3. `from a_people_spread_day_building as 人数分布表`: 这是数据表名称。在这个例子中，数据来源于名为“a_people_spread_day_building”的表格。\n\n4. `WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 这段代码设置了查询条件。只有当建筑物名称为“师生活动中心”、距离现在的时间（即统计时间）不超过30天、地区名称为“高新校区”以及组织名称为“中国科学技术大学”的情况下，才会被选中。\n\n5. `group by 人数分布表.stat_day`: 按照统计日期对数据进行分组，这样我们就可以得到每一天的平均人数。\n\n6. `order by min(人数分布表.stat_time) asc`: 这行代码按照统计时间从小到大排序，也就是按日期先后顺序排列。"
    },
    {
        "query": "有多少人戴帽子？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段 SQL 查询语句，用于计算满足特定条件的戴帽子的人数。下面是对该 SQL 语句的解释：\n\n1. `count(*)`: 计算满足后续 WHERE 子句中指定条件的记录数量，作为结果集中的一列返回（这里将其命名为 \"戴帽子人数\"）。\n\n2. `d_people`、`s_camera`、`s_room`、`s_building`、`s_region` 和 `s_organization`: 这些是表格的别名，分别表示人员表、摄像头表、房间表、楼栋表、区域表和单位表。这些表格通过 JOIN 子句连接在一起，以获取与查询条件相关的数据。\n\n3. `t_hat`: 是帽子维表的别名。这个维表用来关联人员的帽子类型。\n\n4. `TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 这个条件限制查询结果为最近五分钟内的数据。这里的 `TIMESTAMPDIFF()` 函数计算了当前时间与人员在摄像头前的时刻之间的差值（以分钟为单位），并确保这个差值小于 5 分钟。\n\n5. `帽子维表.name='戴帽子'`: 这个条件限制了查询结果只包含那些被标记为“戴帽子”的人员。\n\n6. `区域表.region_name='高新校区'`和 `单位表.org_name='中国科学技术大学'`: 这两个条件限定了查询结果的地理范围和单位信息，仅返回位于“高新校区”的中国科学技术大学的统计数据。"
    },
    {
        "query": "信智楼最近识别到的人员中，不同朝向分别有多少人？",
        "script": "```sql\nselect 朝向维表.name as 朝向, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 朝向维表.name  order by 朝向维表.name asc;\n```\n这是一个复杂的SQL查询语句，用于从多个表中提取和统计信息。下面是各部分的主要功能和解释：\n\n1. `d_people as 人员表`：人员表是数据字典的一部分，包含了人员的相关信息，如相机ID、时刻等。\n\n2. `s_camera as 摄像头表`：摄像头表是数据字典的一部分，关联了人员和摄像头的信息。\n\n3. `s_room as 房间表`：房间表是数据字典的一部分，关联了摄像头的房间和楼栋的信息。\n\n4. `s_building as 楼栋表`：楼栋表是数据字典的一部分，关联了房间的楼栋和区域的信息。\n\n5. `s_region as 区域表`：区域表是数据字典的一部分，关联了楼栋的区域和单位的信息。\n\n6. `s_organization as 单位表`：单位表是数据字典的一部分，关联了区域的单位和楼栋的信息。\n\n7. `t_orientation as 朝向维表`：朝向维表是数据字典的一部分，关联了人员朝向的名称和ID的信息。\n\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：这个条件限制了近5分钟内的人员信息。\n\n9. `and 区域表.region_name='高新校区'`：这个条件限制了区域名称为“高新校区”。\n\n10. `and 单位表.org_name='中国科学技术大学'`：这个条件限制了单位名称为中国科学技术大学。\n\n11. `and 楼栋表.building_name='信智楼'`：这个条件限制了楼栋名称为“信智楼”。\n\n12. `group by 朝向维表.name`：这个子句将结果按照朝向分组，每行一个朝向。\n\n13. `order by 朝向维表.name asc;`：这个子句对朝向进行了升序排序。\n\n综上所述，该SQL查询语句从多个数据字典中提取和统计了信智楼内不同朝向的人数，且时间范围在近5分钟内，同时限定了区域、单位和楼栋信息。"
    },
    {
        "query": "体育馆监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询某个体育馆的监控摄像头数量。下面是对这段 SQL 的解释：\n\n1. `SELECT COUNT(*) AS 摄像头数量`: 这句是选择摄像头的总数作为结果集的一行，并命名为 \"摄像头数量\"。\n2. `FROM s_camera AS 摄像头表`: 从 \"s_camera\" 这个表中获取数据，并暂时将其称为 \"摄像头表\"。\n3. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 将 \"s_room\" 表（暂称为 \"房间表\"）和 \"摄像头表\" 通过 \"pid\" 和 \"id\" 字段连接起来，这样我们可以知道每个摄像头的房间信息。\n4. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 将 \"s_building\" 表（暂称为 \"楼栋表\"）和 \"房间表\" 通过 \"pid\" 和 \"id\" 字段连接起来，这样我们可以知道每个摄像头的楼栋信息。\n5. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 将 \"s_region\" 表（暂称为 \"区域表\"）和 \"楼栋表\" 通过 \"pid\" 和 \"id\" 字段连接起来，这样我们可以知道每个摄像头的区域信息。\n6. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 将 \"s_organization\" 表（暂称为 \"单位表\"）和 \"区域表\" 通过 \"pid\" 和 \"id\" 字段连接起来，这样我们可以知道每个摄像头的单位信息。\n7. `WHERE 楼栋表.building_name = '体育馆' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 设置查询条件，只返回满足这些条件的摄像头记录。这里要求摄像头所在的楼栋名称为 \"体育馆\"，所在区域的名称为 \"高新校区\"，所在单位的名称为 \"中国科学技术大学\"。"
    },
    {
        "query": "图书教育中心的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从某个表中检索关于\"图书教育中心\"的信息。下面是该SQL语句的分解说明：\n\n1. `select 人数分布表.num as 人数`: 从\"人数分布表\"中选择名为\"num\"的列并命名为\"人数\"。\n2. `from a_people_spread_day_building as 人数分布表`: 从名为\"a_people_spread_day_building\"的表（在后续的语句中称为\"人数分布表\"）中选择数据。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 根据时间戳差计算，筛选出在5小时以内的时间范围的数据。其中，`TIMESTAMPDIFF()`函数以给定的单位返回两个日期之间的差值，`now()`函数获取当前日期时间，`<`操作符表示小于。\n4. `and 人数分布表.building_name='图书教育中心'`: 筛选出\"building_name\"（建筑名称）字段等于\"图书教育中心\"的数据。\n5. `and 人数分布表.region_name='高新校区'`: 筛选出\"region_name\"（地区名称）字段等于\"高新校区\"的数据。\n6. `and 人数分布表.org_name='中国科学技术大学'`: 筛选出\"org_name\"（组织机构名称）字段等于\"中国科学技术大学\"的数据。\n7. `order by 人数分布表.stat_time desc`: 对结果按照\"stat_time\"（状态时间）字段的降序排列。\n8. `limit 1`: 限制返回的结果集只包含一条记录。"
    },
    {
        "query": "现在有多少人在1号学科楼？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='1号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取特定时间范围内在1号学科楼的统计人数。以下是各部分的解释：\n\n1. `select 人数分布表.num as 人数`：选择名为`num`的列并将其重命名为`人数`。\n\n2. `from a_people_spread_day_building as 人数分布表`：从名为`a_people_spread_day_building`的表中选取数据，并将其简称为`人数分布表`。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：筛选出在最近的5小时内的数据。\n\n4. `and 人数分布表.building_name='1号学科楼'`：只选择`building_name`字段值为'1号学科楼'的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：只选择`region_name`字段值为'高新校区'的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：只选择`org_name`字段值为'中国科学技术大学'的数据。\n\n7. `order by 人数分布表.stat_time desc`：按照`stat_time`降序排列数据。\n\n8. `limit 1`：限制返回的数据条数为1，即只返回最近5小时内1号学科楼的人数统计数据中的一条。"
    },
    {
        "query": "给出2号学科楼安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算\"2号学科楼\"摄像头数量。以下是各个子句的解释：\n\n1. select count(*) as 摄像头数量: 从摄像头表中选取摄像头的总数。\n\n2. from s_camera as 摄像头表: 摄像头表，假设是存储摄像头信息的数据表。\n\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接摄像头表和房间表，条件是摄像头与房间的关联字段（假设是pid）相等。\n\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接房间表和楼栋表，条件是房间与楼栋的关联字段（假设是pid）相等。\n\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接楼栋表和区域表，条件是楼栋与区域的关联字段（假设是pid）相等。\n\n6. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接区域表和单位表，条件是区域与单位的关联字段（假设是pid）相等。\n\n7. where 楼栋表.building_name='2号学科楼': 筛选出符合条件的楼栋名称。\n\n8. and 区域表.region_name='高新校区': 筛选出符合条件的区域名称。\n\n9. and 单位表.org_name='中国科学技术大学': 筛选出符合条件的单位名称。"
    },
    {
        "query": "3号学科楼安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 查询语句，用于从数据库中获取满足特定条件的摄像头数量。下面是对这段 SQL 的解释：\n\n1. `SELECT`: 这是 SQL 命令，用于从数据库中选择数据。\n2. `count(*) as 摄像头数量`: 这行代码用于计算满足后续 WHERE 子句条件的摄像头数量。这里使用 `count(*)` 对结果进行计数，并将其命名为 \"摄像头数量\"。\n3. `FROM`: 指定需要查询的数据来源表。这里是 `s_camera`、`s_room`、`s_building`、`s_region` 和 `s_organization` 这五个表，它们分别表示摄像头信息、房间信息、楼栋信息、区域信息和单位信息。\n4. `JOIN`: 这是连接多个表的 SQL 命令。这里通过四个 JOIN 子句将这五个表连接在一起，基于它们之间的关联字段（如 `pid`）进行连接。\n5. `WHERE`: 这是 SQL 命令，用于过滤数据。这里设置了三个条件：`楼栋表.building_name='3号学科楼'`、`区域表.region_name='高新校区'` 和 `单位表.org_name='中国科学技术大学'`，只有满足这三个条件的摄像头才会被计入总数。"
    },
    {
        "query": "给出学生食堂的所有摄像头信息",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个关联表中获取特定条件下的摄像头信息。以下是各个部分的具体解释：\n\n1. select: 选择要返回的列和别名。\n2. from: 指定要查询的数据表。\n3. join: 联接其他相关数据表，以便从多个表中获取数据。\n4. where: 设置查询条件。\n5. order by: 对查询结果进行排序。\n6. limit: 限制查询结果的条数。\n\n这个查询的目的是获取安装在\"学生食堂\"（位于\"高新校区\"，归属\"中国科学技术大学\"）所有摄像头的IP地址和安装位置等信息。具体步骤如下：\n\n1. 从s_camera（摄像头表）中选择id（摄像头编号）、ip（IP地址）；\n2. 从s_room（房间表）中选择room_name（安装位置）；\n3. 通过摄像头表与房间表的联接（on子句），基于摄像头表的pid等于房间表的id；\n4. 通过房间表与s_building（楼栋表）的联接，基于房间表的pid等于楼栋表的id；\n5. 通过楼栋表与s_region（区域表）的联接，基于楼栋表的pid等于区域表的id；\n6. 通过区域表与s_organization（单位表）的联接，基于区域表的pid等于单位表的id；\n7. 设置查询条件，即要求楼栋名称等于“学生食堂”，区域名称等于“高新校区”，单位名称等于“中国科学技术大学”；\n8. 按照摄像头表的id升序排列查询结果；\n9. 限制查询结果的条数为1000。"
    },
    {
        "query": "图书馆的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一段 SQL 语言，用于查询某个特定时间段内在指定地点（如“图书教育中心”）的中国科学技术大学高新校区图书馆的人数。以下是代码各部分的具体含义：\n\n1. `select 人数分布表.num as 人数`：选择字段 \"num\"，并将其重命名为 \"人数\"。\"num\" 是表示人数的列名。\n\n2. `from a_people_spread_day_building as 人数分布表`：从名为 \"a_people_spread_day_building\" 的表中选取数据，并将该表在代码中称为 \"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：限制条件，即只返回过去五小时内的数据。其中 `TIMESTAMPDIFF()` 函数计算两个时间之间的差值，这里以小时为单位。\n\n4. `and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：进一步筛选条件，确保只返回在指定的“图书教育中心”的“高新校区”的“中国科学技术大学”的数据。\n\n5. `order by 人数分布表.stat_time desc`：按照统计时间降序排列结果。\n\n6. `limit 1`：限制返回的结果数量，只取一条记录。"
    },
    {
        "query": "哪栋大楼安装的摄像头最少？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) asc limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取摄像头安装最少的大楼信息。以下是各部分的解释：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量`: 这部分是查询的目标列，即需要返回的楼宇名称和每个楼宇的摄像头数量。\n\n2. `from s_camera as 摄像头表`: 这是摄像头表（s_camera），存储了摄像头的详细信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这部分联接了房间表（s_room），其中摄像头与房间关联。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这部分联接了楼栋表（s_building），其中房间与楼栋关联。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这部分联接了区域表（s_region），其中楼栋与区域关联。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分联接了单位表（s_organization），其中区域与单位关联。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是查询条件，只选取位于\"高新校区\"且属于\"中国科学技术大学\"的摄像头数据。\n\n8. `group by 楼栋表.building_name`: 这部分是分组条件，按照每个楼宇进行分组，以便计算每个楼宇的摄像头数量。\n\n9. `order by count(*) asc limit 1`: 这部分是排序和限制条件，按摄像头数量从小到大排序（asc表示升序），并取排序后结果的第一行，即摄像头数量最少的楼宇。"
    },
    {
        "query": "学生食堂的摄像头安装情况",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中获取并展示摄像头的相关信息。以下是各部分的具体解释：\n\n1. `select`: 选择需要返回的列。这里选择了摄像头表的id（摄像头编号）、ip（IP地址）和房间表的room_name（安装位置）。\n\n2. `from`: 指定数据来源表。这里涉及到5个表，分别是s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。\n\n3. `join`: 联接操作，将多个表的数据进行关联整合。这里使用了五次联接操作，第一次是摄像头表与房间表通过pid字段进行联接，第二次是房间表与楼栋表通过pid字段进行联接，第三次是楼栋表与区域表通过pid字段进行联接，第四次是区域表与单位表通过pid字段进行联接。\n\n4. `where`: 设置筛选条件。这里筛选出安装位置为学生食堂的摄像头数据。\n\n5. `order by`: 设置排序规则。这里按照摄像头表的id进行升序排列。\n\n6. `limit`: 限制返回结果的数量。这里限制结果为前1000条记录。\n\n综上，这个SQL语句的目的是查找并返回在学生食堂且位于高新校区的中国科学技术大学的摄像头信息，并按摄像头编号升序排列，最多返回1000条记录。"
    },
    {
        "query": "背双肩包的人数",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于统计在指定时间内、特定地点和单位的背双肩包的人数。以下是各子句的详细解释：\n\n1. `SELECT count(*) as 背双肩包的人数`: 选择计数函数（COUNT）计算满足条件的记录总数，并将结果命名为\"背双肩包的人数\"。\n\n2. `FROM d_people AS 人员表`: 从人员数据表（d_people）开始查询，将其命名为\"人员表\"。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`: 联接摄像头数据表（s_camera），以人员表的摄像头ID（camera_id）与摄像头表的ID相等的条件进行联接。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 联接房间数据表（s_room），以摄像头表的楼栋ID（pid）与房间表的ID相等的条件进行联接。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 联接楼栋数据表（s_building），以房间表的楼栋ID（pid）与楼栋表的ID相等的条件进行联接。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 联接区域数据表（s_region），以楼栋表的所属区域ID（pid）与区域表的ID相等的条件进行联接。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 联接单位数据表（s_organization），以区域表的所属单位ID（pid）与单位表的ID相等的条件进行联接。\n\n8. `JOIN t_bag AS 背包维表 ON 人员表.bag = 背包维表.id`: 联接背包数据表（t_bag），以人员表的背包ID（bag）与背包维表的ID相等的条件进行联接。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 AND 背包维表.name = '背包' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 设定查询条件：当前时间与人员表的时刻时间差小于5分钟；背包维表的名称是“背包”；区域表的名称是“高新校区”；单位表的名称是“中国科学技术大学”。\n\n这个查询的目的是统计在当前时刻（now()）过去5分钟内，位于“高新校区”的“中国科学技术大学”内，背有“背包”双肩包的人数。"
    },
    {
        "query": "高新校区有哪些建筑？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称 from s_building as 楼栋表  join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid = 单位表.id where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'  order by 楼栋表.building_name asc;\n```\n这是一个SQL查询语句，用于从数据库中检索和筛选出与特定条件相符的数据。在这个例子中，该查询将返回满足特定条件的中国科学技术大学高新校区的楼宇名称。\n\n以下是各子句的解释：\n\n1. `select 楼栋表.building_name as 楼宇名称`：选择要检索的列（在这里是“楼宇名称”），并将其显示为结果中的第一列。\n\n2. `from s_building as 楼栋表`：指定数据源（s_building表）及其在结果中的别名（楼栋表）。\n\n3. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过楼栋表和区域表的pid字段进行连接操作。\n\n4. `join s_organization as 单位表 on 区域表.pid = 单位表.id`：通过区域表和单位表的pid字段进行连接操作。\n\n5. `where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'`：设置筛选条件，即只有当单位表的组织名称为“中国科学技术大学”并且区域表的校区名称为“高新校区”时，才保留相关记录。\n\n6. `order by 楼栋表.building_name asc`：按楼宇名称对结果进行升序排列。"
    },
    {
        "query": "给出8号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n该SQL语句用于查询8号学生公寓安装摄像头的数量。首先通过JOIN连接多个表，然后根据条件筛选出8号学生公寓的数据，并计算满足条件的摄像头数量。以下是各个子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数COUNT(*)作为查询结果，并将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`: 指定查询的主表s_camera，用于存储摄像头信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和房间表，依据条件是摄像头表的pid等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表和楼栋表，依据条件是房间表的pid等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表和区域表，依据条件是楼栋表的pid等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表和单位表，依据条件是区域表的pid等于单位表的id。\n\n7. `where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置筛选条件，即楼栋名称为\"8号学生公寓\"、区域名称为\"高新校区\"且单位名称为\"中国科学技术大学\"。\n\n综上所述，此SQL语句用于计算在特定条件（8号学生公寓）下摄像头的数量。"
    },
    {
        "query": "统计信智楼一个月内每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取并统计“信智楼”在一个月内（即DATEDIFF(now(), 人数分布表.stat_time) < 30）每天的最少人数。具体解析如下：\n\n1. select min(人数分布表.stat_time) as 统计时间：选取人数分布表中每个记录的时间字段的最小值，并将它作为\"统计时间\"输出；\n2. round(min(人数分布表.num)) as 平均人数：计算并保留小数位后的人数最小值，将其命名为\"平均人数\"；\n3. from a_people_spread_day_building as 人数分布表：指定数据来源表名为\"a_people_spread_day_building\"，简称为\"人数分布表\"；\n4. WHERE 人数分布表.building_name='信智楼'：设定筛选条件，仅选取\"building_name\"字段值为\"信智楼\"的记录；\n5. and DATEDIFF(now(), 人数分布表.stat_time) < 30：设定筛选条件，仅选取距离现在（now()返回当前日期和时间）时间差小于30天的记录；\n6. and 人数分布表.region_name='高新校区'：设定筛选条件，仅选取\"region_name\"字段值为\"高新校区\"的记录；\n7. and 人数分布表.org_name='中国科学技术大学'：设定筛选条件，仅选取\"org_name\"字段值为\"中国科学技术大学\"的记录；\n8. group by 人数分布表.stat_day：按照\"stat_day\"字段对结果进行分组；\n9. order by min(人数分布表.stat_time) asc : 对\"统计时间\"字段按照升序排列。"
    },
    {
        "query": "给出3号学生公寓的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于查询满足特定条件的摄像头的数量。以下是各部分的具体解释：\n\n1. `select count(*) as 摄像头数量`: 这行代码用于计算满足后续条件要求的摄像头的总数。`count(*)`是聚合函数，用于计算满足条件的记录数。这里将其命名为`摄像头数量`以便于理解结果。\n\n2. `from s_camera as 摄像头表`: 从名为`s_camera`的表中获取数据，这里将这个表称为`摄像头表`以便于描述。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这行代码用于将`摄像头表`和`房间表`进行连接（Join）操作，连接条件是两个表的`pid`字段相等。这里将`s_room`表称为`房间表`。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这行代码用于将`房间表`和`楼栋表`进行连接操作，连接条件是两个表的`pid`字段相等。这里将`s_building`表称为`楼栋表`。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这行代码用于将`楼栋表`和`区域表`进行连接操作，连接条件是两个表的`pid`字段相等。这里将`s_region`表称为`区域表`。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这行代码用于将`区域表`和`单位表`进行连接操作，连接条件是两个表的`pid`字段相等。这里将`s_organization`表称为`单位表`。\n\n7. `where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这行代码用于设置查询条件，即只有当`楼栋表`的`building_name`字段值为'3号学生公寓'，`区域表`的`region_name`字段值为'高新校区'，以及`单位表`的`org_name`字段值为'中国科学技术大学'时，才会返回符合条件的记录。"
    },
    {
        "query": "人员稀疏区",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num asc  limit 10;\n```\n这是一条SQL查询语句，用于从数据库中获取特定条件下的数据。下面是该SQL语句的分解和解释：\n\n1. select: 开始选择数据的子句。\n2. 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数: 这部分指定了要返回的列及其别名。这里选择了\"building_name\"（建筑名称）和\"num\"（人数）两列。\n3. from: 从指定的表中获取数据。这里选择了名为\"a_people_spread_day_building\"的表，并将其简称为\"人数分布表\"。\n4. where: 过滤条件的子句，只返回满足这些条件的记录。\n   - TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()): 计算当前时间与\"stat_time\"（统计时间）之间的小时差。\n   - < 5: 限制小时差小于5小时。\n   - AND连接其他条件：\n     - 人数分布表.region_name='高新校区': 区域名等于\"高新校区\"。\n     - 人数分布表.org_name='中国科学技术大学': 组织名等于\"中国科学技术大学\"。\n5. order by: 按照某个或某些列的值对结果进行排序。这里按照\"人数分布表.num\"（人数）升序排序。\n6. limit: 限制返回的记录数量。这里限制结果为前10条。\n\n这条SQL语句的目的是查询在5小时以内，位于\"高新校区\"且属于\"中国科学技术大学\"的人数分布情况，并按照人数升序排列，最后只返回前10条记录。"
    },
    {
        "query": "近期识别到多少行人？",
        "script": "```sql\nselect count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5     and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段SQL查询代码，用于统计在一定时间内（例如过去五分钟）出现在指定区域（如“高新校区”）的行人数量。具体来说，它执行以下操作：\n\n1. 从`d_people`表（假设这是记录行人的数据表）中，选取所有记录；\n2. 将`d_people`表与`s_camera`表（假设这是记录摄像头的数据表）进行连接，条件是`d_people`表中每个记录的`camera_id`等于`s_camera`表中的`id`；\n3. 将`s_camera`表与`s_room`表（假设这是记录房间的数据表）进行连接，条件是`s_camera`表中的`pid`等于`s_room`表的`id`；\n4. 将`s_room`表与`s_building`表（假设这是记录楼栋的数据表）进行连接，条件是`s_room`表中的`pid`等于`s_building`表的`id`；\n5. 将`s_building`表与`s_region`表（假设这是记录区域的数据表）进行连接，条件是`s_building`表中的`pid`等于`s_region`表的`id`；\n6. 将`s_region`表与`s_organization`表（假设这是记录单位/组织的数据表）进行连接，条件是`s_region`表中的`pid`等于`s_organization`表的`id`；\n7. 筛选出满足特定时间条件的记录，即在过去五分钟内的记录（通过`TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`实现）；\n8. 筛选出满足特定区域的记录，即位于“高新校区”的记录（通过`区域表.region_name='高新校区'`实现）；\n9. 筛选出满足特定单位的记录，即属于“中国科学技术大学”的记录（通过`单位表.org_name='中国科学技术大学'`实现）；\n10. 对筛选出的记录进行计数，得到行人数量。\n\n这段代码可能来自一个监控系统或类似的应用场景，用于实时统计某个区域内的人数。"
    },
    {
        "query": "近期识别到的人员中，手中未持物的有多少？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段SQL查询语句，用于统计在一定时间内（例如过去五分钟）某个区域内（例如高新校区）的中国科学技术大学的监控摄像头识别到的未持物的人员数量。\n\n1. select count(*) as 手里拿东西的人数: 选择所有记录并计算总数作为“手里拿东西的人数”；\n2. from d_people as 人员表: 从人员数据表开始查询；\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 联接摄像头数据表，连接条件是人员在摄像头的ID等于摄像头的ID；\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 联接房间数据表，连接条件是摄像头的父级ID等于房间的ID；\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 联接楼栋数据表，连接条件是房间的父级ID等于楼栋的ID；\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 联接区域数据表，连接条件是楼栋的父级ID等于区域的ID；\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 联接单位数据表，连接条件是区域的父级ID等于单位的ID；\n8. join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id: 联接持物数据表，连接条件是人员的持有物ID等于持物表的ID；\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5: 筛选出在五分钟内的监控画面；\n10. and 持物维表.name='未持物': 并且持有物为“未持物”；\n11. and 区域表.region_name='高新校区': 并且区域为“高新校区”；\n12. and 单位表.org_name='中国科学技术大学': 并且单位为“中国科学技术大学”。\n\n这个查询结果将返回一个数字，表示在指定时间内、地点和单位的监控画面中，未持物的识别到的人数。"
    },
    {
        "query": "中科大高新校区有哪些建筑？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称 from s_building as 楼栋表  join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid = 单位表.id where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'  order by 楼栋表.building_name asc;\n```\n该SQL语句用于查询中国科技大学高新校区的所有建筑。以下是各部分解释：\n\n1. `select 楼栋表.building_name as 楼宇名称`：选择建筑名称作为查询结果中的列名。\n2. `from s_building as 楼栋表`：指定数据来源是s_building（楼宇）表，将其简称为\"楼栋表\"。\n3. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将s_region（地区）表与楼栋表进行连接，连接条件是s_building的pid等于s_region的id。\n4. `join s_organization as 单位表 on 区域表.pid = 单位表.id`：将s_organization（机构）表与区域表进行连接，连接条件是s_region的pid等于s_organization的id。\n5. `where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'`：设定查询条件，即要求s_organization的org_name为中国科学技术大学且s_region的region_name为高新校区。\n6. `order by 楼栋表.building_name asc;`：按照建筑名称的字母顺序对查询结果进行排序，升序表示从小到大排序。"
    },
    {
        "query": "信智楼有多少行人戴眼镜？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这个SQL查询语句的目的是计算信智楼内有多少人戴眼镜。以下是各个子句的作用：\n\n1. `select count(*) as 戴眼镜人数`：计算满足条件的行数，作为戴眼镜人数返回。\n\n2. `from d_people as 人员表`：定义人员表，用于存储每个人的信息。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：将摄像头表与人员表连接，以便根据摄像头的ID找到对应的人员信息。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将房间表与摄像头表连接，以便根据房间的ID找到对应的摄像头信息。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将楼栋表与房间表连接，以便根据楼栋的ID找到对应的房间信息。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将区域表与楼栋表连接，以便根据区域的ID找到对应的楼栋信息。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将单位表与区域表连接，以便根据单位的ID找到对应的区域信息。\n\n8. `join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id`：将眼镜维表与人员表连接，以便根据眼镜的ID找到对应的人员是否戴眼镜的信息。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：限制查询的时间范围，只返回最近5分钟内的数据。\n\n10. `and 眼镜维表.name='戴眼镜'`：限制查询的条件，只返回戴眼镜的人员信息。\n\n11. `and 区域表.region_name='高新校区'`：限制查询的区域，只返回高新校区的数据。\n\n12. `and 单位表.org_name='中国科学技术大学'`：限制查询的单位，只返回中国科学技术大学的数据。\n\n13. `and 楼栋表.building_name='信智楼'`：限制查询的楼栋，只返回信智楼的数据。"
    },
    {
        "query": "统计图教中心一个月内每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取某建筑（这里是“图书教育中心”）在一个月内（即现在日期减去30天以内）的每日最高人流量数据。以下是各部分的详细解释：\n\n1. `SELECT`: 选择要返回的列。在这个例子中，我们要返回两列：`统计时间`和`平均人数`。\n\n2. `MIN(人数分布表.stat_time) AS 统计时间`: 这里我们计算每日的最小统计时间（即当天的开始时间）。通过使用`MIN()`函数，我们可以得到每天的最早记录的时间。\n\n3. `ROUND(MAX(人数分布表.num)) AS 平均人数`: 这里我们计算每日的最大人数（即当天的人数峰值）。通过使用`MAX()`函数，我们可以得到当天的人流量最大值。`ROUND()`函数用于将结果四舍五入到指定的小数位数。\n\n4. `FROM a_people_spread_day_building AS 人数分布表`: 指定数据来源，即`a_people_spread_day_building`表，并将其简写为`人数分布表`。\n\n5. `WHERE`: 设置筛选条件。这个查询只考虑以下条件的记录：建筑名称为“图书教育中心”，距离现在日期的天数小于30天，所在地区为“高新校区”，所属单位为“中国科学技术大学”。\n\n6. `GROUP BY`: 对数据进行分组，这里按照`人数分布表.stat_day`（即每天的日期）进行分组。\n\n7. `ORDER BY`: 对分组后的数据进行排序。这里按照`min(人数分布表.stat_time)`（即每天的开始时间）升序排列。\n\n执行这个查询后，你将得到一个月内的每一天的最早统计时间和对应的人流量峰值。"
    },
    {
        "query": "现在有多少人在师生服务中心？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政与师生服务中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前在“行政与师生服务中心”的人数。下面是对这个语句的详细解释：\n\n1. `select 人数分布表.num as 人数`：选择字段`num`并为其赋予别名`人数`。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源是名为`a_people_spread_day_building`的表，并将该表简称为`人数分布表`。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置一个条件，即统计时间（`stat_time`）距离当前时间（通过`now()`函数获取）的小时差小于5小时。这意味着只考虑最近5小时内的人数数据。\n\n4. `and 人数分布表.building_name='行政与师生服务中心'`：设置另一个条件，即`building_name`字段值等于'行政与师生服务中心'。这是为了筛选出特定建筑物的人数数据。\n\n5. `and 人数分布表.region_name='高新校区'`：设置第三个条件，即`region_name`字段值等于'高新校区'。这是为了筛选出特定校区的人数数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置第四个条件，即`org_name`字段值等于'中国科学技术大学'。这是为了筛选出特定学校的人数数据。\n\n7. `order by 人数分布表.stat_time desc limit 1`：按照`stat_time`字段降序排列结果集（最近的记录排在最前面），并限制返回结果的数量为1条。这将返回最近5小时内在“行政与师生服务中心”的人数数据。"
    },
    {
        "query": "信智楼总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 查询语句，用于计算\"信智楼\"安装的摄像头数量。\n\n1. `select`: 选择数据列。\n2. `count(*) as 摄像头数量`: 计算 *（所有）列的数量，并将结果命名为 \"摄像头数量\"。\n3. `from`: 从哪个表格中选择数据。这里涉及到多个关联表格的操作，分别是：\n   - `s_camera as 摄像头表`: 摄像头相关的表格，包含摄像头的各种信息。\n   - `s_room as 房间表`: 房间相关的表格，包含每个房间的信息。\n   - `s_building as 楼栋表`: 楼栋相关的表格，包含每个楼栋的信息。\n   - `s_region as 区域表`: 区域相关的表格，包含每个区域的信息。\n   - `s_organization as 单位表`: 单位相关的表格，包含每个单位的信息。\n4. `join`: 将上述表格连接在一起，通过公共键值进行关联。例如：\n   - `摄像头表.pid=房间表.id`: 摄像头和房间通过 PID 进行关联。\n   - `房间表.pid=楼栋表.id`: 房间和楼栋通过 PID 进行关联。\n   - `楼栋表.pid=区域表.id`: 楼栋和区域通过 PID 进行关联。\n   - `区域表.pid=单位表.id`: 区域和单位通过 PID 进行关联。\n5. `where`: 对筛选条件进行设定。例如：\n   - `楼栋表.building_name='信智楼'`: 筛选出 \"信智楼\" 的数据。\n   - `区域表.region_name='高新校区'`: 筛选出 \"高新校区\" 的数据。\n   - `单位表.org_name='中国科学技术大学'`: 筛选出 \"中国科学技术大学\" 的数据。"
    },
    {
        "query": "运动场的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL查询语句的目的是获取“高新校区”的中国科学技术大学的“体育场”中的人数，条件是统计时间距离现在的时间小于5小时，并且按时间倒序排列，只返回一条记录。\n\n具体解释如下：\n\n1. `SELECT 人数分布表.num AS 人数`：选择`人数分布表`中的`num`字段，并命名为`人数`。\n2. `FROM a_people_spread_day_building AS 人数分布表`：指定数据来源表为`a_people_spread_day_building`，并为该表起别名`人数分布表`。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置查询条件，即`stat_time`（统计数据时间）与当前时间的时差要小于5小时。\n4. `AND 人数分布表.building_name = '体育场' AND 人数分布表.region_name = '高新校区' AND 人数分布表.org_name = '中国科学技术大学'`：限制查询结果中建筑名称为“体育场”，地区名称为“高新校区”，组织名称为“中国科学技术大学”的数据。\n5. `ORDER BY 人数分布表.stat_time DESC`：按照统计数据时间进行降序排列。\n6. `LIMIT 1`：限制查询结果返回的记录数，这里只返回一条记录。"
    },
    {
        "query": "现在有多少人在3号学生公寓？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='3号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于查询当前（距离现在不超过5小时）在“3号学生公寓”的人数。\n\n以下是该SQL语句各部分的功能和含义：\n\n1. `SELECT 人数分布表.num AS 人数`：选择`num`字段并将结果集命名为`人数`。这里的`num`是表示人数的变量名。\n\n2. `FROM a_people_spread_day_building AS 人数分布表`：指定数据来源表名为`a_people_spread_day_building`，并为其赋予别名`人数分布表`，以便后续在查询条件中使用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置查询条件，即只考虑在5小时以内记录的数据。其中，`TIMESTAMPDIFF()`函数计算两个时间之间的差值，单位是小时；`now()`函数获取当前日期和时间。\n\n4. `AND 人数分布表.building_name = '3号学生公寓' AND 人数分布表.region_name = '高新校区' AND 人数分布表.org_name = '中国科学技术大学'`：设置查询条件，即只考虑满足特定条件的数据。这里限制了建筑名称、所在区域和所属机构的名称。\n\n5. `ORDER BY 人数分布表.stat_time DESC LIMIT 1`：对查询结果进行排序（按统计时间倒序排列）并限制返回的记录数为1条。"
    },
    {
        "query": "有多少行人戴眼镜？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于计算某个特定时间范围内在指定区域内、某个单位里，有多少人佩戴眼镜的统计数据。以下是各子句的解释：\n\n1. select count(*) as 戴眼镜人数: 选择统计计数(*)，并为其取名为\"戴眼镜人数\"。\n2. from d_people as 人员表: 从d_people表（假设是存储人员信息的表）开始查询。\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 联接s_camera表（假设是存储摄像头信息的表），基于人员表中的camera_id和摄像头表的id相等进行联接。\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 联接s_room表（假设是存储房间信息的表），基于摄像头表中的pid和房间表的id相等进行联接。\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 联接s_building表（假设是存储楼栋信息的表），基于房间表中的pid和楼栋表的id相等进行联接。\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 联接s_region表（假设是存储区域信息的表），基于楼栋表中的pid和区域表的id相等进行联接。\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 联接s_organization表（假设是存储单位信息的表），基于区域表中的pid和单位表的id相等进行联接。\n8. join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id: 联接t_glasses表（假设是存储眼镜信息的表），基于人员表中的glasses和眼镜维表的id相等进行联接。\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5: 设置查询条件，只返回最近5分钟内的数据。\n10. and 眼镜维表.name='戴眼镜': 设置查询条件，只返回名称字段等于“戴眼镜”的数据。\n11. and 区域表.region_name='高新校区': 设置查询条件，只返回区域名称为“高新校区”的数据。\n12. and 单位表.org_name='中国科学技术大学': 设置查询条件，只返回单位名称字段为“中国科学技术大学”的数据。\n\n通过以上联接和条件筛选，最终统计出特定时间内在特定区域、单位的戴眼镜的人数。"
    },
    {
        "query": "图书教育中心人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取“图书教育中心”在“高新校区”的“中国科学技术大学”中的人数。以下是各部分解释：\n\n1. `select 人数分布表.num as 人数`：选择`num`列并为其赋予别名\"人数\"。`num`列应该表示人数。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表名为`a_people_spread_day_building`，并将其别名为“人数分布表”。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：限制条件之一是，从当前时间（now()）到`stat_time`的时间差（以小时为单位）小于5小时。这意味着只考虑最近5小时内的数据。\n\n4. `and 人数分布表.building_name='图书教育中心'`：限制条件之二是，`building_name`字段值为“图书教育中心”。\n\n5. `and 人数分布表.region_name='高新校区'`：限制条件之三是，`region_name`字段值为“高新校区”。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：限制条件之四是，`org_name`字段值为“中国科学技术大学”。\n\n7. `order by 人数分布表.stat_time desc`：按照`stat_time`字段降序排列结果集。这意味着最近的记录将首先显示。\n\n8. `limit 1`：限制结果集的大小为1条记录。由于使用了`order by`子句，这实际上意味着返回最近的记录。"
    },
    {
        "query": "找出近期标记的一些行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从多个表中检索数据。以下是各部分解释：\n\n1. `select 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id`: 从`a_people_trail`表中选择`start_time`（轨迹起始时间）、`end_time`（轨迹结束时间）、`name`（虚拟人名）和`camera_id_list`（经过的摄像头Id）列。\n\n2. `from a_people_trail as 行人轨迹表`: 指定数据来源是`a_people_trail`表，并为其起别名“行人轨迹表”。\n\n3. `join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id`: 将`s_camera`表（摄像头信息表）与`a_people_trail`表连接在一起，连接条件是`行人轨迹表`的`start_camera_id`等于`摄像头表`的`id`。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将`s_room`表（房间信息表）与`s_camera`表连接在一起，连接条件是`摄像头表`的`pid`等于`房间表`的`id`。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将`s_building`表（楼栋信息表）与`s_room`表连接在一起，连接条件是`房间表`的`pid`等于`楼栋表`的`id`。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将`s_region`表（区域信息表）与`s_building`表连接在一起，连接条件是`楼栋表`的`pid`等于`区域表`的`id`。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将`s_organization`表（单位信息表）与`s_region`表连接在一起，连接条件是`区域表`的`pid`等于`单位表`的`id`。\n\n8. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只返回满足`区域表`的`region_name`等于'高新校区'且`单位表`的`org_name`等于'中国科学技术大学'的数据。\n\n9. `order by 行人轨迹表.start_time desc`: 对查询结果按照`行人轨迹表`的`start_time`降序排序。\n\n10. `limit 10`: 限制查询结果的条数为10条。"
    },
    {
        "query": "从食堂出发的行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的行人轨迹信息。以下是各部分的详细解释：\n\n1. `select 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id`：这是查询的结果集列，包括轨迹的起始和结束时间、虚拟人名和经过的摄像头ID。\n\n2. `from a_people_trail as 行人轨迹表`：指定数据源是“a_people_trail”表，并为其取名为“行人轨迹表”。\n\n3. `join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id`：将“s_camera”表（摄像头信息表）与“a_people_trail”表通过“start_camera_id”字段连接起来。如果“start_camera_id”等于“摄像头表.id”，则这两个表的记录会被组合在一起。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将“s_room”表（房间信息表）与“摄像头表”表通过“pid”字段连接起来。如果“摄像头表.pid”等于“房间表.id”，则这两个表的记录会被组合在一起。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将“s_building”表（楼栋信息表）与“房间表”表通过“pid”字段连接起来。如果“房间表.pid”等于“楼栋表.id”，则这两个表的记录会被组合在一起。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将“s_region”表（区域信息表）与“楼栋表”表通过“pid”字段连接起来。如果“楼栋表.pid”等于“区域表.id”，则这两个表的记录会被组合在一起。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将“s_organization”表（单位信息表）与“区域表”表通过“pid”字段连接起来。如果“区域表.pid”等于“单位表.id”，则这两个表的记录会被组合在一起。\n\n8. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂'`：设置查询条件，只选择满足这些条件的记录。即要求区域名称是“高新校区”，单位名称是“中国科学技术大学”，楼栋名称是“学生食堂”。\n\n9. `order by 行人轨迹表.start_time desc`：按照轨迹的起始时间降序排列结果集。\n\n10. `limit 10`：限制结果集的大小，只返回前10条记录。"
    },
    {
        "query": "目前人数最少的是哪些大楼？",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num asc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中获取当前人数最少的大楼信息。以下是各个部分的解释：\n\n1. `select 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数`：选择要返回的列，包括建筑名称（以别名\"建筑名称\"表示）和人数（以别名\"人数\"表示）。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源，即名为\"a_people_spread_day_building\"的表，并为其分配一个别名\"人数分布表\"。\n\n3. `where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置查询条件，只考虑统计时间（stat_time）与当前时间（now()）相差不超过5小时的数据。\n\n4. `and 人数分布表.region_name='高新校区'`：进一步限制数据，只考虑区域名称为\"高新校区\"的数据。\n\n5. `and 人数分布表.org_name='中国科学技术大学'`：继续限制数据，只考虑组织名称为\"中国科学技术大学\"的数据。\n\n6. `order by 人数分布表.num asc`：对结果按照人数进行升序排列，即按人数从小到大排序。\n\n7. `limit 10`：限制返回的结果数量，只取前10条记录。"
    },
    {
        "query": "操场安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算安装在操场的监控数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数COUNT()来计算摄像头的数量，并将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`: 从s_camera表（摄像头表）中获取数据。这个表存储了摄像头的详细信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和房间表，连接条件是摄像头表中的pid字段等于房间表中的id字段。这个子句表示摄像头与房间之间的关系，即一个摄像头对应一个房间。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表和楼栋表，连接条件是房间表中的pid字段等于楼栋表中的id字段。这个子句表示房间与楼栋之间的关系，即一个房间属于一个楼栋。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表和区域表，连接条件是楼栋表中的pid字段等于区域表中的id字段。这个子句表示楼栋与区域之间的关系，即一个楼栋属于一个区域。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表和单位表，连接条件是区域表中的pid字段等于单位表中的id字段。这个子句表示区域与单位之间的关系，即一个区域属于一个单位。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 过滤条件，只有当楼栋名称为“体育场”，区域名称为“高新校区”且单位名称为“中国科学技术大学”时，才返回相关数据。\n\n综上所述，该查询语句将返回位于“中国科学技术大学”的“高新校区”体育场内的摄像头数量。"
    },
    {
        "query": "找出近期从学生食堂出发的行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一段SQL查询语句，用于查找近期（按时间倒序排序）从学生食堂出发的行人轨迹。具体解释如下：\n\n1. `select`：选择要返回的列。这里选择了`轨迹起始时间`、`轨迹结束时间`、`虚拟人名`和`经过的摄像头Id`。\n\n2. `from`：指定查询的数据表。这里是`a_people_trail`（行人轨迹表）。\n\n3. `join`：将其他数据表与`a_people_trail`表连接在一起。这里有5个连接条件，分别是：\n   - `s_camera`（摄像头表）：通过`行人轨迹表.start_camera_id`和摄像头表的`id`进行连接；\n   - `s_room`（房间表）：通过摄像头表的`pid`和房间表的`id`进行连接；\n   - `s_building`（楼栋表）：通过房间表的`pid`和楼栋表的`id`进行连接；\n   - `s_region`（区域表）：通过楼栋表的`pid`和区域表的`id`进行连接；\n   - `s_organization`（单位表）：通过区域表的`pid`和单位表的`id`进行连接。\n\n4. `where`：设置查询条件。这里是：区域表的区域名为`高新校区`，单位表的单位名称是`中国科学技术大学`，楼栋表的楼栋名称为`学生食堂`。\n\n5. `order by`：设置查询结果的排序方式。这里是按照`行人轨迹表.start_time`的时间倒序排序。\n\n6. `limit`：限制查询结果的数量。这里是返回最近10条轨迹记录。\n\n综合以上分析，这段SQL查询语句的目的是找到近期（按时间倒序排序）从学生食堂出发的行人轨迹。"
    },
    {
        "query": "告诉我现在图书馆有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前（最近）的图书馆人数。下面是对这个查询语句的解释：\n\n1. `select 人数分布表.num as 人数`：选择\"人数分布表\"表的\"num\"字段并将其重命名为\"人数\"。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定要查询的数据表名为\"a_people_spread_day_building\"（这里将其简写为\"人数分布表\"）。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：限制条件之一是，距离当前时间（now()函数返回当前日期和时间）不超过5小时的统计时间（stat_time字段）记录。\n\n4. `and 人数分布表.building_name='图书教育中心'`：限制条件之二是，该记录的\"building_name\"字段值等于\"图书教育中心\"。\n\n5. `and 人数分布表.region_name='高新校区'`：限制条件之三是，该记录的\"region_name\"字段值等于\"高新校区\"。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：限制条件之四是，该记录的\"org_name\"字段值等于\"中国科学技术大学\"。\n\n7. `order by 人数分布表.stat_time desc limit 1`：按\"stat_time\"字段的降序排序（最近的记录排在最前面）并仅选择一条记录（即最近的一条）。"
    },
    {
        "query": "给出教师食堂的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算教师食堂摄像头的数量。以下是各子句的解释：\n\n1. select: 选择要返回的结果；\n2. count(*): 计算满足条件的行数，即摄像头的数量；\n3. as 摄像头数量: 给计数结果起个别名\"摄像头数量\"；\n4. from s_camera as 摄像头表: 从摄像头表（s_camera）中获取数据；\n5. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接摄像头表和房间表，依据条件是摄像头表的pid等于房间表的id；\n6. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接房间表和楼栋表，依据条件是房间表的pid等于楼栋表的id；\n7. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接楼栋表和区域表，依据条件是楼栋表的pid等于区域表的id；\n8. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接区域表和单位表，依据条件是区域表的pid等于单位表的id；\n9. where 楼栋表.building_name='教工食堂': 筛选出楼栋表中的建筑名称等于\"教工食堂\"的数据；\n10. and 区域表.region_name='高新校区': 筛选出区域表中的区域名称等于\"高新校区\"的数据；\n11. and 单位表.org_name='中国科学技术大学': 筛选出单位表中的单位名称等于\"中国科学技术大学\"的数据；"
    },
    {
        "query": "3号学生公寓安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算\"3号学生公寓\"安装了多少个摄像头。这个查询涉及多个表格的连接和过滤条件。以下是查询语句的各个部分的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数COUNT(*)作为查询结果，并将结果命名为\"摄像头数量\"。这将返回满足后续过滤条件的摄像头的总数。\n\n2. `from s_camera as 摄像头表`：指定查询的源表是s_camera（可能表示“监控设备”或类似的信息），并在查询中将其简称为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将s_room表（可能表示“房间”或类似的信息）与摄像头表连接在一起，连接条件是摄像头表的pid字段等于房间表的id字段。这意味着一个摄像头对应于一个房间。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将s_building表（可能表示“建筑”或类似的信息）与房间表连接在一起，连接条件是房间表的pid字段等于楼栋表的id字段。这意味着一个房间属于一个建筑。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将s_region表（可能表示“地区”或类似的信息）与楼栋表连接在一起，连接条件是楼栋表的pid字段等于区域表的id字段。这意味着一个建筑属于一个地区。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将s_organization表（可能表示“组织”或类似的信息）与区域表连接在一起，连接条件是区域表的pid字段等于单位表的id字段。这意味着一个地区属于一个组织。\n\n7. `where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询过滤条件，只返回满足以下三个条件的记录：楼栋表的建筑名称必须是\"3号学生公寓\"，区域表的地区名称必须是\"高新校区\"，单位表的组织名称必须是\"中国科学技术大学\"。这三个条件组合起来确保我们只计算属于特定地点（3号学生公寓）的摄像头数量。"
    },
    {
        "query": "教工食堂人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据表中检索满足特定条件的信息。下面是关于该SQL查询语句的每个部分的详细解释：\n\n1. `select 人数分布表.num as 人数`: 选择字段`num`并将其命名为`人数`，这是要从数据表返回的列名。\n\n2. `from a_people_spread_day_building as 人数分布表`: 从名为`a_people_spread_day_building`的数据表中选择数据，并将此表重命名为`人数分布表`以便于后续操作。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这部分设置了一个条件，即统计时间（`stat_time`）与当前时间（通过`now()`函数获取）之间的小时差小于5小时。\n\n4. `and 人数分布表.building_name='教工食堂'`: 进一步限制查询结果，要求建筑名称等于'教工食堂'。\n\n5. `and 人数分布表.region_name='高新校区'`: 继续添加条件，要求地区名称等于'高新校区'。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 最后一个条件，要求组织名称等于'中国科学技术大学'。\n\n7. `order by 人数分布表.stat_time desc limit 1`: 对查询结果进行排序，按照统计时间的降序排列，并限制返回的结果数量为1条。"
    },
    {
        "query": "信智楼近期识别到多少手中未持物的行人？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于从多个表中联合查询数据并统计结果。具体解释如下：\n\n1. `select count(*) as 手里拿东西的人数`：选择计数函数`count(*)`作为查询结果，并将结果命名为“手里拿东西的人数”。\n\n2. `from d_people as 人员表`：定义第一个表名为“人员表”，来源是`d_people`表。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：联接第二个表“摄像头表”，连接条件是“人员表”的`camera_id`与“摄像头表”的`id`相等。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：联接第三个表“房间表”，连接条件是“摄像头表”的`pid`与“房间表”的`id`相等。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：联接第四个表“楼栋表”，连接条件是“房间表”的`pid`与“楼栋表”的`id`相等。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：联接第五个表“区域表”，连接条件是“楼栋表”的`pid`与“区域表”的`id`相等。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：联接第六个表“单位表”，连接条件是“区域表”的`pid`与“单位表”的`id`相等。\n\n8. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`：联接第七个表“持物维表”，连接条件是“人员表”的`hold_obj`与“持物维表”的`id`相等。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`：设定查询条件。这些条件包括：时间差（当前时间与记录时间的差值）小于5分钟，持物维表中的名字为“未持物”，区域表的区域名称为“高新校区”，单位表的单位名称为“中国科学技术大学”，楼栋表的楼栋名称为“信智楼”。\n\n综上，这个SQL查询语句的目的是查找并计算“信智楼”在最近5分钟内未被识别出手持物品的行人人数。"
    },
    {
        "query": "1号学科楼摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于查询1号学科楼的摄像头数量。以下是各部分的具体解释：\n\n1. `select count(*) as 摄像头数量`: 选择函数COUNT(*)来计算摄像头的数量，并将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`: 从s_camera表（摄像头表）开始查询，将这个表命名为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表（房间表），连接条件是摄像头表的主键pid等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表（楼栋表），连接条件是房间表的主键pid等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表（区域表），连接条件是楼栋表的主键pid等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表（单位表），连接条件是区域表的主键pid等于单位表的id。\n\n7. `where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求楼栋名称为“1号学科楼”，区域名称为“高新校区”，单位名称为中国科学技术大学。\n\n整个查询语句的意思是：从摄像头表开始，通过房间表、楼栋表、区域表和单位表进行连接，查询出满足条件的1号学科楼的摄像头数量。"
    },
    {
        "query": "给出3号学科楼的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询特定建筑（这里是“3号学科楼”）的摄像头数量。以下是各部分详解：\n\n1. `select count(*) as 摄像头数量`：这部分定义了需要返回的列名称（摄像头数量）和计算方法（count(*)，计算满足条件的摄像头总数）。\n\n2. `from s_camera as 摄像头表`：指定数据源是名为 \"s_camera\" 的摄像头表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是第一个联接（JOIN）子句，用于将摄像头表与房间表关联起来，基于摄像头表中的 pid 字段等于房间表中的 id 字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是第二个联接子句，用于将房间表与楼栋表关联起来，基于房间表中的 pid 字段等于楼栋表中的 id 字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是第三个联接子句，用于将楼栋表与区域表关联起来，基于楼栋表中的 pid 字段等于区域表中的 id 字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是第四个联接子句，用于将区域表与单位表关联起来，基于区域表中的 pid 字段等于单位表中的 id 字段。\n\n7. `where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是 WHERE 子句，用来过滤符合条件的记录，这里限定的是楼栋名称为“3号学科楼”、所在区域为“高新校区”且所属单位为“中国科学技术大学”的情况。\n\n综合以上信息，这段 SQL 语句的目的是查询位于“3号学科楼”、属于“高新校区”且归属于“中国科学技术大学”的摄像头数量。"
    },
    {
        "query": "3号学科楼摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算\"3号学科楼\"的摄像头数量。以下是各子句和表的解释：\n\n1. `select count(*) as 摄像头数量`：选择摄像头的总数作为结果。\n2. `from s_camera as 摄像头表`：指定摄像头数据的表名为s_camera。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将房间表（s_room）与摄像头表（s_camera）通过摄像头所在的房间ID进行连接。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将楼栋表（s_building）与房间表（s_room）通过房间所在的楼栋ID进行连接。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将区域表（s_region）与楼栋表（s_building）通过楼栋所在区域ID进行连接。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将单位表（s_organization）与区域表（s_region）通过区域所属单位ID进行连接。\n7. `where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设定查询条件，只返回满足条件的数据，即\"3号学科楼\"、\"高新校区\"和中国科学技术大学的摄像头数量。"
    },
    {
        "query": "所有建筑物",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称 from s_building as 楼栋表  join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid = 单位表.id where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'  order by 楼栋表.building_name asc;\n```\n这是一个SQL查询语句，用于从多个表中检索特定条件下的数据。以下是该SQL语句的详细解释：\n\n1. `select`：开始选择数据的命令。\n2. `building_name`：要选择的字段之一，表示楼宇名称。\n3. `as`：定义别名，在这里将`building_name`别名为`楼宇名称`，以便在结果中更清晰地显示。\n4. `s_building`：源表名，表示\"楼栋表\"。\n5. `join`：联接操作，用于将多个表连接在一起以获取所需数据。\n6. `s_region`：源表名，表示\"区域表\"。\n7. `on`：指定联接条件，即满足这个条件的行将被连接在一起。在这个例子中，`楼栋表.pid=区域表.id`。\n8. `s_organization`：源表名，表示\"单位表\"。\n9. `where`：过滤条件，只有满足这些条件的行才会被返回。在这个例子中，`单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'`。\n10. `order by`：排序条件，按照这个字段的值对结果进行排序。在这个例子中，`楼栋表.building_name asc`表示按照楼宇名称的升序排序。"
    },
    {
        "query": "最近5分钟内识别到的人员中，不同上衣风格的人数是多少？",
        "script": "```sql\nselect substring(人员表.upper,6) as 上衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.upper  order by 人员表.upper asc;\n```\n这个SQL语句是一个复杂的查询，用于从多个表中获取数据并计算特定条件下的人员数量。下面是对这个SQL语句的解释：\n\n1. `d_people`：人员表，存储人员的信息，如姓名、性别、年龄等。\n2. `s_camera`：摄像头表，存储摄像头的信息，如编号、位置等。\n3. `s_room`：房间表，存储房间的信息，如编号、名称、所属楼栋等。\n4. `s_building`：楼栋表，存储楼栋的信息，如编号、名称、所属区域等。\n5. `s_region`：区域表，存储区域的信息，如编号、名称、所属单位等。\n6. `s_organization`：单位表，存储单位的信息，如编号、名称等。\n\n这个SQL语句的目的是计算在最近5分钟内被摄像头识别到的人员中，不同上衣风格的人数。下面是各个子句的说明：\n\n- `TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：限制只返回在5分钟内的记录，即最近5分钟内的人员。\n- `区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：限制只返回位于“高新校区”和“中国科学技术大学”的摄像头识别到的人员。\n- `select substring(人员表.upper,6) as 上衣风格, count(*) as 人数`：选择上衣风格（通过substring函数提取人员表中的上衣信息）和对应的计数（即该上衣风格的人数）。\n- `from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id`：连接各个表以获取所需的数据。\n- `group by 人员表.upper  order by 人员表.upper asc`：按照上衣风格对结果进行分组，并按照上衣风格的字母顺序进行排序。"
    },
    {
        "query": "5分钟内识别到多少未背包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于计算在给定时间内（例如过去5分钟内）某个特定区域内（例如“高新校区”）未背包行走的行人数量。\n\n以下是各子句的解释：\n\n1. `SELECT count(*) as 背双肩包的人数`: 选择计数所有匹配条件的行数，并将其命名为\"背双肩包的人数\"。\n\n2. `FROM d_people AS 人员表`: 从名为\"d_people\"的表格开始查询，并将该表格简写为\"人员表\"。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`: 将名为\"s_camera\"的表格与\"人员表\"通过camera_id和id进行连接。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 将名为\"s_room\"的表格与\"摄像头表\"通过pid和id进行连接。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 将名为\"s_building\"的表格与\"房间表\"通过pid和id进行连接。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 将名为\"s_region\"的表格与\"楼栋表\"通过pid和id进行连接。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 将名为\"s_organization\"的表格与\"区域表\"通过pid和id进行连接。\n\n8. `JOIN t_bag AS 背包维表 ON 人员表.bag = 背包维表.id`: 将名为\"t_bag\"的表格与\"人员表\"通过bag和id进行连接。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, NOW()) < 5 AND 背包维表.name = '未背包' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 设定查询条件，即在过去5分钟内，且是在\"高新校区\"的\"中国科学技术大学\"范围内，并且行人的背包状态为\"未背包\"。\n\n最后，这个查询将返回满足这些条件的行人数量。"
    },
    {
        "query": "5分钟内识别到多少挎单肩包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于在数据库中查找5分钟内携带单肩包的行人数量。这个查询涉及到多个表的连接，下面我们来逐步解释这个SQL语句：\n\n1. `select count(*) as 背双肩包的人数`: 这部分是查询目标，即返回携带单肩包的行人数量。\n\n2. `from d_people as 人员表`: 从`d_people`表开始查询，这个表存储了行人的信息。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接`s_camera`表，这个表存储了摄像头的详细信息。通过摄像头ID将这两个表关联起来。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接`s_room`表，这个表存储了各个房间的信息。通过房间ID将这两个表关联起来。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接`s_building`表，这个表存储了各个楼栋的信息。通过楼栋ID将这两个表关联起来。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接`s_region`表，这个表存储了各个区域的信息。通过区域ID将这两个表关联起来。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接`s_organization`表，这个表存储了各个单位的信息。通过单位ID将这两个表关联起来。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`: 连接`t_bag`表，这个表存储了各种背包的类型和名称。通过背包类型将这两个表关联起来。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这个条件限制了我们只关注5分钟内的数据，同时要求背包类型为“单肩包”，且所在区域和单位分别为“高新校区”和“中国科学技术大学”。\n\n综上所述，这个SQL语句的目的是在特定的时间和地点范围内，统计5分钟内携带单肩包的行人数量。"
    },
    {
        "query": "统计学生食堂每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一段SQL查询语句，用于从数据库中查询并计算学生食堂每天的平均人数。以下是各部分的具体解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选择人数分布表中的最小stat_time字段，作为统计时间。\n\n2. `round(avg(人数分布表.num)) as 平均人数`: 使用round函数四舍五入求平均，即计算每日的平均人数。\n\n3. `from a_people_spread_day_building as 人数分布表`: 从a_people_spread_day_building表中读取数据，该表记录了每天各个区域的人数情况。\n\n4. `WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 限制查询条件，只返回满足以下条件的记录：建筑名为“学生食堂”，距离当前时间（now）不超过30天，区域名称为“高新校区”，机构名称为“中国科学技术大学”。\n\n5. `group by 人数分布表.stat_day`: 对日期进行分组，以便按天统计平均人数。\n\n6. `order by min(人数分布表.stat_time) asc`: 根据最小的统计时间升序排列结果，使得结果按照日期从小到大排序。"
    },
    {
        "query": "近期识别到的人员中，戴眼镜的有多少？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段SQL查询语句，主要用于计算在特定时间范围内、特定区域内的某单位中戴眼镜的人数。以下是各子句的解释：\n\n1. `select count(*) as 戴眼镜人数`: 选择计数函数count()，计算满足条件的记录数，并将其命名为“戴眼镜人数”。\n\n2. `from d_people as 人员表`: 从人员数据表（d_people）开始查询，将其简称为“人员表”。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接摄像头数据表（s_camera），连接条件是人员表的camera_id与摄像头表的id相等。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接房间数据表（s_room），连接条件是摄像头表的pid与房间表的id相等。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接楼栋数据表（s_building），连接条件是房间表的pid与楼栋表的id相等。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接区域数据表（s_region），连接条件是楼栋表的pid与区域表的id相等。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接单位数据表（s_organization），连接条件是区域表的pid与单位表的id相等。\n\n8. `join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id`: 连接眼镜数据表（t_glasses），连接条件是人员表的glasses字段与眼镜维表的id字段相等。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 过滤条件之一，限制最近5分钟内的人员记录。\n\n10. `and 眼镜维表.name='戴眼镜'`: 过滤条件之二，只选择名为“戴眼镜”的眼镜类型。\n\n11. `and 区域表.region_name='高新校区'`: 过滤条件之三，限制区域为“高新校区”。\n\n12. `and 单位表.org_name='中国科学技术大学'`: 过滤条件之四，限制单位为“中国科学技术大学”。"
    },
    {
        "query": "没拍到人的室内摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个关联表中获取特定条件下的摄像头信息。以下是各个部分和条件的解释：\n\n1. `select`: 选择要返回的列。\n2. `摄像头表.id as 摄像头编号`: 从摄像头表中选择ID字段，并为其设置一个别名\"摄像头编号\"，以便在结果集中更方便地识别。\n3. `房间表.room_name as 安装位置`: 从房间表中选择room_name字段，并为其设置一个别名\"安装位置\"。\n4. `楼栋表.building_name as 所属大楼`: 从楼栋表中选择building_name字段，并为其设置一个别名\"所属大楼\"。\n5. `from`: 指定要查询的表。这里涉及到四个关联表，分别是s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）和s_region（区域表）。\n6. `join`: 连接这些表，基于每个表的pid字段进行连接。例如，摄像头表的pid与房间表的id相连，房间表的pid与楼栋表的id相连等。\n7. `where`: 设置筛选条件。这个查询只选择内部摄像头（即`inhouse`字段值为1的摄像头），并且排除过去10分钟内有人经过的摄像头。另外，还选择了位于“高新校区”且属于“中国科学技术大学”的摄像头。\n8. `and`: 连接多个筛选条件，确保同时满足所有条件。\n9. `order by`: 按摄像头表中的ID字段升序排列结果集。\n10. `limit`: 限制结果集的大小，这里设置为1000条记录。\n\n总之，这个查询语句的目的是从摄像头表和其他关联表中获取所有内部摄像头的信息（包括其安装位置和大楼名称），但排除过去10分钟内有人经过的摄像头，并确保位于特定校区和单位的摄像头。"
    },
    {
        "query": "体育馆人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育馆' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中检索特定条件下的数据。以下是各部分的详细说明：\n\n1. `select 人数分布表.num as 人数`：选择`num`字段并将其重命名为`人数`。\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表格（即`a_people_spread_day_building`），并为其分配一个别名（即`人数分布表`）。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置时间过滤条件，即统计时间与当前时间的小时差小于5小时。\n4. `and 人数分布表.building_name='体育馆'`：设置场馆名称为“体育馆”。\n5. `and 人数分布表.region_name='高新校区'`：设置地区名称为“高新校区”。\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置组织名称为“中国科学技术大学”。\n7. `order by 人数分布表.stat_time desc`：按统计时间降序排列结果。\n8. `limit 1`：限制返回的记录数为1条。"
    },
    {
        "query": "找出师生活动中心一个月内，每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于查找师生活动中心在一个月内每天的最高人数。以下是各部分的详细解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选择最小的统计时间作为结果中的统计时间。\n\n2. `round(max(人数分布表.num)) as 平均人数`: 计算并返回每天的最大人数，即最高人数。\n\n3. `from a_people_spread_day_building as 人数分布表`: 指定数据表名，该表中存储了人员分布的统计数据。\n\n4. `WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 设置筛选条件，仅选取师生活动中心的统计数据、最近30天的数据、位于高新校区且属于中国科学技术大学的数据。\n\n5. `group by 人数分布表.stat_day`: 对每天的统计数据进行分组。\n\n6. `order by min(人数分布表.stat_time) asc`: 按照统计时间的最小值（即最早的时间）进行升序排序，保证结果按时间顺序排列。"
    },
    {
        "query": "近期识别到多少人？",
        "script": "```sql\nselect count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5     and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段SQL查询语句，主要用于计算在特定时间范围内（例如过去五分钟）位于特定区域（例如高新校区）和单位的总人数。以下是各子句的解析：\n\n1. `select count(*) as 人数`: 选择计数函数count(*)，用于计算满足条件的记录总数。\n2. `from d_people as 人员表`: 从数据表d_people中获取数据，简称为“人员表”。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 将s_camera表（简称“摄像头表”）与d_people表通过on条件连接在一起，即当两个表中camera_id等于id时，将这些记录组合成一条新记录。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将s_room表（简称“房间表”）与摄像头表通过on条件连接在一起，即当摄像头表的pid等于房间表的id时，将这些记录组合成一条新记录。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将s_building表（简称“楼栋表”）与房间表通过on条件连接在一起，即当房间表的pid等于楼栋表的id时，将这些记录组合成一条新记录。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将s_region表（简称“区域表”）与楼栋表通过on条件连接在一起，即当楼栋表的pid等于区域表的id时，将这些记录组合成一条新记录。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将s_organization表（简称“单位表”）与区域表通过on条件连接在一起，即当区域表的pid等于单位表的id时，将这些记录组合成一条新记录。\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 设置过滤条件，即从人员表中的moment字段减去当前时间now()的时间差（以分钟为单位）小于5。这个条件表示筛选出最近五分钟内的记录。\n9. `and 区域表.region_name='高新校区'`: 添加过滤条件，即区域表的region_name字段值等于'高新校区'。这个条件表示筛选出位于高新校区的记录。\n10. `and 单位表.org_name='中国科学技术大学'`: 添加过滤条件，即单位表的org_name字段值等于'中国科学技术大学'。这个条件表示筛选出属于中国科学技术大学的记录。\n\n综上，这段SQL语句的目的是计算过去五分钟内在高新校区的中国科学技术大学内的总人数。"
    },
    {
        "query": "图教中心人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。以下是各部分的解释：\n\n1. `select 人数分布表.num as 人数`：选择\"人数分布表\"表的\"num\"字段作为输出列的名称（在这个例子中，输出列的名称是\"人数\"）。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源，即\"a_people_spread_day_building\"表，并将此表临时命名为\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置过滤条件，只返回在过去5小时内的数据。这个条件通过`TIMESTAMPDIFF`函数计算当前时间(`now()`)与统计时间(`stat_time`)的小时差，并确保该差值小于5。\n\n4. `and 人数分布表.building_name='图书教育中心'`：设置过滤条件，只返回名为\"图书教育中心\"的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：设置过滤条件，只返回位于\"高新校区\"的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置过滤条件，只返回属于\"中国科学技术大学\"的数据。\n\n7. `order by 人数分布表.stat_time desc limit 1`：对结果进行排序和限制。`order by`按`stat_time`降序排列数据；`limit 1`则限制返回的数据条数为1条。\n\n综上，这个SQL语句的目的是获取过去5小时内、位于\"图书教育中心\"且位于\"高新校区\"且属于\"中国科学技术大学\"的最后一个记录（按`stat_time`降序排列后的第一条记录）。"
    },
    {
        "query": "1号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个关联表中计算满足特定条件的摄像头数量。以下是各个部分和条件的解释：\n\n1. `select count(*) as 摄像头数量`: 这行代码用于计算满足后续条件的摄像头总数。`count(*)`是一个聚合函数，用于统计满足指定条件的记录数。这里将其命名为`摄像头数量`，以便于结果展示。\n\n2. `from s_camera as 摄像头表`: 这是指定要查询的摄像头的表名，假设这个表名为`s_camera`，为了在查询中方便地引用，我们为其起了一个别名\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这行代码表示将`摄像头表`与`房间表`进行连接（JOIN），连接条件是`摄像头表`中的`pid`字段等于`房间表`中的`id`字段。这样做的目的是为了获取每个摄像头的房间信息。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这行代码表示将`房间表`与`楼栋表`进行连接，连接条件是`房间表`中的`pid`字段等于`楼栋表`中的`id`字段。这样做的目的是为了获取每个摄像头的楼栋信息。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这行代码表示将`楼栋表`与`区域表`进行连接，连接条件是`楼栋表`中的`pid`字段等于`区域表`中的`id`字段。这样做的目的是为了获取每个摄像头的校区信息。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这行代码表示将`区域表`与`单位表`进行连接，连接条件是`区域表`中的`pid`字段等于`单位表`中的`id`字段。这样做的目的是为了获取每个摄像头的所属单位信息。\n\n7. `where 楼栋表.building_name='1号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这行代码是查询条件，只有当楼栋名称、校区名称和单位名称都满足这些条件时，才会被计入摄像头数量。\n\n综上所述，这个SQL语句的目的是查询“1号学生公寓”中属于“高新校区”且隶属于“中国科学技术大学”的所有摄像头的数量。"
    },
    {
        "query": "列出镜头中有人的室外摄像头的编号",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中获取有关摄像头的数据。以下是各子句的详细解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`: 这部分定义了查询结果中要显示的字段，包括摄像头编号、安装位置（房间名）和所属大楼名称。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分是连接四个表的基础，通过摄像头表的主键与其他表的关联条件，将这四个表的数据整合在一起。\n\n3. `where 摄像头表.inhouse = 0 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是筛选条件，只选取室内摄像头（inhouse字段值为0），且该摄像头在近10分钟内有人出现在其镜头中的（根据d_people表的moment字段和时间差计算得出），并且位于“高新校区”和属于“中国科学技术大学”。\n\n4. `order by 摄像头表.id asc limit 1000;`: 这部分是排序和限制返回结果的数量，按摄像头编号升序排列并返回最多1000条记录。"
    },
    {
        "query": "信智楼目前有多少个房间是没人的？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'     and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这个SQL查询语句是用来计算信智楼内当前没有人的房间数量。以下是各部分的功能解释：\n\n1. `select count(房间表.room_name) 有人的房间数量`: 计算有人的房间数量。\n\n2. `from s_camera as 摄像头表`: 从摄像头表（s_camera）开始查询。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接房间表（s_room），条件是摄像头表的pid等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接楼栋表（s_building），条件是房间表的pid等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接区域表（s_region），条件是楼栋表的pid等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接单位表（s_organization），条件是区域表的pid等于单位表的id。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 限定查询范围为高新校区的中国科学技术大学的信智楼。\n\n8. `and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 这个子查询用来找出过去10分钟内有人出现的摄像头id。然后将这些id从摄像头表中排除，以计算无人出现的房间数。"
    },
    {
        "query": "4号学生公寓安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算“4号学生公寓”安装了几个监控（摄像头）。以下是各子句的解析：\n\n1. `select count(*) as 摄像头数量`：选择计数函数count(*)作为结果，并将其命名为摄像头数量。这将返回满足后续条件的摄像头的总数。\n\n2. `from s_camera as 摄像头表`：指定数据来源为s_camera表，并将该表简写为摄像头表。s_camera表存储了摄像头的数据。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，条件是摄像头表的pid字段等于房间表的id字段。这意味着每个摄像头都与一个房间相关联。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，条件是房间表的pid字段等于楼栋表的id字段。这意味着每个房间都属于一个楼栋。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，条件是楼栋表的pid字段等于区域表的id字段。这意味着每个楼栋都属于一个区域。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，条件是区域表的pid字段等于单位表的id字段。这意味着每个区域都属于一个单位（例如学校或公司）。\n\n7. `where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，要求楼栋名称为“4号学生公寓”，区域名称为“高新校区”，单位名称为中国科学技术大学。这些条件将限制查询结果只包括符合条件的摄像头。\n\n通过这个查询，你可以得到满足所有条件的4号学生公寓的摄像头数量。"
    },
    {
        "query": "安装在室外的摄像头有哪些？",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse=0 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id  limit 1000;\n```\n这是一段 SQL 语言的数据库查询语句。它用于从多个表中检索数据并返回一个包含所需信息的记录集。以下是该语句的详细解释：\n\n1. `s_camera as 摄像头表`: 这是摄像头的表格，其中存储了摄像头的各种信息，如 ID（摄像头编号）等。\n\n2. `s_room as 房间表`: 这是一个房间表格，其中存储了每个房间的信息，如房间名称、所属大楼等。\n\n3. `s_building as 楼栋表`: 这是一个大楼表格，其中存储了每个大楼的信息，如大楼名称、所属区域等。\n\n4. `s_region as 区域表`: 这是一个区域表格，其中存储了每个区域的信息，如区域名称、所属单位等。\n\n5. `s_organization as 单位表`: 这是一个单位表格，其中存储了每个单位的信息，如单位名称、负责人等。\n\n6. `where 摄像头表.inhouse=0 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是查询条件，表示只查询那些不在室内（即室外）的摄像头，并且这些摄像头位于“高新校区”和属于“中国科学技术大学”这两个条件都满足的情况下。\n\n7. `order by 摄像头表.id`: 这是排序规则，表示按照摄像头的ID进行升序排列。\n\n8. `limit 1000`: 这是限制返回结果的条数，即仅返回前1000条符合条件的记录。"
    },
    {
        "query": "师生服务中心安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从数据库中获取满足特定条件的摄像头数量。以下是各子句和条件的解释：\n\n1. `select count(*) as 摄像头数量`：选择子句，计算满足后续WHERE子句条件要求的摄像头的总数，并将该计数命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：指定数据来源，摄像头表的别名设为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，依据摄像头表的主键（这里假定为pid）等于房间表的主键（id）这一条件进行连接。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，依据房间表的主键（id）等于楼栋表的主键（id）这一条件进行连接。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，依据楼栋表的主键（id）等于区域表的主键（id）这一条件进行连接。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，依据区域表的主键（id）等于单位表的主键（id）这一条件进行连接。\n\n7. `where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：过滤条件，仅返回满足以下三个条件的数据：楼栋表中的建筑名称为\"行政与师生服务中心\"，区域表中的地区名称为\"高新校区\"，单位表中的单位名称是\"中国科学技术大学\"。\n\n这个查询语句的目的是统计位于\"行政与师生服务中心\"、\"高新校区\"且隶属于\"中国科学技术大学\"的所有摄像头数量。"
    },
    {
        "query": "有人的室外摄像头有哪些",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个复杂的SQL查询语句，用于从多个表中获取信息。下面是该SQL语句的解析：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`：选择要查询的列。这里选择了摄像头编号、安装位置和所属大楼。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid=单位表.id`：指定查询的表结构。这里是通过摄像头表（s_camera）与房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）进行连接操作来获取数据。\n\n3. `where 摄像头表.inhouse = 0 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10) and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件。这里的条件是：摄像头未在室内（inhouse = 0），且在最近10分钟内有人使用过（根据d_people表中的camera_id和moment字段判断），并且位于\"高新校区\"且属于\"中国科学技术大学\"。\n\n4. `order by 摄像头表.id asc limit 1000;`：对查询结果按照摄像头编号升序排列，并限制返回记录数不超过1000条。"
    },
    {
        "query": "找出镜头中有人的室外摄像头的编号",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个 SQL 查询语句，用于查找镜头中有人（即检测到人物）的室外摄像头编号及其相关信息。以下是各个子句和表的解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`：这是选择要查询的列。其中，\"摄像头表.id\" 是摄像头编号，\"房间表.room_name\" 是摄像头所在的房间名称，\"楼栋表.building_name\"是摄像头所在的大楼名称。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid=单位表.id`：这是一系列的连接操作，将这些关联的表连接在一起。其中，\"s_camera\" 是摄像头信息表，\"s_room\" 是房间信息表，\"s_building\" 是楼栋信息表，\"s_region\" 是区域信息表，\"s_organization\" 是单位信息表。通过连接这些表，我们可以获取到摄像头的详细信息。\n\n3. `where 摄像头表.inhouse = 0 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10) and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是查询条件。其中，\"摄像头表.inhouse = 0\" 表示查询的是室外摄像头（室内摄像头 inhouse 为 1），\"(select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)\" 是查询最近 10 分钟内检测到人物的摄像头 ID，\"区域表.region_name='高新校区'\" 和 \"单位表.org_name='中国科学技术大学'\" 是限制查询范围。\n\n4. `order by 摄像头表.id asc limit 1000`：这是排序和限制结果数量。按照摄像头编号（id）升序排列，并只返回前 1000 个结果。"
    },
    {
        "query": "现在有多少人在高新校区室外？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='高新校区室外' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取某个时间段内在“高新校区室外”的人数信息。具体解释如下：\n\n1. `SELECT 人数分布表.num AS 人数`: 从表格\"人数分布表\"中选取字段\"num\"并命名为\"人数\"。\n2. `FROM a_people_spread_day_building as 人数分布表`: 指定数据来源是名为\"a_people_spread_day_building\"的表格，并将该表格简称为\"人数分布表\"。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 对时间进行限制，只选择距离当前时间（now()函数返回当前时间）小于5小时的数据。\n4. `AND 人数分布表.building_name='高新校区室外' AND 人数分布表.region_name='高新校区' AND 人数分布表.org_name='中国科学技术大学'`: 对数据进一步筛选，只选择满足条件\"建筑名称='高新校区室外'\"、\"区域名称='高新校区'\"和\"机构名称='中国科学技术大学'\"的数据。\n5. `ORDER BY 人数分布表.stat_time DESC`: 对结果按照统计时间（stat_time字段）降序排列。\n6. `LIMIT 1`: 限制返回的结果集只有一条记录。"
    },
    {
        "query": "给出7号学生公寓的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算7号学生公寓（假设这是某个建筑物的名称）的摄像头数量。以下是这个查询语句的各个部分及其作用的解释：\n\n1. `select count(*) as 摄像头数量`: 这部分代码用于计算满足查询条件的摄像头的数量。这里我们使用`count(*)`函数来计算摄像头的数量，并将结果命名为`摄像头数量`。\n\n2. `from s_camera as 摄像头表`: 这部分代码指定了摄像头的数据表，名为`s_camera`，并将其简称为`摄像头表`。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这部分代码用于将`摄像头表`和`房间表`进行连接，连接条件是`摄像头表`中的`pid`字段等于`房间表`中的`id`字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这部分代码用于将`房间表`和`楼栋表`进行连接，连接条件是`房间表`中的`pid`字段等于`楼栋表`中的`id`字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这部分代码用于将`楼栋表`和`区域表`进行连接，连接条件是`楼栋表`中的`pid`字段等于`区域表`中的`id`字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分代码用于将`区域表`和`单位表`进行连接，连接条件是`区域表`中的`pid`字段等于`单位表`中的`id`字段。\n\n7. `where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分代码用于设置查询条件，即只有当`楼栋表`的`building_name`字段等于“7号学生公寓”，`区域表`的`region_name`字段等于“高新校区”，以及`单位表`的`org_name`字段等于“中国科学技术大学”时，才会返回相应的摄像头信息。\n\n通过这个查询语句，我们可以得到7号学生公寓的摄像头数量。"
    },
    {
        "query": "统计图书教育中心每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取特定建筑（在这个例子中是“图书教育中心”）在特定时间段内的每日最大人数。具体解释如下：\n\n1. `SELECT min(人数分布表.stat_time) as 统计时间`：选取最近一次的人数统计时间作为“统计时间”。\n2. `round(max(人数分布表.num)) as 平均人数`：选取每日的最大人数并四舍五入保留整数作为“平均人数”。\n3. `FROM a_people_spread_day_building as 人数分布表`：指定数据来源是\"a_people_spread_day_building\"这张表格，并将其重命名为“人数分布表”。\n4. `WHERE 人数分布表.building_name='图书教育中心'`：筛选出“图书教育中心”的数据。\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`：筛选出距离现在（NOW()函数返回当前日期和时间）不超过30天的数据。\n6. `and 人数分布表.region_name='高新校区'`：筛选出属于“高新校区”的数据。\n7. `and 人数分布表.org_name='中国科学技术大学'`：筛选出属于“中国科学技术大学”的数据。\n8. `group by 人数分布表.stat_day`：按照统计数据所在的日期（stat_day字段）进行分组。\n9. `order by min(人数分布表.stat_time) asc`：按照统计时间升序排列结果，即按照日期先后顺序排列。\n\n这个查询的结果是一组数据，展示了“图书教育中心”在最近30天内每天的最高人数。"
    },
    {
        "query": "查一下信智楼的所有摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从多个关联的表格中获取与“信智楼”相关的所有摄像头的详细信息。以下是各子句的解析：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：这是选择需要查询的列，包括摄像头编号（id）、IP地址（ip）和安装位置（room_name）。\n\n2. `from s_camera as 摄像头表`：指定主表格s_camera，用于存储摄像头信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过摄像头表的外键（pid）与房间表（s_room）进行连接，以获取每个摄像头的具体安装位置。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：通过房间表的外键（pid）与楼栋表（s_building）进行连接，以获取每个摄像头的所在楼栋信息。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过楼栋表的外键（pid）与区域表（s_region）进行连接，以获取每个摄像头的所在校区信息。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：通过区域表的外键（pid）与单位表（s_organization）进行连接，以获取每个摄像头的所在单位信息。\n\n7. `where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，只返回与“信智楼”、“高新校区”和“中国科学技术大学”相关的摄像头信息。\n\n8. `order by 摄像头表.id asc limit 1000`：按照摄像头编号（id）从小到大排序，并限制返回结果的数量为1000条。"
    },
    {
        "query": "现在哪里人最多？",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num desc  limit 10;\n```\n这是一个SQL查询语句。它从名为`a_people_spread_day_building`的表格中获取数据，该表格可能包含建筑物名称（例如“教学楼”或“宿舍楼”等）、人数以及统计时间等信息。\n\n以下是该SQL语句的关键部分解释：\n\n1. `select 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数`: 这行代码用于选择要返回的数据列，即建筑物名称和人数。\n\n2. `from a_people_spread_day_building as 人数分布表`: 这行代码指定了数据来源的表格名称，并将其重命名为“人数分布表”以便于后续操作。\n\n3. `where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 这行代码用于设置筛选条件。在这里，只选择统计时间与当前时间相差不超过5小时的记录，并且要求区域名称为“高新校区”且组织名称为“中国科学技术大学”的记录。\n\n4. `order by 人数分布表.num desc limit 10`: 这行代码对结果进行排序并限制返回记录的数量。这里按照人数降序排列，即从最多人的建筑开始返回结果，然后仅返回前10个记录。"
    },
    {
        "query": "行政与师生服务中心总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算“行政与师生服务中心”在“中国科学技术大学”的“高新校区”内总共安装了多少个摄像头。\n\n以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数`count(*)`作为结果，并将其命名为\"摄像头数量\"。这将返回满足条件的摄像头的总数。\n\n2. `from s_camera as 摄像头表`: 从s_camera表（假设这是摄像头数据所在的表）开始查询。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将摄像头表与房间表通过`on`条件进行连接，其中摄像头表的`pid`字段值等于房间表的`id`字段值。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将房间表与楼栋表通过`on`条件进行连接，其中房间表的`pid`字段值等于楼栋表的`id`字段值。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将楼栋表与区域表通过`on`条件进行连接，其中楼栋表的`pid`字段值等于区域表的`id`字段值。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将区域表与单位表通过`on`条件进行连接，其中区域表的`pid`字段值等于单位表的`id`字段值。\n\n7. `where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求楼栋名称、区域名称和单位名称分别等于指定值。\n\n整个查询语句的意思是：从摄像头表出发，连接相关的房间表、楼栋表、区域表和单位表，并过滤出满足特定条件的摄像头数据（即位于“行政与师生服务中心”、“高新校区”和“中国科学技术大学”内的摄像头），然后计算这些摄像头的数量。"
    },
    {
        "query": "行政与师生服务中心摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算“行政与师生服务中心”的摄像头数量。以下是各部分解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数（count）来计算摄像头的总数，并将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：从名为“s_camera”的数据表中获取数据，这里将这个表简称为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过摄像头的pid字段（假设是表示摄像头所在房间的id）连接“s_room”数据表（简称“房间表”）。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：通过房间的pid字段连接“s_building”数据表（简称“楼栋表”）。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过楼栋的pid字段连接“s_region”数据表（简称“区域表”）。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：通过区域的pid字段连接“s_organization”数据表（简称“单位表”）。\n\n7. `where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即只有当楼栋名称为“行政与师生服务中心”、区域名称为“高新校区”且单位名称为“中国科学技术大学”时，才返回相关数据。\n\n整句意思是：从摄像头表、房间表、楼栋表、区域表和单位表这5个数据表，通过多表连接和筛选条件，查询出满足条件的摄像头数量。"
    },
    {
        "query": "现在哪里人最少？",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num asc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中获取一些特定数据。下面是各个部分的具体解释：\n\n1. `select 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数`：这部分是选择要返回的列。在这个例子中，我们要查看\"建筑名称\"和\"人数\"这两列。\n\n2. `from a_people_spread_day_building as 人数分布表`：这是指定要查询的数据库表名。这里表示我们要从名为\"a_people_spread_day_building\"的表中获取数据。\n\n3. `where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：这部分是查询条件。这里表示我们要查找在最近5小时内的数据（通过计算当前时间与\"stat_time\"之间的时差得到），并且区域名称为\"高新校区\"，组织名称为\"中国科学技术大学\"。\n\n4. `order by 人数分布表.num asc`：这是排序条件。这里表示我们要按照\"人数\"这一列的值从小到大进行排序。\n\n5. `limit 10`：这是限制结果集的数量。这里表示我们只返回前10条满足查询条件的记录。"
    },
    {
        "query": "当前有多少个房间里面有人？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'      and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一个SQL查询语句，用于计算某个区域内某单位的特定时间段内（例如过去10分钟内）有人在的房间数量。以下是各子句的解释：\n\n1. `select count(房间表.room_name) 有人的房间数量`: 返回满足条件的房间内人数量的统计结果。\n\n2. `from s_camera as 摄像头表`: 从s_camera表中读取数据，该表存储了摄像头的有关信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_camera和s_room两个表，基于摄像头的pid与房间的id相等。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_room和s_building两个表，基于房间的pid与楼栋的id相等。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_building和s_region两个表，基于楼栋的pid与区域的id相等。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_region和s_organization两个表，基于区域的pid与单位的id相等。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 根据条件筛选出位于高新校区的中国科学技术大学的摄像头的数据。\n\n8. `and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 选择在过去10分钟内有人经过的摄像头的数据。\n\n这个查询的结果是有人的房间数量，即在同一时间（比如现在）有摄像头的房间里的人数。"
    },
    {
        "query": "找出图书馆一个月内，每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于查找图书馆（假设名为“图书教育中心”）在一个月内每天的平均人数。以下是各个部分的具体解释：\n\n1. `SELECT`：选择需要从数据库中获取的列。在这个例子中，我们选择了两个列：`min(人数分布表.stat_time)` 和 `round(avg(人数分布表.num))`。\n\n2. `min(人数分布表.stat_time) as 统计时间`：获取人数分布表中日期（stat_time）的最小值，作为查询结果的统计时间。\n\n3. `round(avg(人数分布表.num)) as 平均人数`：计算每日人数的平均值。`round()` 函数用于对结果取整。\n\n4. `FROM`：指定查询的数据来源。在这个例子中，数据来源是 `a_people_spread_day_building` 这个表格，我们称之为 \"人数分布表\"。\n\n5. `WHERE`：设置查询的条件。这个条件包括：\n   - `building_name='图书教育中心'`：限制只查询“图书教育中心”的数据；\n   - `DATEDIFF(now(), 人数分布表.stat_time) < 30`：限制只查询过去30天的数据；\n   - `region_name='高新校区'`和`org_name='中国科学技术大学'`：进一步限制只查询特定地区和机构的资料。\n\n6. `group by`：按照 `人数分布表.stat_day` 对结果进行分组。这将确保每个查询结果对应一个特定的日期。\n\n7. `order by`：按照 `min(人数分布表.stat_time)` 对结果进行排序。这将确保结果按日期从小到大排列。\n\n8. `asc`：表示升序排序。如果需要降序排序，可以去掉这一部分或者改为 `desc`。"
    },
    {
        "query": "统计学生食堂一个月内每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这个SQL语句用于从数据表`a_people_spread_day_building`中统计学生食堂在一个月内（以当前日期为准）每天的最高人数。下面是各个子句的解析：\n\n1. `select min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数`：选择两个列，一个是统计时间（实际是就餐时间，为了便于理解，这里暂且翻译为统计时间）的最小值，另一个是餐厅人数的平均值。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源为`a_people_spread_day_building`表，并为其取名为“人数分布表”。\n\n3. `WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：设置查询条件，即要求学生食堂、高新校区和中国科学技术大学的就餐人数。其中DATEDIFF函数用于计算两个日期之间的差值，这里用来筛选出一个月内的数据。\n\n4. `group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc`：按照统计日（即就餐日）进行分组，并按照统计时间的最小值进行升序排序。"
    },
    {
        "query": "操场安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算在某个特定校园区域内，体育场的监控摄像头的数量。下面是对该查询语句的详细解析：\n\n1. `select count(*) as 摄像头数量`: 这行代码用于计算满足后续条件约束的摄像头的总数。`count(*)`是聚合函数，返回满足条件的数据行数；这里将其命名为`摄像头数量`以便于理解和后续处理。\n\n2. `from s_camera as 摄像头表`: 定义源表（数据来源），名为`s_camera`，并为其起别名（也称为\"投影\"或\"表达式\") 为 `摄像头表`，方便后续使用。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这是第一个联接操作（JOIN），将`摄像头表`和`房间表`进行联接，基于`摄像头表`中的`pid`等于`房间表`中的`id`这一条件。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这是第二个联接操作，将`房间表`和`楼栋表`进行联接，基于`房间表`中的`pid`等于`楼栋表`中的`id`这一条件。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这是第三个联接操作，将`楼栋表`和`区域表`进行联接，基于`楼栋表`中的`pid`等于`区域表`中的`id`这一条件。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这是第四个联接操作，将`区域表`和`单位表`进行联接，基于`区域表`中的`pid`等于`单位表`中的`id`这一条件。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这是过滤条件，只选择满足这些条件的数据行。即，要求`楼栋表`的`building_name`字段值为“体育场”，`区域表`的`region_name`字段值为“高新校区”，以及`单位表`的`org_name`字段值为“中国科学技术大学”的数据行。\n\n综合以上各部分，这个SQL查询语句的目标是找到满足特定条件的体育场的监控摄像头的数量。"
    },
    {
        "query": "现在有多少人在3号学科楼？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='3号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前在3号学科楼的的人数。下面是对这个SQL查询语句的详细解析：\n\n1. `select 人数分布表.num as 人数`：选择字段名为\"人数\"的数据。这里的\"num\"是源表中的人数字段，通过`as`关键字将这个字段重命名为\"人数\"。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表，并为其起个别名\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置时间条件，只选取过去五小时内的数据。这里使用`TIMESTAMPDIFF`函数计算统计时间与当前时间的差值（以小时为单位），然后与5进行比较。\n\n4. `and 人数分布表.building_name='3号学科楼'`：设置地点条件，只选取位于\"3号学科楼\"的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：设置地区条件，只选取位于\"高新校区\"的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置组织条件，只选取属于\"中国科学技术大学\"的数据。\n\n7. `order by 人数分布表.stat_time desc`：按照统计数据的时间降序排列结果。\n\n8. `limit 1`：限制返回结果的数量，只返回一条记录。"
    },
    {
        "query": "找出近期到达1号学生公寓的一些行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.end_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='1号学生公寓' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从多个关联表中检索和展示近期到达1号学生公寓的一些行人轨迹数据。下面是关于这个查询语句的详细解释：\n\n1. `select`: 选择需要返回的列。这里选择了以下列：\n   - `start_time`: 轨迹起始时间；\n   - `end_time`: 轨迹结束时间；\n   - `name`: 虚拟人名（可能是行人的标识符或编号）；\n   - `camera_id_list`: 经过的摄像头ID列表。\n\n2. `from`: 从哪个表中获取数据。这里使用了`a_people_trail`表（行人轨迹表）。\n\n3. `join`: 连接其他相关表。这里通过`on`条件将以下表格与`a_people_trail`表进行关联：\n   - `s_camera`: 摄像头表，通过`end_camera_id`字段关联；\n   - `s_room`: 房间表，通过`id`字段关联；\n   - `s_building`: 楼栋表，通过`id`字段关联；\n   - `s_region`: 区域表，通过`id`字段关联；\n   - `s_organization`: 单位表，通过`id`字段关联。\n\n4. `where`: 设定筛选条件。这里设置以下条件：\n   - `区域表.region_name`等于‘高新校区’；\n   - `单位表.org_name`等于‘中国科学技术大学’；\n   - `楼栋表.building_name`等于‘1号学生公寓’。\n\n5. `order by`: 根据指定列对数据进行排序。这里根据`start_time`降序排列，即先列出最近的数据。\n\n6. `limit`: 限制返回的数据量。这里限制返回的数据量为最近的10条。\n\n执行这个查询语句后，你将得到近期到达1号学生公寓的一些行人轨迹数据。"
    },
    {
        "query": "30天内发生了哪些异常行为？",
        "script": "```sql\nselect 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) <30 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 异常行为表.moment desc limit 1000;\n```\n这是一段SQL查询语句，用于从多个表中获取特定时间段内的异常行为数据。以下是各部分的主要功能：\n\n1. `select`: 选择需要查询的列。包括摄像头编号（camera_id）、异常发生地点（room_name）、异常发生时刻（moment）和异常类型（name）。\n\n2. `from`: 从数据库中的表获取数据。涉及到的表有：\n   - d_abnormal_behavior（异常行为表）：存储异常行为的数据。\n   - s_camera（摄像头表）：存储摄像头的数据。\n   - s_room（房间表）：存储房间的数据。\n   - s_building（楼栋表）：存储楼栋的数据。\n   - s_region（区域表）：存储区域的数据。\n   - s_organization（单位表）：存储单位的数据。\n   - t_abnormal_type（异常类型表）：存储异常类型的名称和数据。\n\n3. `where`: 设置查询条件，即最近30天内发生的异常行为。通过`DATEDIFF(now(), moment) < 30`计算当前时间和异常发生时间的时间差，确保结果在30天内。同时，限制查询范围为“高新校区”的中国科学技术大学。\n\n4. `order by`: 按异常发生时刻（moment）降序排列结果，即最近的异常行为排在最前面。\n\n5. `limit`: 限制返回结果的条数为1000，即只返回前1000条异常行为记录。"
    },
    {
        "query": "查看从学生食堂出发的行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的行人轨迹数据。下面是各个部分的具体解释：\n\n1. select：选择需要返回的字段。这里选择了四个字段：轨迹起始时间（start_time）、轨迹结束时间（end_time）、虚拟人名（name）和经过的摄像头ID列表（camera_id_list）。\n\n2. from：指定数据来源表。这里是a_people_trail表（行人轨迹表）。\n\n3. join：连接其他相关表，以便在查询结果中包含更多的信息。这里有五个连接表：s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。\n\n4. on：指定连接条件。例如，行人轨迹表与摄像头表的连接条件是：行人轨迹表的开始摄像头ID等于摄像头表的ID；摄像头表与房间表的连接条件是：摄像头表的PID等于房间表的ID；以此类推。\n\n5. where：设置查询条件。这里是限制查询结果的地点和单位。具体地说，只查询位于“高新校区”且属于“中国科学技术大学”的“学生食堂”的行人轨迹。\n\n6. order by：按照某个字段对查询结果进行排序。这里是按照行人轨迹的起始时间降序排列。\n\n7. limit：限制查询结果的条数。这里是限制返回最近十条轨迹数据。\n\n综上所述，这个SQL查询语句将返回最近十条从学生食堂出发的行人轨迹数据，包括轨迹的起始和结束时间、虚拟人名和经过的摄像头ID等信息。"
    },
    {
        "query": "给出图书教育中心的所有摄像头信息",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从数据库中获取图书教育中心的所有摄像头信息。以下是各个部分的具体解释：\n\n1. `select`: 开始一个SELECT语句，用于从数据库中选择数据。\n2. `摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 这部分定义了查询结果中的列名及其别名。\"摄像头表.id\"表示摄像头的ID，\"摄像头表.ip\"表示摄像头的IP地址，\"房间表.room_name\"表示摄像头所在房间的名称。\n3. `from s_camera as 摄像头表`: 这部分指定了摄像头信息表（s_camera）作为查询的基础表。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这部分通过ON条件（摄像头表的pid等于房间表的id）将摄像头表与房间表进行JOIN操作。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这部分通过ON条件（房间表的pid等于楼栋表的id）将房间表与楼栋表进行JOIN操作。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这部分通过ON条件（楼栋表的pid等于区域表的id）将楼栋表与区域表进行JOIN操作。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分通过ON条件（区域表的pid等于单位表的id）将区域表与单位表进行JOIN操作。\n8. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是WHERE子句，用于过滤符合条件的数据。这里筛选出位于“图书教育中心”、“高新校区”且属于“中国科学技术大学”的数据。\n9. `order by 摄像头表.id asc limit 1000`: 这部分是ORDER BY子句和LIMIT子句。按照摄像头表的id升序排列（asc表示升序，desc表示降序），并且只返回前1000条记录。\n\n这个查询语句会返回图书教育中心所有摄像头的详细信息，包括摄像头编号、IP地址和安装位置。"
    },
    {
        "query": "4号学生公寓安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个表中联合查询并统计4号学生公寓安装的监控数量。以下是各子句的含义：\n\n1. `select count(*) as 摄像头数量`: 从数据库中选取摄像头数量作为输出列；\n2. `from s_camera as 摄像头表`: 定义源数据表，表示摄像头信息；\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和房间表，其中摄像头的父级id（例如设备ID）等于房间表的id；\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表和楼栋表，其中房间表的父级id等于楼栋表的id；\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表和区域表，其中楼栋表的父级id等于区域表的id；\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表和单位表，其中区域表的父级id等于单位表的id；\n7. `where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 筛选条件，只返回满足特定条件的数据，即：要求楼栋名称为“4号学生公寓”、区域名称为“高新校区”且单位为“中国科学技术大学”的数据；\n8. `;`: SQL语句的结束符。"
    },
    {
        "query": "找出镜头中没有人的室内摄像头的编号",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中筛选出没有人的室内摄像头信息。下面是各部分解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`：选择要查询的列，包括摄像头的ID、安装位置（房间名）和所属大楼名称。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id`：从s_camera表（摄像头表）开始查询，通过摄像头与房间的关联字段（pid）连接s_room表（房间表）。\n\n3. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：接着，通过房间与大楼的关联字段（pid）连接s_building表（楼栋表）。\n\n4. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：然后，通过大楼与区域的关联字段（pid）连接s_region表（区域表）。\n\n5. `join s_organization as 单位表 on 区域表.pid=单位表.id`：最后，通过区域与单位的关联字段（pid）连接s_organization表（单位表）。\n\n6. `where 摄像头表.inhouse = 1 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：筛选条件，要求摄像头在室内（inhouse字段为1）且不在最近10分钟内有人使用过的摄像头列表中（即无人使用的摄像头）。\n\n7. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：进一步限制筛选条件，仅选择位于\"高新校区\"的中国科学技术大学的摄像头。\n\n8. `order by 摄像头表.id asc limit 1000`：按照摄像头ID升序排列，并限制返回结果的数量为1000条。"
    },
    {
        "query": "找出近期到达1号学生公寓的10条行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.end_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='1号学生公寓' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从多个表中检索数据。下面是每个子句的解释：\n\n1. `select`: 选择要检索的列。这里选择了`start_time`（轨迹起始时间）、`end_time`（轨迹结束时间）、`name`（虚拟人名）和`camera_id_list`（经过的摄像头Id）。\n\n2. `from`: 从哪个表中选择数据。这里是`a_people_trail`（行人轨迹表）。\n\n3. `join`: 联接其他表以获取更多信息。这里是`s_camera`（摄像头表）、`s_room`（房间表）、`s_building`（楼栋表）、`s_region`（区域表）和`s_organization`（单位表）。\n\n4. `where`: 设置筛选条件。这里是`区域表.region_name='高新校区'`和`单位表.org_name='中国科学技术大学'`以及`楼栋表.building_name='1号学生公寓'`，表示只选择这些条件的记录。\n\n5. `order by`: 对结果按照某个列进行排序。这里是`行人轨迹表.start_time`，表示按照轨迹起始时间降序排列。\n\n6. `limit`: 限制返回的结果数量。这里是`10`，表示只返回前10条记录。"
    },
    {
        "query": "给出1号学科楼的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于查询1号学科楼的摄像头数量。以下是各子句的详细解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数（count）作为查询结果，返回摄像头数量的记录；\n2. `from s_camera as 摄像头表`：定义摄像头数据所在的表（s_camera）；\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表与房间表进行连接，基于摄像头的项目ID（pid）等于房间的ID；\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将房间表与楼栋表进行连接，基于房间的项目ID等于楼栋的ID；\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将楼栋表与区域表进行连接，基于楼栋的项目ID等于区域的ID；\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将区域表与单位表进行连接，基于区域的项目ID等于单位的ID；\n7. `where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设定查询条件，要求楼栋名称是“1号学科楼”、区域名称为“高新校区”以及单位名称是“中国科学技术大学”。"
    },
    {
        "query": "2号学科楼安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算\"2号学科楼\"监控摄像头的数量。以下是各个子句的解释：\n\n1. select: 选择需要返回的列；\n2. count(*): 计算满足条件的记录总数；\n3. as 摄像头数量: 为返回的结果指定别名“摄像头数量”；\n4. from: 指定数据来源表；\n5. s_camera as 摄像头表: 将s_camera表称为“摄像头表”；\n6. join: 连接其他相关表，获取所需信息；\n7. on: 定义连接条件；\n8. where: 设置筛选条件；\n9. building_name='2号学科楼': 筛选出楼栋名为“2号学科楼”的记录；\n10. and: 表示多个筛选条件同时成立；\n11. region_name='高新校区': 筛选出所在区域为“高新校区”的记录；\n12. org_name='中国科学技术大学': 筛选出所属单位为“中国科学技术大学”的记录。"
    },
    {
        "query": "各类异常事件数量",
        "script": "```sql\nselect 异常类型表.name as 异常行为类型, count(*) as 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by 异常类型表.name asc;\n```\n这是一段SQL查询语句，用于计算特定时间范围内（过去七天）在特定地点（高新校区的中国科学技术大学）发生的各类异常事件的数量。\n\n1. `d_abnormal_behavior`: 异常行为表，存储了所有异常行为的记录，包括发生时间、摄像头ID等信息；\n2. `s_camera`: 摄像头表，存储了摄像头的详细信息，包括ID和所在房间的ID；\n3. `s_room`: 房间表，存储了房间的详细信息，包括ID和所在楼栋的ID；\n4. `s_building`: 楼栋表，存储了楼栋的详细信息，包括ID和所在区域的ID；\n5. `s_region`: 区域表，存储了区域的详细信息，包括ID和单位ID；\n6. `s_organization`: 单位表，存储了单位的详细信息，包括名称和所在区域的ID；\n7. `t_abnormal_type`: 异常类型表，存储了各类异常事件的类型信息，包括ID和名称；\n\n查询结果按照异常类型表的名称进行分组，并计算每个类型的异常事件数量。最后将结果按照名称升序排列。"
    },
    {
        "query": "找出学生食堂一个月内，每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于查找学生食堂在一个月内每天最少的人数。具体解释如下：\n\n1. `SELECT`: 选择需要获取的列和表达式。这里选择的是统计时间的最小值（即每天的日期）和对应的最小人数。\n\n2. `MIN()`: 返回分组后的最小值。这里用在`stat_time`上，表示每天中的最小时间（也就是最早的时间）。\n\n3. `round()`: 四舍五入函数，这里用在`num`上，将结果进行四舍五入。\n\n4. `FROM`: 从指定的表中选择数据。这里是`a_people_spread_day_building`表，表示人员分布表。\n\n5. `WHERE`: 过滤条件。这里是限制建筑名为“学生食堂”，距离现在的时间小于30天，所在地区为“高新校区”，组织名称为“中国科学技术大学”。\n\n6. `GROUP BY`: 对结果进行分组。这里是根据`stat_day`进行分组，表示按天分组。\n\n7. `ORDER BY`: 排序规则。这里是按照`min(人数分布表.stat_time)`升序排列，表示按照每天的最小时间升序排列。\n\n8. `ASC`: 升序排列。"
    },
    {
        "query": "给出信智楼的所有摄像头信息",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从数据库中获取信智楼的所有摄像头信息。以下是各个部分的解释：\n\n1. `select`: 选择要查询的列。这里选择了摄像头表的`id`、`ip`以及房间表的`room_name`。\n2. `摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 对查询结果进行命名，以便在结果集中更容易理解每个字段的含义。\n3. `from`: 指定查询的表。这里涉及了四个表：摄像头表（s_camera）、房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）。\n4. `join`: 连接多个表。这里是通过摄像头表的`pid`字段与房间表的`id`字段相等连接，以此类推。\n5. `where`: 设置查询条件。这里是限制结果为信智楼的摄像头，同时还需要满足所在区域的名称和单位的名称。\n6. `order by`: 对查询结果按照摄像头表的`id`字段升序排列。\n7. `limit`: 限制查询结果的条数。这里设置为1000条。"
    },
    {
        "query": "2号学科楼安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个 SQL（结构化查询语言）查询语句，用于从多个表格中获取并计算特定条件下的摄像头数量。以下是各子句的解析：\n\n1. `select count(*) as 摄像头数量`：选择函数 `count` 对结果集里的所有行计数，并将结果命名为 \"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`：指定数据源为名为 \"s_camera\" 的表，并在查询结果中将其称为 \"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过 \"摄像头表\" 的字段 \"pid\" 和 \"房间表\" 的字段 \"id\" 建立连接。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：通过 \"房间表\" 的字段 \"pid\" 和 \"楼栋表\" 的字段 \"id\" 建立连接。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过 \"楼栋表\" 的字段 \"pid\" 和 \"区域表\" 的字段 \"id\" 建立连接。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：通过 \"区域表\" 的字段 \"pid\" 和 \"单位表\" 的字段 \"id\" 建立连接。\n\n7. `where 楼栋表.building_name='2号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设定过滤条件，即仅返回满足这三个条件的记录。\n\n这个查询语句的结果是计算出 \"2号学科楼\" 中安装的摄像头数量，前提是该楼属于 \"高新校区\" 且属于 \"中国科学技术大学\"。"
    },
    {
        "query": "最近识别到的人员中，不同下衣风格的人数是多少？",
        "script": "```sql\nselect substring(人员表.lower,6) as 下衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.lower  order by 人员表.lower asc;\n```\n这是一个SQL查询语句，用于计算不同下衣风格的人数。下面是对这个查询语句的解释：\n\n1. `select substring(人员表.lower,6) as 下衣风格, count(*) as 人数`: 选择子字符串作为\"下衣风格\"列，并对每一类下衣风格统计人数。这里的`substring(人员表.lower,6)`是从`人员表`的`lower`字段的第6个字符开始截取的字符串。\n\n2. `from d_people as 人员表`: 从`d_people`这张表（即“人员表”）中获取数据。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 联接`s_camera`这张表（即“摄像头表”），连接条件是`人员表`的`camera_id`等于`摄像头表`的`id`。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接`s_room`这张表（即“房间表”），连接条件是`摄像头表`的`pid`等于`房间表`的`id`。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接`s_building`这张表（即“楼栋表”），连接条件是`房间表`的`pid`等于`楼栋表`的`id`。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接`s_region`这张表（即“区域表”），连接条件是`楼栋表`的`pid`等于`区域表`的`id`。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接`s_organization`这张表（即“单位表”），连接条件是`区域表`的`pid`等于`单位表`的`id`。\n\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求时间差（当前时间与人员记录时间的差值）小于5分钟，并且所在区域名称为“高新校区”，所在单位名称为“中国科学技术大学”。\n\n9. `group by 人员表.lower  order by 人员表.lower asc`: 对结果进行分组，按照\"下衣风格\"进行分组，然后按照下衣风格的字母顺序排序。"
    },
    {
        "query": "教工食堂安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于统计教工食堂（位于高新校区的中国科学技术大学）安装的监控设备数量。以下是各部分解释：\n\n1. select count(*) as 摄像头数量: 选择摄像头的数量作为查询结果，使用`count(*)`函数计算表中记录数。\n\n2. from s_camera as 摄像头表: 指定监控设备的表名，这里假设为`s_camera`，并将其简称为“摄像头表”。\n\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接摄像头表和房间表，条件是摄像头表的`pid`字段值等于房间表的`id`字段值。\n\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接房间表和楼栋表，条件是房间表的`pid`字段值等于楼栋表的`id`字段值。\n\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接楼栋表和区域表，条件是楼栋表的`pid`字段值等于区域表的`id`字段值。\n\n6. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接区域表和单位表，条件是区域表的`pid`字段值等于单位表的`id`字段值。\n\n7. where 楼栋表.building_name='教工食堂': 设置筛选条件，即要求楼栋表的`building_name`字段值为\"教工食堂\"。\n\n8. and 区域表.region_name='高新校区': 添加筛选条件，要求区域表的`region_name`字段值为\"高新校区\"。\n\n9. and 单位表.org_name='中国科学技术大学': 添加筛选条件，要求单位表的`org_name`字段值为\"中国科学技术大学\"。"
    },
    {
        "query": "8号学生公寓安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算“8号学生公寓”安装了多少个监控摄像头。下面是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 这是查询的目标，即返回摄像头的总数。`count(*)`是聚合函数，用来统计满足条件的记录数量。\n\n2. `from s_camera as 摄像头表`: 这表示摄像头数据所在的表格（或数据库中的表）名为`s_camera`，我们为了方便阅读，给它起了个别名叫做`摄像头表`。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这表示摄像头和房间之间存在关联，摄像头的`pid`（项目ID）等于房间的`id`（标识符）。通过这种方式，我们可以将摄像头与它们所对应的房间关联起来。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 同样，房间与楼栋也存在关联，房间的`pid`等于楼栋的`id`。这样，我们就可以知道每个摄像头对应的是哪个楼栋了。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 楼栋与区域也存在关联，楼栋的`pid`等于区域的`id`。这样，我们就可以知道每个摄像头位于哪个校区了。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 最后，区域与单位也存在关联，区域的`pid`等于单位的`id`。这样，我们就可以知道每个摄像头位于哪个学校了。\n\n7. `where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这是查询的条件，只有当楼栋名称为“8号学生公寓”、区域名称为“高新校区”且单位名称（可能是学校的名称）为“中国科学技术大学”时，才满足查询条件。\n\n综上，这个SQL语句的目的是查询并计算8号学生公寓安装了多少个监控摄像头。"
    },
    {
        "query": "教工食堂总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算教工食堂（假设是某个学校中的教工食堂）的摄像头数量。具体解释如下：\n\n1. `select count(*) as 摄像头数量`：这是查询的目标，即计算摄像头的总数。使用`count(*)`函数统计所有摄像头的数量。\n\n2. `from s_camera as 摄像头表`：定义了数据来源，这里是摄像头信息的数据表，名为`s_camera`。这里将其简称为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是一个连接操作，将摄像头表和房间表进行连接。这里的`on 摄像头表.pid=房间表.id`表示当摄像头表的`pid`字段与房间表的`id`字段相等时，两个表中的行将进行连接。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是另一个连接操作，将房间表和楼栋表进行连接。同样，`on 房间表.pid=楼栋表.id`表示当房间表的`pid`字段与楼栋表的`id`字段相等时，两个表中的行将进行连接。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是又一个连接操作，将楼栋表和区域表进行连接。同理，`on 楼栋表.pid=区域表.id`表示当楼栋表的`pid`字段与区域表的`id`字段相等时，两个表中的行将进行连接。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是最后一个连接操作，将区域表和单位表进行连接。同样，`on 区域表.pid=单位表.id`表示当区域表的`pid`字段与单位表的`id`字段相等时，两个表中的行将进行连接。\n\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这部分是查询条件，只返回满足以下条件的数据：楼栋名称等于\"教工食堂\"，所在区域名称为\"高新校区\"，所属单位为\"中国科学技术大学\"。\n\n通过这个查询，可以得到教工食堂的摄像头数量。"
    },
    {
        "query": "图书馆安装了多少个摄像头",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于查询图书馆安装了摄像头的数量。以下是各子句和表结构的解释：\n\n1. `SELECT count(*) as 摄像头数量`: 选择计数函数count(*)来计算满足条件的摄像头数量，并将结果命名为摄像头数量。\n\n2. `FROM s_camera as 摄像头表`: 从s_camera表中获取数据，将其命名为摄像头表。\n\n3. `JOIN s_room as 房间表 ON 摄像头表.pid = 房间表.id`: 联接s_room表，基于摄像头表的主键（此处假设为主键字段名为pid）与房间表的主键相等进行联接。\n\n4. `JOIN s_building as 楼栋表 ON 房间表.pid = 楼栋表.id`: 联接s_building表，基于房间表的主键与楼栋表的主键相等进行联接。\n\n5. `JOIN s_region as 区域表 ON 楼栋表.pid = 区域表.id`: 联接s_region表，基于楼栋表的主键与区域表的主键相等进行联接。\n\n6. `JOIN s_organization as 单位表 ON 区域表.pid = 单位表.id`: 联接s_organization表，基于区域表的主键与单位表的主键相等进行联接。\n\n7. `WHERE 楼栋表.building_name = '图书教育中心' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 设置查询条件，即要求楼栋名称、区域名称和单位名称分别等于指定的值（“图书教育中心”、“高新校区”和“中国科学技术大学”）。\n\n这段SQL语句的目的是计算满足指定条件的图书馆内摄像头的数量，即位于“图书教育中心”的“高新校区”的“中国科学技术大学”的摄像头数量。"
    },
    {
        "query": "给出5号学生公寓的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='5号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n该SQL语句用于查询5号学生公寓的摄像头数量。首先通过JOIN将s_camera（摄像头）、s_room（房间）、s_building（楼栋）、s_region（区域）和s_organization（单位）五个表连接在一起。接着通过WHERE条件筛选出“5号学生公寓”、“高新校区”以及“中国科学技术大学”的相关信息。最后通过COUNT函数计算满足条件的摄像头的数量。以下是各部分详细解释：\n\n1. `select count(*) as 摄像头数量`：选择计数(*)作为摄像头数量，并为其取别名为\"摄像头数量\"。\n2. `from s_camera as 摄像头表`：指定从s_camera表中获取数据，并为其取别名\"摄像头表\"。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将s_camera与s_room通过摄像头表的pid（房间ID）等于房间表的id进行连接。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将s_room与s_building通过房间表的pid（楼栋ID）等于楼栋表的id进行连接。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将s_building与s_region通过楼栋表的pid（区域ID）等于区域表的id进行连接。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将s_region与s_organization通过区域表的pid（单位ID）等于单位表的id进行连接。\n7. `where 楼栋表.building_name='5号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置WHERE条件，筛选出符合条件的数据，即“5号学生公寓”、“高新校区”以及“中国科学技术大学”的相关信息。\n8. `;`：表示SQL语句结束。"
    },
    {
        "query": "近期识别到多少挎单肩包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段SQL查询语句，用于统计在特定时间和地区内，携带单肩包的人数。下面是对该SQL语句的详细解读：\n\n1. `select count(*) as 背双肩包的人数`: 选择计数（*）作为结果集的一列，并将这列命名为“背双肩包的人数”。\n\n2. `from d_people as 人员表`: 从名为“d_people”的表（这里称为“人员表”以便理解）开始查询。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 将“s_camera”表（这里称为“摄像头表”）与“d_people”表连接起来，连接条件是“人员表”中的“camera_id”等于“摄像头表”中的“id”。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将“s_room”表（这里称为“房间表”）与“摄像头表”表连接起来，连接条件是“摄像头表”中的“pid”等于“房间表”中的“id”。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将“s_building”表（这里称为“楼栋表”）与“房间表”表连接起来，连接条件是“房间表”中的“pid”等于“楼栋表”中的“id”。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将“s_region”表（这里称为“区域表”）与“楼栋表”表连接起来，连接条件是“楼栋表”中的“pid”等于“区域表”中的“id”。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将“s_organization”表（这里称为“单位表”）与“区域表”表连接起来，连接条件是“区域表”中的“pid”等于“单位表”中的“id”。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`: 将“t_bag”表（这里称为“背包维表”）与“人员表”表连接起来，连接条件是“人员表”中的“bag”等于“背包维表”中的“id”。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 设置查询条件，要求“人员表”中的“moment”（时刻字段）距离现在的时间小于5分钟。\n\n10. `and 背包维表.name='单肩包'`: 设置查询条件，要求“背包维表”中的“name”（包名字段）等于“单肩包”。\n\n11. `and 区域表.region_name='高新校区'`: 设置查询条件，要求“区域表”中的“region_name”（地区名字段）等于“高新校区”。\n\n12. `and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求“单位表”中的“org_name”（单位名称字段）等于“中国科学技术大学”。"
    },
    {
        "query": "从学生食堂出发的行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一段SQL查询语句，用于从数据库中获取某个特定地点（学生食堂）的行人轨迹数据。以下是各部分解释：\n\n1. `select`: SQL命令，用于从表中选取特定的列。\n2. `start_time as 轨迹起始时间, end_time as 轨迹结束时间`: 这两个列是行人轨迹表的起始时间和结束时间。\n3. `name as 虚拟人名`: 这个列是行人轨迹表的名称。\n4. `camera_id_list as 经过的摄像头Id`: 这个列是行人轨迹表的摄像头ID列表，即该虚拟人在每个时间点所在的摄像头ID。\n5. `from a_people_trail as 行人轨迹表`: 从名为\"a_people_trail\"的表中获取数据，这个表记录了行人的轨迹信息。\n6. `join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id`: 将摄像头表与行人轨迹表进行连接，连接条件是行人轨迹表的起始摄像头ID等于摄像头表的ID。\n7. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将房间表与摄像头表进行连接，连接条件是摄像头表的父ID（PID）等于房间表的ID。\n8. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将楼栋表与房间表进行连接，连接条件是房间表的父ID（PID）等于楼栋表的ID。\n9. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将区域表与楼栋表进行连接，连接条件是楼栋表的父ID（PID）等于区域表的ID。\n10. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将单位表与区域表进行连接，连接条件是区域表的父ID（PID）等于单位表的ID。\n11. `where`: 过滤条件，只返回满足这些条件的记录。\n12. `区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂'`: 过滤条件，要求区域名称为“高新校区”，单位名称为中国科学技术大学，楼栋名称为“学生食堂”。\n13. `order by 行人轨迹表.start_time desc`: 对轨迹数据进行排序，按照开始时间的降序排列。\n14. `limit 10`: 限制返回的数据条数，这里只返回前10条轨迹数据。"
    },
    {
        "query": "给出2号学生公寓的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一条SQL查询语句，用于计算2号学生公寓的摄像头数量。下面是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数count(*)作为摄像头数量的结果，并命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`: 指定数据来源是摄像头表（s_camera），并为其命名缩写为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头表和房间表的pid字段相等联接这两个表，并分别给它们取名为\"房间表\"和\"摄像头表\"。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间表和楼栋表的pid字段相等联接这两个表，并分别给它们取名为\"楼栋表\"和\"房间表\"。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋表和区域表的pid字段相等联接这两个表，并分别给它们取名为\"区域表\"和\"楼栋表\"。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域表和单位表的pid字段相等联接这两个表，并分别给它们取名为\"单位表\"和\"区域表\"。\n\n7. `where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设定查询条件，只返回满足这三个条件的数据，即楼栋名称是\"2号学生公寓\"，区域名称是\"高新校区\"，单位名称是\"中国科学技术大学\"的数据。"
    },
    {
        "query": "图书教育中心现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='图书教育中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据表中检索关于\"图书教育中心\"的最近的数据。具体参数和逻辑如下：\n\n1. `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：这个子句计算当前时间和统计时间（stat_time字段）之间的小时差，要求该差值小于5小时，即最近5小时内获取的数据。\n2. `AND 人数分布表.building_name='图书教育中心'`：过滤出建筑名为“图书教育中心”的数据。\n3. `AND 人数分布表.region_name='高新校区'`：过滤出地区名为“高新校区”的数据。\n4. `AND 人数分布表.org_name='中国科学技术大学'`：过滤出组织名为“中国科学技术大学”的数据。\n5. `ORDER BY 人数分布表.stat_time DESC`：按照统计数据的时间进行降序排序，最新的数据排在最前面。\n6. `LIMIT 1`：限制返回的结果只有一条，即获取最新的一条数据。\n\n最后，通过这个查询语句，可以获取到图书教育中心最近5小时内的人数信息。"
    },
    {
        "query": "1号学生公寓安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算“1号学生公寓”安装了几个监控摄像头。下面是各子句的解释：\n\n1. select count(*) as 摄像头数量: 选择计数函数count()作为结果，返回的是摄像头的数量。\n\n2. from s_camera as 摄像头表, s_room as 房间表, s_building as 楼栋表, s_region as 区域表, s_organization as 单位表: 这5个表格是摄像头、房间、楼栋、区域和单位的信息库。\n\n3. on 摄像头表.pid=房间表.id, 房间表.pid=楼栋表.id, 楼栋表.pid=区域表.id, 区域表.pid=单位表.id: 这四句话连接了5个表格，使得我们可以从不同的角度查询数据。其中，PID表示主键，用于唯一标识每个实体。\n\n4. where 楼栋表.building_name='1号学生公寓', 区域表.region_name='高新校区', 单位表.org_name='中国科学技术大学': 这些条件限定了查询的范围，只返回满足这三个条件的记录。\n\n综上所述，这个SQL语句会返回“1号学生公寓”安装了几个监控摄像头的数量。"
    },
    {
        "query": "哪栋大楼安装的摄像头最多？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取摄像头最多的那栋楼的信息。具体解释如下：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量`: 这部分是选择要查询的列，即“楼宇名称”和每个楼宇的摄像头数量。\n\n2. `from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id`: 从s_camera（摄像头表）和s_room（房间表）两个表中，以摄像头与房间的关系为基础进行连接操作。\n\n3. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 接着，基于房间与楼栋的关系，将s_building（楼栋表）也加入进来。\n\n4. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 然后，基于楼栋与所在区域的关系，再将s_region（区域表）添加到查询结果中。\n\n5. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 最后，基于区域与所属单位的关系，将s_organization（单位表）也纳入查询范围。\n\n6. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这是查询条件，限定只查找属于“高新校区”且所属单位为“中国科学技术大学”的摄像头数据。\n\n7. `group by 楼栋表.building_name`: 这行代码的意思是，对每栋楼房的摄像头数量进行统计。\n\n8. `order by count(*) desc`: 根据摄像头数量的多少对结果进行排序。\n\n9. `limit 1`: 限制返回的结果集只有一条记录，即摄像头最多的那栋楼的信息。"
    },
    {
        "query": "信智楼5分钟内识别到多少手中持物的行人？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询语句，用于计算在“信智楼”（假设是一个地点名称）的某个摄像头的监控画面里，过去5分钟之内（即现在时间减去5分钟的差值），被识别出手持物品的行人数量。\n\n下面是各表之间的关系以及查询条件的解释：\n\n1. `d_people`（人员表）：存储每个人在不同摄像头下的行为信息；\n2. `s_camera`（摄像头表）：存储每个摄像头的设备信息；\n3. `s_room`（房间表）：存储每个摄像头的具体位置信息；\n4. `s_building`（楼栋表）：存储每个房间所在的建筑信息；\n5. `s_region`（区域表）：存储每个楼栋所在的大区信息；\n6. `s_organization`（单位表）：存储每个大区所属的单位组织信息；\n7. `t_hold_object`（持物维表）：存储每种物品类型的信息；\n\n以下是具体的查询条件：\n\n- TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5：判断人员表的记录是否在5分钟前产生，筛选出过去5分钟内的数据；\n- 持物维表.name='持物'：过滤出手持物品的行人，这里假设‘持物’是手持物品的标志；\n- 区域表.region_name='高新校区'：限制查询的区域为'高新校区'；\n- 单位表.org_name='中国科学技术大学'：限制查询的单位为'中国科学技术大学'；\n- 楼栋表.building_name='信智楼'：限制查询的楼栋为'信智楼'。"
    },
    {
        "query": "查一下图教中心的所有摄像头的基本信息",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从数据库中获取特定条件下的所有摄像头基本信息。以下是各个部分的解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 这是查询的列，分别表示摄像头的编号、IP地址和安装位置。\n\n2. `from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分定义了查询的表结构和连接方式。其中，`s_camera`（摄像头表）是主表，`s_room`（房间表）、`s_building`（楼栋表）、`s_region`（区域表）和`s_organization`（单位表）是关联表。通过摄像头表和其他表的连接，我们可以得到每个摄像头的详细信息。\n\n3. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是查询条件，只返回满足这些条件的摄像头数据，即位于“图书教育中心”、“高新校区”且属于“中国科学技术大学”的摄像头。\n\n4. `order by 摄像头表.id asc limit 1000`: 这部分是排序和限制返回结果。按照摄像头编号升序排列（从小到大），并限制返回的最大记录数为1000条。"
    },
    {
        "query": "统计图教中心每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这个SQL查询语句的目的是计算并展示\"图书教育中心\"在近30天内每日的平均人数。以下是各个部分的解释：\n\n1. `a_people_spread_day_building` 是数据表的名字，其中存储了各建筑的人数信息。\n2. `SELECT min(人数分布表.stat_time) as 统计时间` 这句代码选择的是最近一次的人数统计时间作为每天的统计时间。\n3. `round(avg(人数分布表.num)) as 平均人数` 这句代码计算的是每日的平均人数。\n4. `WHERE 人数分布表.building_name='图书教育中心'` 这句代码限制查询结果只包含\"图书教育中心\"的数据。\n5. `AND DATEDIFF(now(), 人数分布表.stat_time) < 30` 这句代码确保查询结果是近30天的数据。\n6. `AND 人数分布表.region_name='高新校区'` 和 `AND 人数分布表.org_name='中国科学技术大学'` 这两个条件分别限制了查询结果的校区和学校名称。\n7. `GROUP BY 人数分布表.stat_day` 这句代码按照日期进行分组，以便计算每日的平均人数。\n8. `ORDER BY min(人数分布表.stat_time) asc` 这句代码按照统计时间的先后顺序（即按天排序）返回查询结果。"
    },
    {
        "query": "信智楼有多少人戴眼镜？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于统计“信智楼”有多少人戴眼镜。下面是对该SQL的解析：\n\n1. `select count(*) as 戴眼镜人数`: 选择计数函数`count(*)`作为结果集，并将返回值命名为`戴眼镜人数`。\n2. `from d_people as 人员表`: 指定数据表名为`d_people`，并为其起别名`人员表`，便于后续查询操作。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 这部分代码表示将`s_camera`表（摄像头表）与`d_people`表（人员表）通过`camera_id`字段进行关联。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这部分代码表示将`s_room`表（房间表）与`s_camera`表（摄像头表）通过`pid`字段进行关联。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这部分代码表示将`s_building`表（楼栋表）与`s_room`表（房间表）通过`pid`字段进行关联。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这部分代码表示将`s_region`表（区域表）与`s_building`表（楼栋表）通过`pid`字段进行关联。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分代码表示将`s_organization`表（单位表）与`s_region`表（区域表）通过`pid`字段进行关联。\n8. `join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id`: 这部分代码表示将`t_glasses`表（眼镜维表）与`d_people`表（人员表）通过`glasses`字段进行关联。\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='戴眼镜'`: 设置筛选条件，要求当前时间与`人员表.moment`时间差小于5分钟且眼镜维表的名称是“戴眼镜”。\n10. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 进一步设定筛选条件，限制查询结果为在“高新校区”、“中国科学技术大学”的“信智楼”内的情况。"
    },
    {
        "query": "信智楼近期识别到多少拿手提包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段复杂的SQL查询语句，用于计算某个时间范围内在指定区域内、某个楼宇中拿着手提包行人的数量。以下是各部分的具体解释：\n\n1. `select count(*) as 背双肩包的人数`：选择计数所有满足条件的行人，并将结果命名为\"背双肩包的人数\"。\n\n2. `from d_people as 人员表`：从`d_people`表中获取数据，该表存储行人的信息。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：联接`s_camera`表，该表存储摄像头的ID信息。联接条件是行人在摄像头的视野内。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：联接`s_room`表，该表存储房间的ID信息。联接条件是摄像头所在的房间ID。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：联接`s_building`表，该表存储楼栋的ID信息。联接条件是房间所属的楼栋ID。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：联接`s_region`表，该表存储区域的ID信息。联接条件是楼栋所属的区域ID。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：联接`s_organization`表，该表存储单位的ID信息。联接条件是区域所属的单位ID。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`：联接`t_bag`表，该表存储背包的类型信息。联接条件是行人所携带的背包类型。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：限制条件为行人被识别的时间与当前时间的差值小于5分钟。\n\n10. `and 背包维表.name='手提包'`：限制条件为行人携带的背包类型为\"手提包\"。\n\n11. `and 区域表.region_name='高新校区'`：限制条件为行人所在区域的名称为\"高新校区\"。\n\n12. `and 单位表.org_name='中国科学技术大学'`：限制条件为行人所在单位的名称为\"中国科学技术大学\"。\n\n13. `and 楼栋表.building_name='信智楼'`：限制条件为行人所在楼栋的名称为\"信智楼\"。"
    },
    {
        "query": "教工食堂安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个表中联合查询并统计教工食堂的监控摄像头数量。具体解释如下：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数`count(*)`作为查询结果，并将结果命名为\"摄像头数量\"。\n2. `from s_camera as 摄像头表`: 指定查询的主表，即摄像头信息表（s_camera）。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接摄像头表和房间表，连接条件是摄像头表的`pid`字段等于房间表的`id`字段。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接房间表和楼栋表，连接条件是房间表的`pid`字段等于楼栋表的`id`字段。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接楼栋表和区域表，连接条件是楼栋表的`pid`字段等于区域表的`id`字段。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接区域表和单位表，连接条件是区域表的`pid`字段等于单位表的`id`字段。\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求楼栋表的楼名是“教工食堂”、区域表的区域名是“高新校区”和单位表的单位名称是“中国科学技术大学”。\n8. 最后，这个查询将返回满足上述条件的摄像头数量。"
    },
    {
        "query": "6号学生公寓摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言查询代码，用于计算“6号学生公寓”的摄像头数量。\n\n以下是各子句的解释：\n\n1. select count(*) as 摄像头数量: 从摄像头表中选取摄像头的数量。\n2. from s_camera as 摄像头表: 摄像头表的别名。\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接房间表和摄像头表，连接条件是摄像头表的主键（例如 id）等于房间表的外键（例如 pid）。\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接楼栋表和房间表，连接条件是房间表的主键（例如 id）等于楼栋表的外键（例如 pid）。\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接区域表和楼栋表，连接条件是楼栋表的主键（例如 id）等于区域表的外键（例如 pid）。\n6. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接单位表和区域表，连接条件是区域表的主键（例如 id）等于单位表的外键（例如 pid）。\n7. where 楼栋表.building_name='6号学生公寓': 设置查询条件，即要求楼栋表中的建筑名称等于 '6号学生公寓'。\n8. and 区域表.region_name='高新校区': 设置查询条件，即要求区域表中的区域名称等于 '高新校区'。\n9. and 单位表.org_name='中国科学技术大学': 设置查询条件，即要求单位表中的单位名称等于 '中国科学技术大学'。\n\n这个查询将返回满足所有条件的摄像头数量。"
    },
    {
        "query": "食堂每天平均有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一段SQL查询语句，用于查询某个特定食堂（在这里是“学生食堂”）在过去30天内每天的平均人数。\n\n具体解析如下：\n\n1. `select min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数`：选择统计时间和平均人数作为输出列；\n2. `from a_people_spread_day_building as 人数分布表`：指定查询的数据源，这是一个名为\"a_people_spread_day_building\"的表，简称为“人数分布表”；\n3. `WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：设置查询条件，即：建筑名称必须是“学生食堂”，统计时间与现在的时间差不能超过30天，地区名称为“高新校区”，机构名称为“中国科学技术大学”；\n4. `group by 人数分布表.stat_day`：按照统计日期对数据进行分组；\n5. `order by min(人数分布表.stat_time) asc`：按照最小的统计时间进行升序排列。\n\n最后，这个查询将返回一个结果集，其中包含每个查询日期的平均人数和相应的统计时间。"
    },
    {
        "query": "最近5分钟内识别到的人员中，不同下衣风格的人数是多少？",
        "script": "```sql\nselect substring(人员表.lower,6) as 下衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.lower  order by 人员表.lower asc;\n```\n这是一个SQL查询语句，用于在最近的5分钟内识别的人员中，统计不同下衣风格的人数。以下是各部分解释：\n\n1. select substring(人员表.lower,6) as 下衣风格: 这句是从`人员表`的`lower`字段中提取从第6个字符开始的子字符串作为\"下衣风格\"。\n\n2. count(*) as 人数: 计算每个下衣风格的总数。\n\n3. from d_people as 人员表: `d_people`是人员表的别名。\n\n4. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 将摄像头表与人员表连接，依据条件是`人员表.camera_id`等于`摄像头表.id`。\n\n5. join s_room as 房间表 on 摄像头表.pid=房间表.id: 将房间表与摄像头表连接，依据条件是`摄像头表.pid`等于`房间表.id`。\n\n6. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 将楼栋表与房间表连接，依据条件是`房间表.pid`等于`楼栋表.id`。\n\n7. join s_region as 区域表 on 楼栋表.pid=区域表.id: 将区域表与楼栋表连接，依据条件是`楼栋表.pid`等于`区域表.id`。\n\n8. join s_organization as 单位表 on 区域表.pid=单位表.id: 将单位表与区域表连接，依据条件是`区域表.pid`等于`单位表.id`。\n\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学': 设置查询条件，限制只返回最近5分钟内识别到的人、位于高新校区且属于中国科学技术大学的数据。\n\n10. group by 人员表.lower  order by 人员表.lower asc: 对结果按照`人员表.lower`进行分组并排序。"
    },
    {
        "query": "1号学生公寓安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于查询1号学生公寓（'1号学生公寓'）的摄像头数量。这个查询涉及到多个表之间的关联和聚合计算。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择摄像头的计数作为结果，并命名为\"摄像头数量\"。\n2. `from s_camera as 摄像头表`: 从名为\"s_camera\"的表中获取数据，这里将其简称为\"摄像头表\"。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将名为\"s_room\"的表（简称为\"房间表\"）与\"摄像头表\"进行连接，连接条件是摄像头表的pid等于房间表的id。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将名为\"s_building\"的表（简称为\"楼栋表\"）与\"房间表\"进行连接，连接条件是房间表的pid等于楼栋表的id。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将名为\"s_region\"的表（简称为\"区域表\"）与\"楼栋表\"进行连接，连接条件是楼栋表的pid等于区域表的id。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将名为\"s_organization\"的表（简称为\"单位表\"）与\"区域表\"进行连接，连接条件是区域表的pid等于单位表的id。\n7. `where 楼栋表.building_name='1号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 根据给定的条件筛选出符合条件的记录，即要求楼栋名称为“1号学生公寓”，区域名称为“高新校区”，单位名称为“中国科学技术大学”。\n\n通过以上步骤，查询结果会返回满足条件的摄像头数量。"
    },
    {
        "query": "食堂摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算某个特定条件下摄像头的数量。下面是对这段SQL的详细解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数（count）来计算满足后续条件的摄像头总数，并将结果命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`：指定数据源为名为s_camera的数据表，并为其起一个别名“摄像头表”以便在后续的连接操作中方便使用。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将名为s_room的数据表与摄像头表进行内连接（INNER JOIN），连接条件是摄像头表中的pid字段等于房间表的id字段。同时，将s_room表命名为“房间表”。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将名为s_building的数据表与房间表进行内连接，连接条件是房间表的pid字段等于楼栋表的id字段。同时，将s_building表命名为“楼栋表”。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将名为s_region的数据表与楼栋表进行内连接，连接条件是楼栋表的pid字段等于区域表的id字段。同时，将s_region表命名为“区域表”。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将名为s_organization的数据表与区域表进行内连接，连接条件是区域表的pid字段等于单位表的id字段。同时，将s_organization表命名为“单位表”。\n\n7. `where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，要求楼栋表中的建筑名称为“学生食堂”，区域表中的地区名称为“高新校区”，单位表中的单位名称是“中国科学技术大学”。只有满足这三个条件的摄像头才参与最终的计数。"
    },
    {
        "query": "给出教师食堂安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询某个学校食堂的摄像头数量。以下是各部分解释：\n\n1. `select count(*) as 摄像头数量`：计算摄像头的总数，并命名为 \"摄像头数量\"。\n2. `from s_camera as 摄像头表`：从名为 \"s_camera\" 的摄像头表中获取数据。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接名为 \"s_room\" 的房间表，条件是摄像头表的 pid（可能是表示摄像头所属区域的字段）等于房间表的 id。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接名为 \"s_building\" 的楼栋表，条件是房间表的 pid（可能是表示房间所属楼栋的字段）等于楼栋表的 id。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接名为 \"s_region\" 的区域表，条件是楼栋表的 pid（可能是表示楼栋所属区域的字段）等于区域表的 id。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接名为 \"s_organization\" 的单位表，条件是区域表的 pid（可能是表示区域所属单位的字段）等于单位表的 id。\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，要求楼栋表的建筑名称是 \"教工食堂\"，区域表的区域名称是 \"高新校区\"，单位表的单位名称是 \"中国科学技术大学\"。"
    },
    {
        "query": "师生服务中心总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个关联表中统计师生服务中心的摄像头数量。以下是各个部分的具体解释：\n\n1. `select count(*) as 摄像头数量`：这是查询的目标，即计算摄像头的总数。这里使用COUNT函数，并为其指定一个别名\"摄像头数量\"，以便在结果集中更容易识别。\n\n2. `from s_camera as 摄像头表`：这是查询的主表，表示摄像头信息的数据库表。在这里将其简称为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是第一个连接条件，将摄像头表与房间表进行连接。连接的依据是摄像头表的pid字段等于房间表的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是第二个连接条件，将房间表与楼栋表进行连接。连接的依据是房间表的pid字段等于楼栋表的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是第三个连接条件，将楼栋表与区域表进行连接。连接的依据是楼栋表的pid字段等于区域表的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是第四个连接条件，将区域表与单位表进行连接。连接的依据是区域表的pid字段等于单位表的id字段。\n\n7. `where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是查询的过滤条件，只返回满足这些条件的数据。在这里，要求楼栋表的建筑名称必须是“行政与师生服务中心”，区域表的区域名称必须是“高新校区”，单位表的单位名称必须是“中国科学技术大学”。"
    },
    {
        "query": "找出图书教育中心一个月内，每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一段SQL查询语句，用于查找图书教育中心在一个月内每天的最高人数。以下是各部分的解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数`: 这部分是查询的列，将返回每天的最小统计时间和这天的最高人数。\n\n2. `from a_people_spread_day_building as 人数分布表`: 这是数据表名称，假设为“a_people_spread_day_building”，并为其取个别名“人数分布表”以便于后续使用。\n\n3. `WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 这些条件用于筛选数据，只考虑名为“图书教育中心”的建筑，并且距离现在的时间（即统计数据的时间）不超过30天，同时所在地区为“高新校区”且所属单位为“中国科学技术大学”的数据。\n\n4. `group by 人数分布表.stat_day`: 按照每一天进行分组，以便计算每一天的最高人数。\n\n5. `order by min(人数分布表.stat_time) asc`: 对结果按照统计时间的最小值（即每天的开始时间）进行升序排序。"
    },
    {
        "query": "行政与师生服务中心的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政与师生服务中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中检索特定建筑（这里是“行政与师生服务中心”）在特定时间范围内（现在是过去5小时以内）的人数信息。\n\n以下是各子句的解释：\n\n1. `select 人数分布表.num as 人数`：选择字段\"num\"作为查询结果中的列名\"人数\"。\n2. `from a_people_spread_day_building as 人数分布表`：从名为\"a_people_spread_day_building\"的表中选取数据，并为其指定别名\"人数分布表\"。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置一个时间过滤条件，即从当前时间（now()函数返回）减去人员统计时间（stat_time字段）的差值小于5小时。\n4. `and 人数分布表.building_name='行政与师生服务中心'`：设置另一个过滤条件，即所选建筑名称必须为\"行政与师生服务中心\"。\n5. `and 人数分布表.region_name='高新校区'`：设置另一个过滤条件，即所选地区名称为\"高新校区\"。\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置另一个过滤条件，即所选组织名称为\"中国科学技术大学\"。\n7. `order by 人数分布表.stat_time desc`：按照人员统计时间降序排列查询结果。\n8. `limit 1`：限制查询结果为一条记录。"
    },
    {
        "query": "操场安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个关联表中获取操场上安装的摄像头数量。以下是各部分的具体说明：\n\n1. `select count(*) as 摄像头数量`：这是查询的目标，即计算摄像头的总数。使用`count()`函数对*（所有行）进行计数，并将结果命名为`摄像头数量`。\n\n2. `from s_camera as 摄像头表`：这是查询的主表，表示摄像头信息的数据库表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是第一个连接条件，将摄像头表与房间表连接在一起。其中，`摄像头表.pid`和`房间表.id`是这两个表中的关联字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是第二个连接条件，将房间表与楼栋表连接在一起。同样，`房间表.pid`和`楼栋表.id`是这两个表中的关联字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是第三个连接条件，将楼栋表与区域表连接在一起。同样，`楼栋表.pid`和`区域表.id`是这两个表中的关联字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是第四个连接条件，将区域表与单位表连接在一起。同样，`区域表.pid`和`单位表.id`是这两个表中的关联字段。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是查询的条件，只选择满足这些条件的摄像头信息。具体地说，需要找到位于“体育场”、“高新校区”和中国科学技术大学”的摄像头的数量。\n\n通过这个查询，可以计算出在指定位置安装的摄像头数量。"
    },
    {
        "query": "统计图书教育中心每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这个SQL语句用于从数据库中检索并计算“图书教育中心”（building_name）在“高新校区”（region_name）、“中国科学技术大学”（org_name）的最近30天内每天的最低人数（num）和相应的统计时间（stat_time）。\n\n具体解析如下：\n\n1. `SELECT MIN(人数分布表.stat_time) AS 统计时间`: 这行代码用于获取最近的30天内，“图书教育中心”每天的最早统计时间。\n\n2. `ROUND(MIN(人数分布表.num)) AS 平均人数`: 这行代码用于获取最近的30天内，“图书教育中心”每天的最小人数。由于使用了ROUND函数，实际返回的是保留小数点后一位的近似值。\n\n3. `FROM a_people_spread_day_building AS 人数分布表`: 这是数据表名，用于存放人员分布信息的数据表。\n\n4. `WHERE 人数分布表.building_name = '图书教育中心' AND DATEDIFF(now(), 人数分布表.stat_time) < 30 AND 人数分布表.region_name = '高新校区' AND 人数分布表.org_name = '中国科学技术大学'`: 这部分是WHERE子句，用于筛选出满足特定条件的记录。即只选取“图书教育中心”、“高新校区”、“中国科学技术大学”这三个条件同时满足的记录。其中，DATEDIFF(now(), 人数分布表.stat_time) < 30表示只选取最近30天内的数据。\n\n5. `GROUP BY 人数分布表.stat_day ORDER BY MIN(人数分布表.stat_time) ASC`: 这部分是GROUP BY和ORDER BY子句，用于对结果按照日期进行分组，并依据最早的统计时间（即最小时间）进行升序排序。"
    },
    {
        "query": "6号学生公寓安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于查询6号学生公寓（假设是数据库中的一个数据项）安装摄像头的数量。以下是各子句的解读：\n\n1. `select count(*) as 摄像头数量`：选择计数函数`count`计算满足条件的摄像头数量，并命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`：从s_camera表中获取数据，这里将其简称为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将s_room表（假设该表中存储了每个房间的信息）与摄像头表进行连接，连接条件是两个表的id字段相等。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将s_building表（假设该表中存储了每栋建筑的信息）与房间表进行连接，连接条件是两个表的id字段相等。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将s_region表（假设该表中存储了每个区域的信息）与楼栋表进行连接，连接条件是两个表的id字段相等。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将s_organization表（假设该表中存储了每个单位的信息）与区域表进行连接，连接条件是两个表的id字段相等。\n\n7. `where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即要求被查询的建筑名称、区域名称和单位名称必须分别等于\"6号学生公寓\"、\"高新校区\"和\"中国科学技术大学\"。\n\n这个查询结果会返回6号学生公寓安装的摄像头数量。"
    },
    {
        "query": "未背包的人数",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一条复杂的SQL查询语句，它用于计算满足特定条件的\"未背包\"人数。下面是对这条语句的详细解释：\n\n1. `SELECT count(*) as 背双肩包的人数`: 这部分是查询的目标，即计算满足条件的\"未背包\"人数。使用`count(*)`函数统计满足条件的记录数。\n\n2. `FROM d_people as 人员表`: 从`d_people`表开始查询，并将此表命名为\"人员表\"，方便后续连接操作。\n\n3. `JOIN s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 将`s_camera`表（摄像头表）与`d_people`表（人员表）通过`camera_id`字段连接起来，表示一个摄像头对应多个人员。\n\n4. `JOIN s_room as 房间表 on 摄像头表.pid=房间表.id`: 将`s_room`表（房间表）与`s_camera`表（摄像头表）通过`pid`字段连接起来，表示一个房间可能有多个摄像头。\n\n5. `JOIN s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将`s_building`表（楼栋表）与`s_room`表（房间表）通过`pid`字段连接起来，表示一栋楼房包含多个房间。\n\n6. `JOIN s_region as 区域表 on 楼栋表.pid=区域表.id`: 将`s_region`表（区域表）与`s_building`表（楼栋表）通过`pid`字段连接起来，表示一个区域包含多栋楼房。\n\n7. `JOIN s_organization as 单位表 on 区域表.pid=单位表.id`: 将`s_organization`表（单位表）与`s_region`表（区域表）通过`pid`字段连接起来，表示一个单位包含多个区域。\n\n8. `JOIN t_bag as 背包维表 on 人员表.bag=背包维表.id`: 将`t_bag`表（背包维表）与`d_people`表（人员表）通过`bag`字段连接起来，表示一个人的背包类型。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 AND 背包维表.name='未背包' AND 区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学'`: 这是查询的条件，表示只查询在\"高新校区\"和\"中国科学技术大学\"的范围内，并且距离现在时间小于5分钟，且背包类型为\"未背包\"的人员数量。\n\n综上所述，这个SQL查询语句的目的是计算在\"高新校区\"和\"中国科学技术大学\"的范围内，距离现在时间小于5分钟，且未背包的人员数量。"
    },
    {
        "query": "给出6号学生公寓的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算6号学生公寓摄像头的数量。以下是各部分解释：\n\n1. `select count(*) as 摄像头数量`：选择函数count()的结果作为输出列“摄像头数量”，count(*)会返回满足条件的行数。\n\n2. `from s_camera as 摄像头表`：指定查询的数据来源是s_camera表，并为其取别名“摄像头表”，以便在后续的连接中使用。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，连接条件是摄像头表的主键（假设为pid）等于房间表的外键（假设为id）。并为房间表取别名“房间表”。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，连接条件是房间表的主键（假设为pid）等于楼栋表的外键（假设为id）。并为楼栋表取别名“楼栋表”。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，连接条件是楼栋表的主键（假设为pid）等于区域表的外键（假设为id）。并为区域表取别名“区域表”。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，连接条件是区域表的主键（假设为pid）等于单位表的外键（假设为id）。并为单位表取别名“单位表”。\n\n7. `where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，要求楼栋表的名称是“6号学生公寓”，区域表的名称是“高新校区”，单位表的名称是“中国科学技术大学”。\n\n通过这个查询语句，我们可以得到6号学生公寓的摄像头数量。"
    },
    {
        "query": "2号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询和计算“2号学生公寓”的摄像头数量。以下是各子句的解释：\n\n1. `SELECT count(*) as 摄像头数量`: 这部分是 SELECT 语句的一部分，用于选择并计算满足条件的摄像头数量（* 是全部摄像头的意思）。\n\n2. `FROM s_camera as 摄像头表`: 这是 FROM 子句，指定了摄像头数据所在的表（s_camera）及其别名（摄像头表），以便在后续子句中方便地引用该表。\n\n3. `JOIN s_room as 房间表 ON 摄像头表.pid = 房间表.id`: 这部分是 JOIN 子句，表示摄像头表与房间表之间的关联关系（通过 PID 和 ID 的值进行匹配），并将房间表的数据整合到结果集中。\n\n4. `JOIN s_building as 楼栋表 ON 房间表.pid = 楼栋表.id`: 同样，这部分也是 JOIN 子句，将摄像头表、房间表与楼栋表关联起来，并整合楼栋表的数据。\n\n5. `JOIN s_region as 区域表 ON 楼栋表.pid = 区域表.id`: 继续 JOIN 子句，连接摄像头表、房间表、楼栋表与区域表。\n\n6. `JOIN s_organization as 单位表 ON 区域表.pid = 单位表.id`: 最后一个 JOIN 子句，将摄像头表、房间表、楼栋表、区域表和单位表关联起来。\n\n7. `WHERE 楼栋表.building_name = '2号学生公寓' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 这是 WHERE 子句，用于筛选符合条件的摄像头记录。这里是找出位于“2号学生公寓”、“高新校区”且属于“中国科学技术大学”的所有摄像头。\n\n综上所述，这个 SQL 语句的目的是找出位于“2号学生公寓”、“高新校区”且属于“中国科学技术大学”的所有摄像头的数量。"
    },
    {
        "query": "信智楼最近识别到的人员中，不同下衣风格的人数是多少？",
        "script": "```sql\nselect substring(人员表.lower,6) as 下衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.lower  order by 人员表.lower asc;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。以下是各部分的解释：\n\n1. `select substring(人员表.lower,6) as 下衣风格, count(*) as 人数`: 选择子句，表示要返回的列。这里选择的是`下衣风格`和`人数`。其中，`substring(人员表.lower,6)`是截取`lower`字段的第六个字符开始的后面的部分（即下衣风格的描述），`count(*)`是对每个不同的`下衣风格`计算出现次数（即人数）。\n\n2. `from d_people as 人员表`: 指定数据来源，这里是`d_people`表，简称为`人员表`。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接条件，表示`人员表`与`摄像头表`通过`camera_id`相等进行连接。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接条件，表示`摄像头表`与`房间表`通过`pid`相等进行连接。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接条件，表示`房间表`与`楼栋表`通过`pid`相等进行连接。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接条件，表示`楼栋表`与`区域表`通过`pid`相等进行连接。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接条件，表示`区域表`与`单位表`通过`pid`相等进行连接。\n\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 条件过滤，表示只选择满足以下条件的数据：当前时间与记录时间的时间差小于5分钟的记录、所在区域为“高新校区”、所在单位名称为“中国科学技术大学”、所在楼栋名称为“信智楼”。\n\n9. `group by 人员表.lower  order by 人员表.lower asc;`: 对结果进行分组和排序。`group by 人员表.lower`表示按不同的`下衣风格`对数据进行分组，`order by 人员表.lower asc;`表示按`下衣风格`的字母顺序对结果进行升序排列。"
    },
    {
        "query": "不同朝向分别有多少人？",
        "script": "```sql\nselect 朝向维表.name as 朝向, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 朝向维表.name  order by 朝向维表.name asc;\n```\n这是一个SQL查询语句，用于统计不同朝向的人数。以下是各个部分的解释：\n\n1. `select 朝向维表.name as 朝向, count(*) as 人数`：选择结果中包含“朝向”和对应的人数。\n\n2. `from d_people as 人员表`：数据来源是人员表（d_people）。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接摄像头表（s_camera），依据条件是人员表的camera_id等于摄像头表的id。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表（s_room），依据条件是摄像头表的pid等于房间表的id。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表（s_building），依据条件是房间表的pid等于楼栋表的id。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表（s_region），依据条件是楼栋表的pid等于区域表的id。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表（s_organization），依据条件是区域表的pid等于单位表的id。\n\n8. `join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id`：连接朝向维表（t_orientation），依据条件是人员表的orientation等于朝向维表的id。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置筛选条件，包括距离当前时间5分钟以内、区域名称为“高新校区”和单位名称为“中国科学技术大学”。\n\n10. `group by 朝向维表.name`：按照朝向维表的名称进行分组，计算每种类别的人数。\n\n11. `order by 朝向维表.name asc`：按照朝向维表的名称进行升序排列。"
    },
    {
        "query": "给出信智楼安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算信智楼（假设是某个建筑物）上安装的摄像头数量。下面是各子句的解释：\n\n1. select count(*) as 摄像头数量: 选择计数函数COUNT，计算符合条件的摄像头的数量，并将结果命名为“摄像头数量”。\n2. from s_camera as 摄像头表: 从名为\"s_camera\"的数据表中获取数据，将其简称为“摄像头表”。\n3. join s_room as 房间表: 将\"s_room\"数据表与\"摄像头表\"进行连接，根据两个表的\"pid\"字段相等。将其简称为“房间表”。\n4. join s_building as 楼栋表: 将\"s_building\"数据表与\"房间表\"进行连接，根据两个表的\"pid\"字段相等。将其简称为“楼栋表”。\n5. join s_region as 区域表: 将\"s_region\"数据表与\"楼栋表\"进行连接，根据两个表的\"pid\"字段相等。将其简称为“区域表”。\n6. join s_organization as 单位表: 将\"s_organization\"数据表与\"区域表\"进行连接，根据两个表的\"pid\"字段相等。将其简称为“单位表”。\n7. where 楼栋表.building_name='信智楼': 根据\"楼栋表\"中的\"building_name\"字段等于\"信智楼\"设置条件过滤。\n8. and 区域表.region_name='高新校区': 根据\"区域表\"中的\"region_name\"字段等于\"高新校区\"设置条件过滤。\n9. and 单位表.org_name='中国科学技术大学': 根据\"单位表\"中的\"org_name\"字段等于\"中国科学技术大学\"设置条件过滤。"
    },
    {
        "query": "信智楼有多少人不戴眼镜？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='未戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于统计“信智楼”有多少人未戴眼镜（即眼镜维表中名字为“未戴眼镜”的人）。以下是各子句的解释：\n\n1. `SELECT count(*) AS 戴眼镜人数`：选择所有满足条件的记录数作为结果字段名\"戴眼镜人数\"。\n\n2. `FROM d_people AS 人员表`：定义数据源是d_people表格，并将此表格命名为“人员表”以便后续使用。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`：连接s_camera表格（摄像头表）与d_people表格（人员表），条件是d_people表的camera_id等于s_camera表的id。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`：连接s_room表格（房间表）与s_camera表格（摄像头表），条件是s_camera表的pid等于s_room表的id。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`：连接s_building表格（楼栋表）与s_room表格（房间表），条件是s_room表的pid等于s_building表的id。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`：连接s_region表格（区域表）与s_building表格（楼栋表），条件是s_building表的pid等于s_region表的id。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`：连接s_organization表格（单位表）与s_region表格（区域表），条件是s_region表的pid等于s_organization表的id。\n\n8. `JOIN t_glasses AS 眼镜维表 ON 人员表.glasses = 眼镜维表.id`：连接t_glasses表格（眼镜维表）与d_people表格（人员表），条件是人员表的glasses等于眼镜维表的id。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 AND 眼镜维表.name = '未戴眼镜' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学' AND 楼栋表.building_name = '信智楼'`：限制查询的条件，包括时间差（当前时间与抓拍时间的分钟差小于5分钟）、眼镜状态（眼镜维表中的名字为“未戴眼镜”）、区域名称（高新校区）、单位名称（中国科学技术大学）和楼栋名称（信智楼）。"
    },
    {
        "query": "给出5号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='5号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n该SQL语句用于查询5号学生公寓安装的摄像头数量。首先从s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）这五个表中关联查询数据。通过on条件将这四个表与摄像头表关联起来。\n\n然后，在WHERE子句中设置筛选条件，即要求楼栋名称为\"5号学生公寓\"，区域名称为\"高新校区\"，单位名称为\"中国科学技术大学\"，从而确保查询结果仅包含符合这些条件的摄像头信息。\n\n最后，使用COUNT函数计算满足条件的摄像头的数量，并将结果命名为摄像头数量。"
    },
    {
        "query": "体育场安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询某个特定体育场（这里是高新校区的中国科学技术大学的体育场）的监控设备（摄像头）数量。以下是这段 SQL 语句的详细解释：\n\n1. `select count(*) as 摄像头数量`：这是 SQL 的 SELECT 语句，用于计算满足后续 WHERE 条件的摄像头数量。这里使用 COUNT 函数和星号 (*) 来统计所有摄像头的数量。\n\n2. `from s_camera as 摄像头表`：定义查询数据的来源，即摄像头信息表（s_camera），并为其取名为 \"摄像头表\" 以方便后续连接操作。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是一个 JOIN 子句，用于将摄像头表与房间表进行连接，连接条件是摄像头表的 pid（设备ID）等于房间表的 id（表的主键）。这样可以将摄像头与它们所在的房间关联起来。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是另一个 JOIN 子句，用于将摄像头表、房间表与楼栋表进行连接。连接条件同样是房间表的 pid（设备ID）等于楼栋表的 id（表的主键）。这样可以将摄像头所在的房间与楼栋关联起来。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是第三个 JOIN 子句，用于将摄像头表、房间表、楼栋表与区域表进行连接。连接条件是楼栋表的 pid（设备ID）等于区域表的 id（表的主键）。这样可以将摄像头所在的楼栋与区域关联起来。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是最后一个 JOIN 子句，用于将摄像头表、房间表、楼栋表、区域表与单位表进行连接。连接条件是区域表的 pid（设备ID）等于单位表的 id（表的主键）。这样可以将摄像头所在的区域与所属单位关联起来。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是一个 WHERE 子句，用于设置查询条件。只有当楼栋表的 building_name 为 \"体育场\"，区域表中的 region_name 为 \"高新校区\"，以及单位表中的 org_name 为 \"中国科学技术大学\" 时，才返回符合条件的摄像头数量。\n\n综合以上分析，这个 SQL 语句的目的是查询并计算位于 \"高新校区\" 的 \"中国科学技术大学\" 的体育场的监控设备（摄像头）的数量。"
    },
    {
        "query": "信智楼有多少行人背双肩包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询语句，用于计算在“信智楼”内，高新校区的中国科学技术大学的当前时间五分钟内的所有背着双肩包的行人数量。\n\n以下是各子句的详细说明：\n\n1. `select count(*) as 背双肩包的人数`：选择计数函数，返回满足条件的背双肩包的人数。\n\n2. `from d_people as 人员表`：定义数据源，这里是人员信息表。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：联接摄像头表，通过摄像头ID匹配人员信息。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：联接房间表，获取每个摄像头的房间信息。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：联接楼栋表，获取每个摄像头的楼栋信息。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：联接区域表，获取每个摄像头的区域信息。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：联接单位表，获取每个摄像头的单位名称信息。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`：联接背包维表，通过背包ID匹配人员携带的背包类型。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：限制条件，要求查询结果的时间差（人员表中的记录时间与当前时间）小于五分钟。\n\n10. `and 背包维表.name='背包'`：限制条件，要求查询结果的背包类型为“背包”。\n\n11. `and 区域表.region_name='高新校区'`：限制条件，要求查询结果的区域名称为“高新校区”。\n\n12. `and 单位表.org_name='中国科学技术大学'`：限制条件，要求查询结果的单位名称名称为“中国科学技术大学”。\n\n13. `and 楼栋表.building_name='信智楼'`：限制条件，要求查询结果的楼栋名称为“信智楼”。"
    },
    {
        "query": "给出1号学科楼安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算1号学科楼安装摄像头的数量。以下是各部分详解：\n\n1. `select count(*) as 摄像头数量`：选择函数count()作为查询结果，返回满足条件的摄像头总数。\n2. `from s_camera as 摄像头表`：指定摄像头数据所在的表（s_camera），并为其取名为“摄像头表”以便后续使用。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过摄像头表的pid字段与房间表的id字段进行关联，获取每个摄像头的所属房间信息。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：通过房间表的pid字段与楼栋表的id字段进行关联，获取每个摄像头的所属楼栋信息。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过楼栋表的pid字段与区域表的id字段进行关联，获取每个摄像头的所属校区/地区信息。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：通过区域表的pid字段与单位表的id字段进行关联，获取每个摄像头的所属学校/单位信息。\n7. `where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设定查询条件，仅返回属于1号学科楼、位于高新校区和中国科学技术大学的摄像头数量。"
    },
    {
        "query": "现在有多少人在1号学生公寓？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='1号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取“1号学生公寓”当前的人数信息。以下是各部分的具体解释：\n\n1. `select 人数分布表.num as 人数`：选择字段，这里选择了`num`字段并将其别名为`人数`，即查询的目标数据；\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表，这里是`a_people_spread_day_building`表，将其别名为`人数分布表`以便于后续查询操作；\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设定筛选条件，表示只返回过去5小时内的记录（根据当前时间计算）；\n4. `and 人数分布表.building_name='1号学生公寓'`：设置另一个筛选条件，只返回`building_name`字段值为‘1号学生公寓’的记录；\n5. `and 人数分布表.region_name='高新校区'`：同上，只返回`region_name`字段值为‘高新校区’的记录；\n6. `and 人数分布表.org_name='中国科学技术大学'`：同上，只返回`org_name`字段值为‘中国科学技术大学’的记录；\n7. `order by 人数分布表.stat_time desc`：按照`stat_time`字段的降序排列结果集，即最近的记录在最前面；\n8. `limit 1`：限制结果集只返回一条记录。\n\n综合以上，该SQL语句的目的是查询并返回“1号学生公寓”最近5小时内的、位于“高新校区”且属于“中国科学技术大学”的一条人数信息。"
    },
    {
        "query": "信智楼有多少人手里没拿东西？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于计算“信智楼”里当前没有手持物品的人数。以下是各子句的解释：\n\n1. `select count(*) as 手里拿东西的人数`：选择计数函数（count）作为返回的结果集，将计数值命名为“手里拿东西的人数”。\n\n2. `from d_people as 人员表`：指定数据表“d_people”为“人员表”，用于获取人员信息。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接数据表“s_camera”为“摄像头表”，连接条件是“人员表”的“camera_id”等于“摄像头表”的“id”字段。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接数据表“s_room”为“房间表”，连接条件是“摄像头表”的“pid”等于“房间表”的“id”字段。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接数据表“s_building”为“楼栋表”，连接条件是“房间表”的“pid”等于“楼栋表”的“id”字段。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接数据表“s_region”为“区域表”，连接条件是“楼栋表”的“pid”等于“区域表”的“id”字段。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接数据表“s_organization”为“单位表”，连接条件是“区域表”的“pid”等于“单位表”的“id”字段。\n\n8. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`：连接数据表“t_hold_object”为“持物维表”，连接条件是“人员表”的“hold_obj”等于“持物维表”的“id”字段。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：设置过滤条件，即“人员表”的“moment”（活动记录时间）与当前时间（now()）之差小于5分钟。\n\n10. `and 持物维表.name='未持物'`：设置过滤条件，即“持物维表”的“name”字段值为“未持物”。\n\n11. `and 区域表.region_name='高新校区'`：设置过滤条件，即“区域表”的“region_name”字段值为“高新校区”。\n\n12. `and 单位表.org_name='中国科学技术大学'`：设置过滤条件，即“单位表”的“org_name”字段值为“中国科学技术大学”。\n\n13. `and 楼栋表.building_name='信智楼'`：设置过滤条件，即“楼栋表”的“building_name”字段值为“信智楼”。"
    },
    {
        "query": "给出师生服务中心安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL语句是一个复杂的联表查询，用于查询满足特定条件的摄像头数量。以下是各子句的详细说明：\n\n1. `select count(*) as 摄像头数量`：这是查询的主语句，用于计算符合条件的摄像头的总数，并将结果命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`：指定摄像头数据的来源表，名为s_camera，并将其简称为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是一个连接操作，将摄像头表和房间表进行连接，连接条件是摄像头表的pid等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是另一个连接操作，将房间表和楼栋表进行连接，连接条件是房间表的pid等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是第三个连接操作，将楼栋表和区域表进行连接，连接条件是楼栋表的pid等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是第四个连接操作，将区域表和单位表进行连接，连接条件是区域表的pid等于单位表的id。\n\n7. `where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是查询的过滤条件，只有当楼栋表的建筑名称为“行政与师生服务中心”，区域表的区域名称为“高新校区”，单位表的机构名称为“中国科学技术大学”时，才会被计算在摄像头数量中。\n\n综合以上信息，这个SQL语句的目的是查询位于“行政与师生服务中心”建筑内、“高新校区”区域内、属于“中国科学技术大学”机构的摄像头数量。"
    },
    {
        "query": "8号学生公寓摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于查询8号学生公寓的摄像头数量。以下是各子句的含义：\n\n1. `select count(*) as 摄像头数量`：选择摄像头的计数（即数量）作为结果列的名称。\n2. `from s_camera as 摄像头表`：从名为s_camera的表（假设是摄像头数据存储表）开始查询。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接s_room表（假设是房间数据存储表），连接条件是摄像头表的pid（可能是表示摄像头所属的房间ID）与房间表的id相等。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接s_building表（假设是楼栋数据存储表），连接条件是房间表的pid与楼栋表的id相等。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接s_region表（假设是区域数据存储表），连接条件是楼栋表的pid与区域表的id相等。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接s_organization表（假设是单位数据存储表），连接条件是区域表的pid与单位表的id相等。\n7. `where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设定查询条件，只返回满足条件的数据，即8号学生公寓、高新校区和中国科学技术大学的摄像头数据。\n\n整段SQL语句的意义是：通过连接多个表，查询出所有位于8号学生公寓、高新校区和中国科学技术大学范围内的摄像头的数量。"
    },
    {
        "query": "哪些地方发生了异常行为？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 楼栋表.building_name  order by count(*) desc;\n```\n这个SQL查询语句的目的是为了找出特定地区（在这个例子中是高新校区）的特定单位（在这个例子是中国科学技术大学）中，过去一周内发生异常行为次数最多的楼宇及其异常行为数量。以下是各个部分的具体解释：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) 异常行为数量`：这是查询的主体，用于返回结果。`count(*)`是计算每个楼宇的异常行为数量。\n\n2. `from d_abnormal_behavior as 异常行为表`：这是数据源，包含所有的异常行为记录。\n\n3. `join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id`：这是连接条件，将异常行为表与摄像头表通过camera_id进行连接。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是连接条件，将摄像头表与房间表通过pid进行连接。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是连接条件，将房间表与楼栋表通过pid进行连接。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是连接条件，将楼栋表与区域表通过pid进行连接。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是连接条件，将区域表与单位表通过pid进行连接。\n\n8. `where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是查询条件，限制只返回过去一周内（以现在的时间为基准，使用DATEDIFF函数计算）在高新校区的中国科学技术大学的异常行为数据。\n\n9. `group by 楼栋表.building_name`：这是对结果进行分组，按照每个楼宇的名称进行分组。\n\n10. `order by count(*) desc`：这是排序方式，按照每个楼宇的异常行为数量进行降序排列，即数量越多的楼宇排在最前面。"
    },
    {
        "query": "信智楼的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='信智楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取信智楼的人数。以下是各部分解释：\n\n1. `select 人数分布表.num as 人数`：选择字段，即“人数分布表”中的“num”字段，并将其重命名为“人数”。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据表，即“a_people_spread_day_building”，并为其赋予一个别名“人数分布表”，以便在查询语句中使用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置时间条件，即统计时间与当前时间的小时差小于5小时。\n\n4. `and 人数分布表.building_name='信智楼'`：设置建筑名称条件，即“信智楼”。\n\n5. `and 人数分布表.region_name='高新校区'`：设置地区名称条件，即“高新校区”。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置机构名称条件，即“中国科学技术大学”。\n\n7. `order by 人数分布表.stat_time desc`：按统计时间降序排列结果。\n\n8. `limit 1`：限制返回结果的数量，即只返回一条记录。"
    },
    {
        "query": "7号学生公寓安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算“7号学生公寓”的监控摄像头数量。以下是各子句的解释：\n\n1. select count(*) as 摄像头数量: 选择摄像头的数量作为结果集的一列，并命名为“摄像头数量”。\n2. from s_camera as 摄像头表: 从名为s_camera的表中获取数据，这里将其简称为“摄像头表”。\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接s_camera和s_room两个表，连接条件是摄像头表的pid（可能是房间编号）等于房间表的id。\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接s_room和s_building两个表，连接条件是房间表的pid等于楼栋表的id。\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接s_building和s_region两个表，连接条件是楼栋表的pid等于区域表的id。\n6. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接s_region和s_organization两个表，连接条件是区域表的pid等于单位表的id。\n7. where 楼栋表.building_name='7号学生公寓': 设定筛选条件，只返回楼栋名称为“7号学生公寓”的记录。\n8. and 区域表.region_name='高新校区': 继续设定筛选条件，要求区域名称为“高新校区”。\n9. and 单位表.org_name='中国科学技术大学': 最后设定筛选条件，要求单位名称（可能是学校名称）为“中国科学技术大学”。"
    },
    {
        "query": "师生活动中心安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语句，用于查询满足特定条件的视频监控摄像头数量。下面是各子句的详细解释：\n\n1. `select count(*) as 摄像头数量`: 这部分是选择子句，用于返回符合条件的摄像头数量（作为 \"摄像头数量\" 列）。\n2. `from s_camera as 摄像头表`: 这是来源子句，表示数据来自 \"s_camera\" 表，我们称之为 \"摄像头表\"。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这部分是连接子句，用于将 \"摄像头表\" 和 \"房间表\" 连接在一起，基于 \"摄像头表\" 的 \"pid\" 字段等于 \"房间表\" 的 \"id\" 字段。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 同上，用于将 \"房间表\" 和 \"楼栋表\" 连接在一起，基于 \"房间表\" 的 \"pid\" 字段等于 \"楼栋表\" 的 \"id\" 字段。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 同上，用于将 \"楼栋表\" 和 \"区域表\" 连接在一起，基于 \"楼栋表\" 的 \"pid\" 字段等于 \"区域表\" 的 \"id\" 字段。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 同上，用于将 \"区域表\" 和 \"单位表\" 连接在一起，基于 \"区域表\" 的 \"pid\" 字段等于 \"单位表\" 的 \"id\" 字段。\n7. `where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这是条件子句，用于筛选出满足特定条件的摄像头数据：楼栋名称必须是 \"师生活动中心\"，所在地区必须是 \"高新校区\"，所属单位必须是 \"中国科学技术大学\"。\n\n综上所述，这段 SQL 语句的目的是计算位于 \"师生活动中心\"（位于 \"高新校区\" 的 \"中国科学技术大学\"）的监控设备数量。"
    },
    {
        "query": "3号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算\"3号学生公寓\"摄像头数量。以下是各子句的含义：\n\n1. `select count(*) as 摄像头数量`: 选择摄像头数量作为结果，使用COUNT函数计算摄像头的总数。\n2. `from s_camera as 摄像头表`: 从s_camera表中获取数据，将这个表称为\"摄像头表\"。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表，基于摄像头表和房间表的pid字段相等进行联接。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表，基于房间表和楼栋表的pid字段相等进行联接。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表，基于楼栋表和区域表的pid字段相等进行联接。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表，基于区域表和单位表的pid字段相等进行联接。\n7. `where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 过滤条件，只选择满足这些条件的数据，即：楼栋名为\"3号学生公寓\"、所在区域为\"高新校区\"且所属单位为\"中国科学技术大学\"的数据。\n\n通过以上查询，可以得出\"3号学生公寓\"的摄像头数量。"
    },
    {
        "query": "现在有多少人在食堂？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='学生食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于查询当前在某个特定食堂（例如“学生食堂”）的人数。以下是这个SQL查询的详细解释：\n\n1. `SELECT 人数分布表.num AS 人数`: 这部分是选择要返回的字段。在这个例子中，我们将“num”字段作为“人数”字段返回。\n\n2. `FROM a_people_spread_day_building AS 人数分布表`: 这部分是指定数据源。在这个例子中，我们从一个名为“a_people_spread_day_building”的表中获取数据。为了便于理解，我们将这个表重命名为“人数分布表”。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这部分是设置查询条件。在这个例子中，我们通过计算当前时间和“stat_time”之间的小时差来筛选数据。只有当这个小时差小于5时，即在过去5小时内收集的数据才会被包含在查询结果中。\n\n4. `AND 人数分布表.building_name='学生食堂' AND 人数分布表.region_name='高新校区' AND 人数分布表.org_name='中国科学技术大学'`: 这部分是设置进一步的查询条件。在这个例子中，我们只考虑那些位于“学生食堂”、“高新校区”和“中国科学技术大学”的数据。\n\n5. `ORDER BY 人数分布表.stat_time DESC LIMIT 1`: 这部分是设置查询结果的排序和限制。在这个例子中，我们将按“stat_time”降序排列查询结果（即最近的记录将排在最前面），并限制结果为一条记录。"
    },
    {
        "query": "找出信智楼一个月内，每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取信智楼一个月内每天的最小人数。以下是各部分的解释：\n\n1. SELECT: 选择需要返回的列和聚合函数结果。这里选择了最小日期（统计时间）和对应的最小人数（平均人数）。\n\n2. MIN: 是聚合函数，用于计算每组（按 stat_day 分组）的最小值。\n\n3. FROM: 从数据表（a_people_spread_day_building）中选择数据。\n\n4. WHERE: 对数据进行过滤，只选择与信智楼（building_name='信智楼'）、高新校区（region_name='高新校区'）和中国科学技术大学（org_name='中国科学技术大学'）相关的数据。同时，限制日期范围在一个月以内（DATEDIFF(now(), 人数分布表.stat_time) < 30）。\n\n5. GROUP BY: 将数据按照 stat_day 进行分组，以便对每个分组计算最小人数。\n\n6. ORDER BY: 对返回的数据按照统计时间的升序排列。\n\n7. ASC: 表示升序排序。\n\n这个查询的目的是找出信智楼一个月内每天的最低人数。"
    },
    {
        "query": "1号学生公寓人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='1号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取\"1号学生公寓\"在最近的5小时内的人数信息。具体解释如下：\n\n1. `select 人数分布表.num as 人数`: 从\"人数分布表\"中选择\"num\"字段，并将结果命名为\"人数\"。\n\n2. `from a_people_spread_day_building as 人数分布表`: 从名为\"a_people_spread_day_building\"的表中选择数据，并将其临时命名为\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 筛选出距离现在时间（now()函数返回当前时间）不超过5小时的记录。\n\n4. `and 人数分布表.building_name='1号学生公寓'`: 进一步筛选出\"building_name\"（即宿舍楼名称）等于\"1号学生公寓\"的记录。\n\n5. `and 人数分布表.region_name='高新校区'`: 继续筛选出\"region_name\"（即所在地区名称）等于\"高新校区\"的记录。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 最后筛选出\"org_name\"（即所属单位名称）等于\"中国科学技术大学\"的记录。\n\n7. `order by 人数分布表.stat_time desc`: 对筛选出的数据进行排序，按照\"stat_time\"（即统计时间）降序排列。\n\n8. `limit 1`: 最后只取满足条件的最新的一条记录。"
    },
    {
        "query": "当前空着的房间有多少？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'      and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一段SQL查询语句，用于计算某个特定区域内某个单位（如学校）的某个校区（如高新校区）内当前无人使用的房间数量。以下是各子句的解释：\n\n1. `select count(房间表.room_name) 有人的房间数量`: 返回满足条件的房间总数。这里使用了`count()`函数来计算房间的数量。\n\n2. `from s_camera as 摄像头表`: 从`s_camera`表开始查询，这个表存储了摄像头的数据。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将`s_room`表（存储房间信息）和`s_camera`表通过摄像头的主键（pid）与房间的主键（id）相连接。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将`s_building`表（存储楼栋信息）和`s_room`表通过楼栋的主键（pid）与房间的主键（id）相连接。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将`s_region`表（存储区域信息）和`s_building`表通过区域的主键（pid）与楼栋的主键（id）相连接。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将`s_organization`表（存储单位名称）和`s_region`表通过单位的主键（pid）与区域的主键（id）相连接。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设定查询条件，限制结果为高新校区的中国科学技术大学的房间。\n\n8. `and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 限制查询结果只包括过去10分钟内没有人员的房间。这是通过在摄像头表中排除在过去10分钟内有人出现过的摄像头ID来实现的。"
    },
    {
        "query": "运动场安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个表中联合查询并统计体育场的监控摄像头数量。下面是对这个查询语句的详细解析：\n\n1. `select count(*) as 摄像头数量`: 这句是查询的目标，即计算摄像头的数量。`count(*)` 是聚合函数，用于计算满足条件的记录总数。\n\n2. `from s_camera as 摄像头表`: 从s_camera表（这里假设摄像头数据存储在s_camera表）开始查询，并将该表简称为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 使用内连接方式将s_room表（这里假设摄像头与房间关联的数据存储在s_room表）与摄像头表连接在一起，连接条件是摄像头表的pid等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 同样使用内连接方式将s_building表（这里假设楼栋信息存储在s_building表）与房间表连接在一起，连接条件是房间表的pid等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 继续使用内连接方式将s_region表（这里假设区域信息存储在s_region表）与楼栋表连接在一起，连接条件是楼栋表的pid等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 最后使用内连接方式将s_organization表（这里假设单位信息存储在s_organization表）与区域表连接在一起，连接条件是区域表的pid等于单位表的id。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求楼栋名称为“体育场”，区域名称为“高新校区”，单位名称为中国科学技术大学。只有满足这些条件的摄像头才会被统计到结果中。"
    },
    {
        "query": "有多少行人挎单肩包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于计算在某个特定时间和区域内，有多少个行人在使用单肩包。下面是各子句的解释：\n\n1. `select count(*) as 背双肩包的人数`: 选择计数(*)作为结果列的别名，表示统计使用单肩包的行人数量。\n\n2. `from d_people as 人员表`: 从\"d_people\"表（别名\"人员表\"）开始查询。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 通过\"人员表\"中的\"camera_id\"和\"摄像头表\"中的\"id\"进行连接。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过\"摄像头表\"中的\"pid\"和\"房间表\"中的\"id\"进行连接。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过\"房间表\"中的\"pid\"和\"楼栋表\"中的\"id\"进行连接。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过\"楼栋表\"中的\"pid\"和\"区域表\"中的\"id\"进行连接。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过\"区域表\"中的\"pid\"和\"单位表\"中的\"id\"进行连接。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`: 通过\"人员表\"中的\"bag\"和\"背包维表\"中的\"id\"进行连接。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 限制条件，只考虑最近5分钟内的数据。\n\n10. `and 背包维表.name='单肩包'`: 限制条件，只考虑使用单肩包的行人。\n\n11. `and 区域表.region_name='高新校区'`: 限制条件，只考虑位于\"高新校区\"的数据。\n\n12. `and 单位表.org_name='中国科学技术大学'`: 限制条件，只考虑属于\"中国科学技术大学\"的数据。"
    },
    {
        "query": "室外的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='高新校区室外' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。以下是各部分解释：\n\n1. select 人数分布表.num as 人数: 选择字段\"num\"并将其重命名为\"人数\"；\n2. from a_people_spread_day_building as 人数分布表: 从名为\"a_people_spread_day_building\"的表中选择数据，并将该表临时重命名为\"人数分布表\"以便于后续的操作；\n3. WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5: 筛选出统计时间（即\"stat_time\"）距离现在（通过函数now()获得）小于5小时的记录；\n4. and 人数分布表.building_name='高新校区室外': 限制建筑物名称为“高新校区室外”；\n5. and 人数分布表.region_name='高新校区': 限制地区名称为“高新校区”；\n6. and 人数分布表.org_name='中国科学技术大学': 限制机构名称为“中国科学技术大学”；\n7. order by 人数分布表.stat_time desc: 按照统计时间的降序排列结果；\n8. limit 1: 限制返回的结果数量为1条。\n\n综上所述，这个查询的目的是查找并返回满足上述条件的最近一条记录，即5小时以内的高新校区室外的人数。"
    },
    {
        "query": "6号学生公寓总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='6号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n该SQL语句用于查询6号学生公寓的摄像头数量。它从多个关联表格中获取数据，以下是各表的简要说明和连接方式：\n\n1. `s_camera`（摄像头表）：存储摄像头相关信息；\n2. `s_room`（房间表）：存储各个房间信息；\n3. `s_building`（楼栋表）：存储各楼栋信息；\n4. `s_region`（区域表）：存储各个区域信息；\n5. `s_organization`（单位表）：存储各单位组织信息。\n\n通过`ON`关键字将这几个表关联起来，并设置相应的条件来限制查询范围。具体来说，该查询将摄像头表与房间表、楼栋表、区域表和单位表进行关联，其中摄像头表与房间表关联的条件是`摄像头表.pid=房间表.id`，摄像头表与楼栋表关联的条件是`摄像头表.pid=楼栋表.id`，摄像头表与区域表关联的条件是`摄像头表.pid=区域表.id`，摄像头表与单位表关联的条件是`区域表.pid=单位表.id`。\n\n此外，查询还设置了三个过滤条件：`楼栋表.building_name='6号学生公寓'`表示仅查询6号学生公寓的数据，`区域表.region_name='高新校区'`表示仅查询高新校区的数据，`单位表.org_name='中国科学技术大学'`表示仅查询中国科学技术大学的数据。\n\n最后，查询结果集中将返回一个名为“摄像头数量”的字段，表示满足上述条件的摄像头的总数。"
    },
    {
        "query": "学生食堂每天有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。以下是各部分解释：\n\n1. `min(人数分布表.stat_time) as 统计时间`: 这行代码用于获取满足条件的最小统计时间（日期）。这里，`min()`函数用于返回一组值中的最小值，`as 统计时间`是结果的字段名。\n\n2. `round(avg(人数分布表.num)) as 平均人数`: 这行代码用于获取满足条件的每日平均人数。`round()`函数用于四舍五入，`avg()`函数用于计算平均值，`as 平均人数`是结果的字段名。\n\n3. `FROM a_people_spread_day_building as 人数分布表`: 这是数据来源表，表中存储了不同建筑物的每日人数分布情况。在这里，我们将此表简称为“人数分布表”。\n\n4. `WHERE 人数分布表.building_name='学生食堂'`: 这是查询条件之一，只选取“学生食堂”的数据进行后续计算。\n\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`: 这是查询条件之二，仅选取最近30天内（以当前日期为准）的数据。`DATEDIFF()`函数用于计算两个日期之间的差值。\n\n6. `and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 这是查询条件之三和四，进一步限制数据范围，只选取“高新校区”且属于“中国科学技术大学”的数据。\n\n7. `group by 人数分布表.stat_day`: 这行代码对每天的记录进行分组，以便计算每日的平均人数。\n\n8. `order by min(人数分布表.stat_time) asc`: 这行代码按照统计时间的升序（从小到大）对结果进行排序。"
    },
    {
        "query": "办公楼安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于统计某特定办公楼（例如\"行政办公楼\"）内安装的监控数量。以下是各子句的详细解释：\n\n1. `select count(*) as 摄像头数量`: 选择摄像头的计数作为结果，并给这个结果列一个别名\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`: 从名为\"s_camera\"的表中获取数据，这里将其简称为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将另一个名为\"s_room\"的表（简称为\"房间表\"）与\"摄像头表\"通过摄像头所在的房间ID关联起来，即摄像头表的pid等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将另一个名为\"s_building\"的表（简称为\"楼栋表\"）与\"房间表\"通过房间所在的楼栋ID关联起来，即房间表的pid等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将另一个名为\"s_region\"的表（简称为\"区域表\"）与\"楼栋表\"通过楼栋所在的区域ID关联起来，即楼栋表的pid等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将另一个名为\"s_organization\"的表（简称为\"单位表\"）与\"区域表\"通过区域所属的单位ID关联起来，即区域表的pid等于单位表的id。\n\n7. `where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 对查询结果设置条件限制，只返回满足条件的数据，即楼房名称是\"行政办公楼\"，区域名称是\"高新校区\"，单位名称是\"中国科学技术大学\"的数据。\n\n综上，该SQL语句的目的是查询出\"行政办公楼\"中安装的所有监控的数量，并限定在\"高新校区\"和\"中国科学技术大学\"范围内。"
    },
    {
        "query": "信智楼近期识别到多少行人？",
        "script": "```sql\nselect count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5     and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询语句，用于查询某个特定时间和地点（即“信智楼”）在一定时间范围内（例如最近五分钟）的行人人数。以下是各子句的含义：\n\n1. `select count(*) as 人数`：选择行人数作为结果集的列名，并计算符合条件的行数。\n2. `from d_people as 人员表`：从数据表d_people中选择记录，并将其简称为“人员表”。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接s_camera数据表（简称“摄像头表”），连接条件是人员表的camera_id等于摄像头表的id。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接s_room数据表（简称“房间表”），连接条件是摄像头表的pid等于房间表的id。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接s_building数据表（简称“楼栋表”），连接条件是房间表的pid等于楼栋表的id。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接s_region数据表（简称“区域表”），连接条件是楼栋表的pid等于区域表的id。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接s_organization数据表（简称“单位表”），连接条件是区域表的pid等于单位表的id。\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：设置查询条件，即人员表的moment字段与当前时间的分钟差小于5。这个条件表示只查询最近五分钟内的数据。\n9. `and 区域表.region_name='高新校区'`：添加查询条件，即区域表的region_name字段值为“高新校区”。\n10. `and 单位表.org_name='中国科学技术大学'`：添加查询条件，即单位表的org_name字段值为“中国科学技术大学”。\n11. `and 楼栋表.building_name='信智楼'`：添加查询条件，即楼栋表的building_name字段值为“信智楼”。"
    },
    {
        "query": "6号学生公寓现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='6号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中查询当前（时间戳距离现在小于5小时）6号学生公寓的人数信息。以下是各部分解释：\n\n1. select 人数分布表.num as 人数：选择num字段并将它重命名为“人数”。num是表示人数的列。\n2. from a_people_spread_day_building as 人数分布表：从名为a_people_spread_day_building的表中获取数据，并临时将这个表称为“人数分布表”。\n3. WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5：过滤出时间戳与当前时间的小时差小于5小时的记录。即最近5小时内的数据。\n4. and 人数分布表.building_name='6号学生公寓'：筛选出building_name字段值为‘6号学生公寓’的记录。\n5. and 人数分布表.region_name='高新校区'：筛选出region_name字段值为‘高新校区’的记录。\n6. and 人数分布表.org_name='中国科学技术大学'：筛选出org_name字段值为‘中国科学技术大学’的记录。\n7. order by 人数分布表.stat_time desc：按stat_time字段降序排列结果。\n8. limit 1：限制返回结果数量为1条，即只返回最新的（时间戳最接近现在的）一条数据。"
    },
    {
        "query": "查一下图书馆的所有摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从数据库中获取图书馆内的所有摄像头的详细信息。以下是各个部分的具体解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：这是查询的列，表示将从摄像头表（s_camera）中获取摄像头编号和IP地址，以及从房间表（s_room）中获取摄像头的安装位置。\n\n2. `from s_camera as 摄像头表`：这是查询的主表，表示将从摄像头表中获取数据。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是第一个JOIN子句，表示将摄像头表（s_camera）和房间表（s_room）进行连接，连接条件是摄像头表的pid（父ID）等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是第二个JOIN子句，表示将房间表（s_room）和楼栋表（s_building）进行连接，连接条件是房间表的pid（父ID）等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是第三个JOIN子句，表示将楼栋表（s_building）和区域表（s_region）进行连接，连接条件是楼栋表的pid（父ID）等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是第四个JOIN子句，表示将区域表（s_region）和单位表（s_organization）进行连接，连接条件是区域表的pid（父ID）等于单位表的id。\n\n7. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是WHERE子句，表示只有满足这些条件的摄像头才会被查询出来。即摄像头所在楼栋名称为“图书教育中心”，所在区域名称为“高新校区”，所属单位为“中国科学技术大学”。\n\n8. `order by 摄像头表.id asc limit 1000`：这是ORDER BY子句，表示按照摄像头表（s_camera）的id进行升序排列（asc），并且只返回前1000条结果。"
    },
    {
        "query": "找出近期到达1号学生公寓的一些行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.end_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='1号学生公寓' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从多个关联表中检索信息。下面是每个子句和连接的详细说明：\n\n1. `select 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id`: 选择要返回的列。这些列包括行人轨迹表的start_time（轨迹开始时间）、end_time（轨迹结束时间）、name（虚拟人名）以及camera_id_list（经过的摄像头ID列表）。\n\n2. `from a_people_trail as 行人轨迹表`: 指定主表，即行人轨迹表。\n\n3. `join s_camera as 摄像头表 on 行人轨迹表.end_camera_id=摄像头表.id`: 与摄像头表进行连接，连接条件是行人轨迹表的end_camera_id等于摄像头表的id。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 与房间表进行连接，连接条件是摄像头表的pid等于房间表的id。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 与楼栋表进行连接，连接条件是房间表的pid等于楼栋表的id。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 与区域表进行连接，连接条件是楼栋表的pid等于区域表的id。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 与单位表进行连接，连接条件是区域表的pid等于单位表的id。\n\n8. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='1号学生公寓'`: 设置筛选条件，只返回满足特定条件的记录，即区域名为“高新校区”，单位名称为中国科学技术大学，楼栋名称为“1号学生公寓”。\n\n9. `order by 行人轨迹表.start_time desc`: 对结果按照行人轨迹表的start_time降序排序。\n\n10. `limit 10`: 限制返回的记录数量为10条。"
    },
    {
        "query": "图教中心每天最少有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取某个特定建筑（这里是\"图书教育中心\"）在最近30天内的人数最小值（也就是每天的最低人数）。下面是详细的解析：\n\n1. `SELECT`子句：选择要查询的列和计算出的聚合函数结果。这里选择了`统计时间`和`平均人数`两个属性。\n\n2. `FROM`子句：指定查询的数据源，即数据表。这里使用的是名为`a_people_spread_day_building`的数据表，简称\"人数分布表\"。\n\n3. `WHERE`子句：设定查询条件。这些条件包括：建筑的名称必须是\"图书教育中心\"，统计时间与当前日期的差值必须小于30天，所在地区必须是\"高新校区\"，以及组织名称必须是\"中国科学技术大学\"。\n\n4. `GROUP BY`子句：按照特定的列对查询结果进行分组。这里按照`stat_day`（统计数据日期）进行分组。\n\n5. `ORDER BY`子句：对查询结果按照一个或多个列进行排序。这里按照`统计时间`（即`stat_time`）进行升序排序。\n\n6. `MIN()`聚合函数：返回分组后的某列的最小值。在这里，它返回了每天的人数最小值。\n\n7. `ROUND()`函数：四舍五入某个数值到指定的位数。这里将`MIN(num)`的结果保留到小数点后0位，即只显示整数部分。\n\n所以，这个SQL语句的最终结果是获取\"图书教育中心\"在\"高新校区\"的\"中国科学技术大学\"里，最近30天的每日最低人数。"
    },
    {
        "query": "5号学生公寓现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='5号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于查询\"5号学生公寓\"在特定时间范围内的人数。以下是各个部分的具体解释：\n\n1. `SELECT`子句：选择需要返回的列。这里选择了名为`人数`的列（`num`别名）。\n2. `FROM`子句：指定要查询的数据表。这里是`a_people_spread_day_building`表，也称为`人数分布表`。\n3. `WHERE`子句：设置查询条件。这里的时间差条件表示查询的是在过去5小时内的人数。其他条件包括公寓名称、校区、学校等信息。\n4. `ORDER BY`子句：对查询结果按照统计时间进行降序排列。这意味着最新的统计数据将排在最前面。\n5. `LIMIT`子句：限制查询结果的条数。这里设置为1，即只返回最新的一条数据。"
    },
    {
        "query": "图书教育中心安装了哪些摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从多个关联的数据表中获取图书教育中心的摄像头的信息。下面是对该SQL语句的详细解读：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：选择需要查询的列，包括摄像头编号、IP地址和安装位置。\n\n2. `from s_camera as 摄像头表`：指定主查询表，即摄像头信息表，用于存储摄像头的详细信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：联接摄像头信息表和房间信息表，通过摄像头表中的pid字段（表示所属房间ID）与房间表的id字段进行关联。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：联接房间信息表和楼栋信息表，通过房间表中的pid字段（表示所属楼栋ID）与楼栋表的id字段进行关联。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：联接楼栋信息表和区域信息表，通过楼栋表中的pid字段（表示所属区域ID）与区域表的id字段进行关联。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：联接区域信息表和单位信息表，通过区域表中的pid字段（表示所属单位ID）与单位表的id字段进行关联。\n\n7. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，限制查询结果仅包含位于“图书教育中心”、“高新校区”和“中国科学技术大学”范围内的摄像头信息。\n\n8. `order by 摄像头表.id asc limit 1000;`：按摄像头编号（id）升序排列查询结果，并限制返回的前1000条记录。"
    },
    {
        "query": "没有人的室内摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id not in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中获取数据并筛选出满足特定条件的结果。下面是对这个SQL语句的详细解释：\n\n1. `select`: 选择要从表中获取的数据字段。\n\n2. `摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`: 这三列分别是摄像头ID（摄像头编号）、房间名称（安装位置）和楼栋名称（所属大楼）。\n\n3. `from`: 从指定的表中选择数据。\n\n4. `s_camera as 摄像头表`: 摄像头表，即摄像头相关信息数据所在的表。\n\n5. `join`: 连接其他表，以便从多个表中获取数据。\n\n6. `s_room as 房间表`: 房间表，即房间相关信息数据所在的表。\n\n7. `on`: 指定连接条件，即摄像头表的`pid`字段等于房间表的`id`字段。\n\n8. `s_building as 楼栋表`: 楼栋表，即楼栋相关信息数据所在的表。\n\n9. `on`: 指定连接条件，即房间表的`pid`字段等于楼栋表的`id`字段。\n\n10. `s_region as 区域表`: 区域表，即区域相关信息数据所在的表。\n\n11. `on`: 指定连接条件，即楼栋表的`pid`字段等于区域表的`id`字段。\n\n12. `s_organization as 单位表`: 单位表，即单位相关信息数据所在的表。\n\n13. `on`: 指定连接条件，即区域表的`pid`字段等于单位表的`id`字段。\n\n14. `where`: 设置筛选条件，只返回满足这些条件的数据。\n\n15. `and`: 表示所有筛选条件是并列关系，都需要满足。\n\n16. `摄像头表.inhouse = 1`: 只选择“室内”摄像头（inhouse字段值为1）。\n\n17. `and 摄像头表.id not in (...)`: 排除已经有人使用的摄像头。这里通过子查询找到当前时刻（现在的时间减去时间差，单位为分钟）在10分钟内的摄像头ID，然后从主查询中排除这些ID。\n\n18. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 限制结果只包括位于“高新校区”且属于“中国科学技术大学”的摄像头。\n\n19. `order by`: 按照摄像头ID升序排列结果。\n\n20. `limit`: 限制返回的结果数量，这里是1000条。"
    },
    {
        "query": "信智楼近期识别到的人员中，不戴眼镜的有多少？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='未戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于从多个表中获取并统计“信智楼”（假设这是某个地点）近期（时间差在五分钟以内）识别到的不戴眼镜的人员数量。以下是各表及连接条件的简要说明：\n\n1. `d_people` AS 人员表：存储人员信息的表。\n2. `s_camera` AS 摄像头表：存储摄像头的信息表，包含每个摄像头的ID和其他信息。\n3. `s_room` AS 房间表：存储房间信息的表，包含每个房间的ID、名称等。\n4. `s_building` AS 楼栋表：存储楼栋信息的表，包含每个楼栋的ID、名称等。\n5. `s_region` AS 区域表：存储区域信息的表，包含每个区域的ID、名称等。\n6. `s_organization` AS 单位表：存储单位信息的表，包含每个单位的ID、名称等。\n7. `t_glasses` AS 眼镜维表：存储眼镜状态的表，包含每种眼镜状态的ID和名称。\n\n查询逻辑：\n1. 从这些表中选择数据，通过连接条件将它们关联起来。\n2. 根据`TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`条件过滤掉超过五分钟前的记录。\n3. 根据`眼镜维表.name='未戴眼镜'`条件筛选出未戴眼镜的人员。\n4. 根据`区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学' AND 楼栋表.building_name='信智楼'`条件筛选出特定区域、单位和楼栋的信息。\n5. 最后，使用`COUNT(*)`聚合函数计算满足以上所有条件的不戴眼镜的人员数量。"
    },
    {
        "query": "信智楼最近识别到的人员中，不同朝向的人数是多少？",
        "script": "```sql\nselect 朝向维表.name as 朝向, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 朝向维表.name  order by 朝向维表.name asc;\n```\n这是一段 SQL 语句，用于从数据库中查询和统计“信智楼”近期识别到的人员中不同朝向的人数。\n\n以下是各子句的解析：\n\n1. select 朝向维表.name as 朝向, count(*) as 人数: 选择查询的字段，包括朝向（人员的朝向）以及人数（每种朝向的人数）；\n\n2. from d_people as 人员表: 数据源是人员信息表格（d_people）；\n\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 联接摄像头信息表格（s_camera），条件是人员信息表中的 camera_id 等于摄像头表中 id；\n\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 联接房间信息表格（s_room），条件是摄像头表中 pid 等于房间表中 id；\n\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 联接楼栋信息表格（s_building），条件是房间表中 pid 等于楼栋表中 id；\n\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 联接区域信息表格（s_region），条件是楼栋表中 pid 等于区域表中 id；\n\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 联接单位信息表格（s_organization），条件是区域表中 pid 等于单位表中 id；\n\n8. join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id: 联接朝向信息表格（t_orientation），条件是人员信息表中的 orientation 等于朝向维表中的 id；\n\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5: 限制条件是，人员信息表中的 moment 字段与当前时间的差值小于 5 分钟；\n\n10. and 区域表.region_name='高新校区': 限制条件是，区域信息表中的 region_name 等于 '高新校区'；\n\n11. and 单位表.org_name='中国科学技术大学': 限制条件是，单位信息表中的 org_name 等于 '中国科学技术大学'；\n\n12. and 楼栋表.building_name='信智楼': 限制条件是，楼栋信息表中的 building_name 等于 '信智楼'；\n\n13. group by 朝向维表.name: 对结果进行分组，按照朝向维表中的 name 进行分组；\n\n14. order by 朝向维表.name asc: 对结果进行排序，按照朝向维表中的 name 从小到大排序。\n\n该 SQL 语句将返回信智楼近期识别到的人员中不同朝向的人数。"
    },
    {
        "query": "常见异常行为类型",
        "script": "```sql\nselect 异常类型表.name as 异常行为类型 from d_abnormal_behavior as 异常行为表 join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by count(*) desc  limit 10;\n```\n这是一个复杂的SQL查询语句，用于从多个表中获取数据并执行一定的统计和排序操作。下面是对这个SQL语句的详细解释：\n\n1. `d_abnormal_behavior`: 异常行为表，包含异常行为的记录；\n2. `s_camera`: 摄像头表，存储摄像头的详细信息，包括ID（camera_id）、位置信息等；\n3. `s_room`: 房间表，存储每个房间的信息，包括ID、所属楼栋等；\n4. `s_building`: 楼栋表，存储每栋楼房的信息，包括ID、所属区域等；\n5. `s_region`: 区域表，存储每个区域的信息，包括ID、所属单位等；\n6. `s_organization`: 单位表，存储每个单位的名称等信息；\n7. `t_abnormal_type`: 异常类型表，存储各种异常行为的类型信息，包括ID（abnormal_type）和类型名称（name）；\n8. `where`子句中，`region_name`和`org_name`分别限制查询的区域和单位；\n9. `group by`子句按异常类型表（t_abnormal_type）的name字段对结果进行分组；\n10. `order by`子句按照count(*)的值降序排列，即按照每种异常行为的出现次数进行排序；\n11. `limit 10`表示返回的结果集只包括排名前10的异常行为类型。\n\n整个查询的目的是找出某个特定区域（高新校区）和特定单位（中国科学技术大学）中，出现次数最多的前10种异常行为类型。"
    },
    {
        "query": "找出学生食堂一个月内，每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于在学生食堂（building_name字段值为'学生食堂'）的\"高新校区\"(region_name字段值为'高新校区')和\"中国科学技术大学\"(org_name字段值为'中国科学技术大学')内查找出在一个月内（DATEDIFF函数计算当前时间和stat_time之差小于30天）每天的最高人数。\n\n具体来说：\n1. select子句：选择要返回的字段（min(stat_time)的统计时间以及round(max(num))的平均人数）；\n2. from子句：指定数据来源（a_people_spread_day_building表，别名称为“人数分布表”）；\n3. where子句：设定筛选条件（包括建筑名、日期范围、校区名和大学名等）；\n4. group by子句：按照天数(stat_day)进行分组；\n5. having子句（此处的group by后没有having，所以这里应该是解释有误）：对每组结果设定条件（这里是求每组中的人数最大值）；\n6. order by子句：按统计时间升序排列（asc关键字）；\n7. round函数：将最大人数四舍五入保留整数位。"
    },
    {
        "query": "体育场监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于统计某个特定体育场的监控设备（摄像头）数量。以下是各个部分和条件的解释：\n\n1. `select count(*) as 摄像头数量`: 这行代码用来计算满足后续where子句中条件的摄像头的总数，并将结果命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`: 从s_camera这张表（假设该表存储了摄像头的数据）开始查询。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头表的pid字段和房间表的id字段进行连接。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间表的pid字段和楼栋表的id字段进行连接。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋表的pid字段和区域表的id字段进行连接。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域表的pid字段和单位表的id字段进行连接。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是查询的筛选条件，要求被查询的楼栋名称为“体育场”，所在区域的名称为“高新校区”，所属单位为“中国科学技术大学”。只有满足这些条件的摄像头才会被计算在总数中。"
    },
    {
        "query": "3号学生公寓摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算“3号学生公寓”的摄像头数量。下面是这段SQL的解释：\n\n1. `select count(*) as 摄像头数量`: 选择摄像头的数量作为查询结果。`count(*)`是聚合函数，用于计算满足条件的记录总数。\n\n2. `from s_camera as 摄像头表`: 从名为\"s_camera\"的摄像头数据表开始查询。这里将这个表称为\"摄像头表\"，方便后面的连接操作。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头表和房间表的\"pid\"和\"id\"字段进行连接（inner join），得到每个房间对应的摄像头信息。这里将\"s_room\"表称为\"房间表\"。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间表和楼栋表的\"pid\"和\"id\"字段进行连接，得到每个楼栋对应的房间和摄像头信息。这里将\"s_building\"表称为\"楼栋表\"。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋表和区域表的\"pid\"和\"id\"字段进行连接，得到每个区域对应的楼栋、房间和摄像头信息。这里将\"s_region\"表称为\"区域表\"。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域表和单位表的\"pid\"和\"id\"字段进行连接，得到每个单位对应的区域、楼栋、房间和摄像头信息。这里将\"s_organization\"表称为\"单位表\"。\n\n7. `where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只返回\"3号学生公寓\"（位于\"高新校区\"的\"中国科学技术大学\"）的相关记录。\n\n最后，这段SQL将返回满足条件的所有摄像头数量。"
    },
    {
        "query": "5分钟内识别到多少手中未持物的行人？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段用于查询的SQL代码，其目的是在5分钟时间内，统计出高新校区中国科学技术大学的摄像头的监控下，有多少个行人的手中未持有物品。具体解析如下：\n\n1. `SELECT COUNT(*) AS 手里拿东西的人数`: 选择COUNT函数对满足条件的记录进行计数，结果命名为“手里拿东西的人数”。\n\n2. `FROM d_people AS 人员表`: 数据源是d_people表格，这里将其简称为\"人员表\"。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`: 通过ON子句连接s_camera表格（简称\"摄像头表\"）与d_people表格，连接条件是两表的camera_id字段值相等。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 连接s_room表格（简称\"房间表\"），连接条件是摄像头表中的pid字段值等于房间表的id字段值。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 连接s_building表格（简称\"楼栋表\"），连接条件是房间表的pid字段值等于楼栋表的id字段值。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 连接s_region表格（简称\"区域表\"），连接条件是楼栋表的pid字段值等于区域表的id字段值。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 连接s_organization表格（简称\"单位表\"），连接条件是区域表的pid字段值等于单位表的id字段值。\n\n8. `JOIN t_hold_object AS 持物维表 ON 人员表.hold_obj = 持物维表.id AND 持物维表.name = '未持物'`: 连接t_hold_object表格（简称\"持物维表\"），连接条件是人员表的hold_obj字段值等于持物维表的id字段值，且持物维表的name字段值为'未持物'。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 设置筛选条件，即时间差小于5分钟，并且区域名和单位名称分别匹配'高新校区'和'中国科学技术大学'。\n\n综上所述，这段SQL语句的目的是在指定时间和区域内，统计出手中没有持有物品的行人人数。"
    },
    {
        "query": "目前人数最少的是哪些建筑？",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num asc  limit 10;\n```\n这是一段 SQL 查询语句，用于从数据库中获取某些信息。具体来说：\n\n1. `select 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数`: 从名为\"人数分布表\"的表中选取 \"building_name\"（建筑名称）和 \"num\"（人数）两列。其中，将 \"building_name\" 这列重命名为 \"建筑名称\"，将 \"num\" 这列重命名为 \"人数\"。\n\n2. `where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 对查询结果设置条件，即要求时间差（当前时间与统计时间的时间差）小于 5 小时，且所在区域名称为“高新校区”，组织名称为“中国科学技术大学”。\n\n3. `order by 人数分布表.num asc`: 对查询结果按照人数进行升序排序。\n\n4. `limit 10`: 限制查询结果的条数为 10 条。"
    },
    {
        "query": "操场的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育场' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于查询\"高新校区\"的\"体育场\"在最近5小时内的最后一个人数。下面是各个部分的详细解释：\n\n1. `select 人数分布表.num as 人数`：选择名为`num`的字段作为结果中的\"人数\"列。\n2. `from a_people_spread_day_building as 人数分布表`：从名为`a_people_spread_day_building`的表中获取数据，并将其简写为\"人数分布表\"。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：限制条件，只选取在过去5小时内（不包括当前时间）的数据。其中，`TIMESTAMPDIFF`是MySQL的时间戳差函数，计算两个时间点之间的差值；`now()`返回当前时间。\n4. `and 人数分布表.building_name='体育场'`：限制条件，只选取\"体育场\"的数据。\n5. `and 人数分布表.region_name='高新校区'`：限制条件，只选取\"高新校区\"的数据。\n6. `and 人数分布表.org_name='中国科学技术大学'`：限制条件，只选取\"中国科学技术大学\"的数据。\n7. `order by 人数分布表.stat_time desc limit 1`：对查询结果进行排序，按`stat_time`字段降序排列（即最近的记录排在最前面），并只返回第一行（即最近的记录）。"
    },
    {
        "query": "找出近期从学生食堂出发的一些行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于查找近期（具体时间未明确）从学生食堂出发的一些行人的轨迹信息。以下是各部分解释：\n\n1. `select`：选择要查询的列。在这个例子中，需要选择的列包括：轨迹起始和结束时间、虚拟人名、经过的摄像头ID列表。\n\n2. `from`：指定数据来源表。这里涉及到多个表的连接，包括：行人轨迹表（a_people_trail）、摄像头表（s_camera）、房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）。\n\n3. `join`：连接各个表。这个查询涉及了多表连接，通过摄像头ID、房间ID、楼栋ID和区域ID进行连接。\n\n4. `where`：设置查询条件。在这里，要求查询的是位于“高新校区”且属于“中国科学技术大学”单位的“学生食堂”出发的行人轨迹。\n\n5. `order by`：设置查询结果的排序规则。在这个例子中，按照轨迹起始时间降序排列。\n\n6. `limit`：限制查询结果的数量。在这个例子中，返回最近10条轨迹数据。"
    },
    {
        "query": "师生活动中心的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='师生活动中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取师生活动中心的人数。以下是各部分的解释：\n\n1. `select 人数分布表.num as 人数`：选择名为\"num\"的列作为\"人数\"字段进行输出。\n\n2. `from a_people_spread_day_building as 人数分布表`：从名为\"a_people_spread_day_building\"的数据表（这里将其简称为\"人数分布表\"）中选择数据。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置筛选条件，即只选择统计时间距离当前时间小于5小时的记录。\n\n4. `and 人数分布表.building_name='师生活动中心'`：进一步筛选，只选择建筑名称为\"师生活动中心\"的记录。\n\n5. `and 人数分布表.region_name='高新校区'`：继续筛选，只选择地区名称为\"高新校区\"的记录。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：再进一步筛选，只选择组织名称为\"中国科学技术大学\"的记录。\n\n7. `order by 人数分布表.stat_time desc limit 1`：对结果按照统计时间降序排序，并只返回第一条记录（即最近的数据）。"
    },
    {
        "query": "统计食堂一个月内每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于统计食堂一个月内每天的最大人数。以下是各部分的解释：\n\n1. `SELECT`：选择要返回的列。这里选择了两个列：统计时间和平均人数。\n\n2. `min(人数分布表.stat_time) as 统计时间`：获取每日数据中的最早时间作为该日的统计时间。\n\n3. `round(max(人数分布表.num)) as 平均人数`：计算每日的人数最大值（即当天最多人数）并取整。\n\n4. `FROM`：指定数据来源表，这里是`a_people_spread_day_building`表，也称作“人数分布表”。\n\n5. `WHERE`：设置筛选条件。这个查询只考虑满足以下条件的数据：建筑名为“学生食堂”、与当前日期的差值在30天内（小于30天）、地区名为“高新校区”和组织名为“中国科学技术大学”。\n\n6. `GROUP BY`：根据指定的列进行分组。这里按照`人数分布表.stat_day`进行分组，即按日期进行分组。\n\n7. `ORDER BY`：对分组后的结果进行排序。这里按照统计时间的最早日期升序排列。\n\n8. `ASC`：表示升序排列。\n\n综上，这个查询会返回一份包含食堂一个月内每天最多人数的统计结果，并按照统计时间的升序排列。"
    },
    {
        "query": "统计师生活动中心每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取\"师生活动中心\"（building_name）在\"高新校区\"（region_name）且属于\"中国科学技术大学\"（org_name）的最近30天内的每日最少人数。\n\n具体解释如下：\n\n1. select: 选择要返回的列和聚合函数；\n2. min(人数分布表.stat_time): 计算每天的最早时间（即最少的统计时间）；\n3. round(min(人数分布表.num)): 计算每日最少人数（保留小数点后位数）；\n4. FROM: 从哪个表中获取数据，这里是`a_people_spread_day_building`，表示人员分布在建筑中的表格；\n5. WHERE: 过滤条件，只选取满足这些条件的记录；\n6. DATEDIFF(now(), 人数分布表.stat_time) < 30: 限制最近的30天内的时间范围；\n7. AND连接多个条件；\n8. group by: 根据某列进行分组，这里是`人数分布表.stat_day`，表示按日期分组；\n9. order by: 对结果按照某个字段升序排列，这里是按照`min(人数分布表.stat_time)`升序排列；\n10. ASC: 升序排序标志。"
    },
    {
        "query": "统计图教中心一个月内每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取某个特定建筑（例如图书教育中心）在一个月内每天的最低人数。以下是各个部分的具体解释：\n\n1. `SELECT min(人数分布表.stat_time) as 统计时间`：选择最小的时间作为统计时间，即一个月内每天的最早时间。\n2. `ROUND(MIN(人数分布表.num)) as 平均人数`：计算并取整最小人数，即一个月内每天的最小人数。\n3. `FROM a_people_spread_day_building AS 人数分布表`：指定数据来源表名为“a_people_spread_day_building”，并将其简称为“人数分布表”。\n4. `WHERE 人数分布表.building_name = '图书教育中心'`：限制查询结果只包括名为“图书教育中心”的建筑。\n5. `AND DATEDIFF(NOW(), 人数分布表.stat_time) < 30`：筛选出在最近30天内有数据记录的情况。DATEDIFF函数用于计算两个日期之间的差值，这里用于判断统计时间与当前时间的差值是否小于30天。\n6. `AND 人数分布表.region_name = '高新校区'`：进一步限制查询结果只包括位于“高新校区”的建筑。\n7. `AND 人数分布表.org_name = '中国科学技术大学'`：再进一步限制查询结果只包括属于“中国科学技术大学”的建筑。\n8. `GROUP BY 人数分布表.stat_day`：按照统计日期对数据进行分组，以便进行后续的计算和排序。\n9. `ORDER BY MIN(人数分布表.stat_time) ASC`：根据统计时间对查询结果进行升序排序，即按时间最早的排在最前面。"
    },
    {
        "query": "找出近期从食堂出发的10条行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一段SQL查询语句，用于查找近期从食堂出发的10条行人轨迹。下面是各子句的解释：\n\n1. select 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id: 选择需要返回的数据列；\n2. from a_people_trail as 行人轨迹表: 指定数据来源是a_people_trail表，并将此表简写为“行人轨迹表”；\n3. join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id: 连接s_camera表（摄像头表），关联条件是行人轨迹表的start_camera_id与摄像头表的id相等；\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接s_room表（房间表），关联条件是摄像头表的pid与房间表的id相等；\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接s_building表（楼栋表），关联条件是房间表的pid与楼栋表的id相等；\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接s_region表（区域表），关联条件是楼栋表的pid与区域表的id相等；\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接s_organization表（单位表），关联条件是区域表的pid与单位表的id相等；\n8. where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂': 设置筛选条件，即只返回满足特定条件的数据，这里要求区域名称是“高新校区”，单位名称是“中国科学技术大学”，并且楼栋名称是“学生食堂”；\n9. order by 行人轨迹表.start_time desc: 对结果按照行人轨迹的起始时间进行降序排列；\n10. limit 10: 限制返回的结果数量，这里只返回10条。"
    },
    {
        "query": "4号学生公寓的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='4号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中获取与特定条件匹配的数据。以下是该SQL语句的详细解释：\n\n1. `select 人数分布表.num as 人数`：选择名为“人数”的列作为输出结果。\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表名为 \"a_people_spread_day_building\"，并为其赋予别名“人数分布表”。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置时间过滤条件，即统计时间与当前时间的差小于5小时。\n4. `and 人数分布表.building_name='4号学生公寓'`：设置建筑名称过滤条件，即建筑名称为“4号学生公寓”。\n5. `and 人数分布表.region_name='高新校区'`：设置地区名称过滤条件，即地区名称为“高新校区”。\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置组织名称过滤条件，即组织名称为“中国科学技术大学”。\n7. `order by 人数分布表.stat_time desc`：按照统计时间降序排列数据。\n8. `limit 1`：仅返回一条满足条件的数据。"
    },
    {
        "query": "图教中心每天有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。以下是各部分的解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`：选择最小的stat_time（统计时间）作为\"统计时间\"列。\n\n2. `round(avg(人数分布表.num)) as 平均人数`：计算人数分布表中的num字段的平均值（四舍五入保留小数位），并将结果命名为\"平均人数\"。\n\n3. `from a_people_spread_day_building as 人数分布表`：定义数据来源，将表名设为\"a_people_spread_day_building\"并简称为\"人数分布表\"。\n\n4. `WHERE 人数分布表.building_name='图书教育中心'`：设置过滤条件，仅选取building_name字段值为\"图书教育中心\"的数据。\n\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`：筛选出stat_time（统计时间）距离现在不足30天的数据。\n\n6. `and 人数分布表.region_name='高新校区'`：进一步筛选，要求region_name字段值等于\"高新校区\"。\n\n7. `and 人数分布表.org_name='中国科学技术大学'`：继续筛选，要求org_name字段值等于\"中国科学技术大学\"。\n\n8. `group by 人数分布表.stat_day`：按照stat_day（统计日期）对数据进行分组。\n\n9. `order by min(人数分布表.stat_time) asc`：按统计时间升序排列结果。"
    },
    {
        "query": "信智楼最近识别到的人员中，不同上衣风格分别有多少人？",
        "script": "```sql\nselect substring(人员表.upper,6) as 上衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.upper  order by 人员表.upper asc;\n```\n这是一个SQL查询语句，用于从数据库中提取特定信息。下面是各子句的解析：\n\n1. `select substring(人员表.upper,6) as 上衣风格, count(*) as 人数`: 选择两个列，即上衣风格（由`substring()`函数从`upper`字段中截取）和人数（通过`count(*)`计算）。\n\n2. `from d_people as 人员表`: 指定数据表来源，这里是`d_people`表，简称为“人员表”。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接`摄像头表`，条件是`人员表`中的`camera_id`等于`摄像头表`的`id`。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接`房间表`，条件是`摄像头表`的`pid`等于`房间表`的`id`。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接`楼栋表`，条件是`房间表`的`pid`等于`楼栋表`的`id`。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接`区域表`，条件是`楼栋表`的`pid`等于`区域表`的`id`。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接`单位表`，条件是`区域表`的`pid`等于`单位表`的`id`。\n\n8. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 过滤条件，限制查询结果在最近5分钟内、位于“高新校区”且属于“中国科学技术大学”的“信智楼”的人员。\n\n9. `group by 人员表.upper`: 对查询结果按照`upper`字段进行分组，以便统计每种上衣风格的人数。\n\n10. `order by 人员表.upper asc`: 按上衣风格升序排列查询结果。"
    },
    {
        "query": "教工食堂现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中获取特定时间范围内的人数信息。下面是该SQL语句的详细解释：\n\n1. `select 人数分布表.num as 人数`：选择名为\"人数分布表\"的表格中的\"num\"字段并将其重命名为\"人数\"。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据源，即 \"a_people_spread_day_building\" 表格，并为其取别名 \"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置一个过滤条件，只返回在5小时之前统计的数据。这个条件通过 `TIMESTAMPDIFF` 函数计算当前时间和 \"stat_time\" 字段之间的小时差来实现。\n\n4. `and 人数分布表.building_name='教工食堂'`：设置另一个过滤条件，只返回\"building_name\"字段值为\"教工食堂\"的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：设置另一个过滤条件，只返回\"region_name\"字段值为\"高新校区\"的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置另一个过滤条件，只返回\"org_name\"字段值为\"中国科学技术大学\"的数据。\n\n7. `order by 人数分布表.stat_time desc`：按照 \"stat_time\" 字段的降序对结果进行排序。\n\n8. `limit 1`：限制返回的结果数量，这里只返回一条记录。"
    },
    {
        "query": "给出学生食堂的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段用于查询学生食堂摄像头数量的SQL语句。下面是对这段SQL的解释：\n\n1. `count(*) as 摄像头数量`: 这行代码用于计算摄像头表（s_camera）中满足后续条件的记录数，并将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`: 指定摄像头数量查询的数据来源是s_camera表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这行代码表示将s_camera表与s_room表进行连接操作，连接条件是摄像头表（s_camera）中的pid字段等于房间表（s_room）的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这行代码表示将s_room表与s_building表进行连接操作，连接条件是房间表（s_room）中的pid字段等于楼栋表（s_building）的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这行代码表示将s_building表与s_region表进行连接操作，连接条件是楼栋表（s_building）中的pid字段等于区域表（s_region）的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这行代码表示将s_region表与s_organization表进行连接操作，连接条件是区域表（s_region）中的pid字段等于单位表（s_organization）的id字段。\n\n7. `where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这行代码用于设置查询的条件，即要求楼栋表（s_building）的building_name字段值为“学生食堂”、区域表（s_region）的region_name字段值为“高新校区”和单位表（s_organization）的org_name字段值为“中国科学技术大学”。\n\n通过上述查询，可以得到位于“学生食堂”且位于“高新校区”的“中国科学技术大学”的学生食堂的摄像头数量。"
    },
    {
        "query": "告诉我现在学生食堂有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='学生食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前学生食堂的人数。以下是各部分的解释：\n\n1. `SELECT 人数分布表.num AS 人数`: 从数据表中选择名为`num`的列，并将它重命名为`人数`。\n\n2. `FROM a_people_spread_day_building AS 人数分布表`: 从名为`a_people_spread_day_building`的数据表中选择数据，并将这个表称为`人数分布表`。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 限制只返回在最近的5小时内更新的数据。这里的`TIMESTAMPDIFF`函数计算两个日期之间的差值（以小时为单位），确保只返回最近5小时的记录。\n\n4. `AND 人数分布表.building_name='学生食堂' AND 人数分布表.region_name='高新校区' AND 人数分布表.org_name='中国科学技术大学'`: 限制只返回满足特定条件的数据，即食堂名称是“学生食堂”、所在区域是“高新校区”且所属组织是“中国科学技术大学”。\n\n5. `ORDER BY 人数分布表.stat_time DESC`: 对结果按照时间（`stat_time`）降序排列，最新的记录排在最前面。\n\n6. `LIMIT 1`: 限制只返回一条记录。由于前面的条件已经限制了数据的范围，所以这里只需返回一条最新的学生食堂人数记录。"
    },
    {
        "query": "各类异常行为数量",
        "script": "```sql\nselect 异常类型表.name as 异常行为类型, count(*) as 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by 异常类型表.name asc;\n```\n这是一段SQL查询语句，用于计算特定时间范围内（过去七天）在特定地点（高新校区的中国科学技术大学）发生的各类异常行为的数量。以下是各部分的具体解释：\n\n1. `d_abnormal_behavior as 异常行为表`: 是存储异常行为数据的表，包含的行为数据字段可能包括行为发生时间、摄像头ID等；\n2. `s_camera as 摄像头表`: 是存储摄像头信息的表，包括摄像头ID、所在房间等信息；\n3. `s_room as 房间表`: 是存储房间信息的表，包括房间ID、所属楼栋等信息；\n4. `s_building as 楼栋表`: 是存储楼栋信息的表，包括楼栋ID、所属区域等信息；\n5. `s_region as 区域表`: 是存储区域信息的表，包括区域ID、所属单位等信息；\n6. `s_organization as 单位表`: 是存储单位信息的表，包括单位ID、名称等信息；\n7. `t_abnormal_type as 异常类型表`: 是存储异常行为类型的表，包括异常行为类型名称和对应的ID；\n8. `DATEDIFF(now(), 异常行为表.moment) < 7`: 限制查询的时间范围为过去七天；\n9. `区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 限制查询的地点为中国科学技术大学的高新校区；\n10. `group by 异常类型表.name`: 对各类异常行为进行分组，以便统计每种异常行为的数量；\n11. `order by 异常类型表.name asc`: 按照异常行为类型名称进行升序排列，使结果更易于阅读。"
    },
    {
        "query": "最近发生了哪些异常行为？",
        "script": "```sql\nselect 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) <1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 异常行为表.moment desc limit 10;\n```\n这是一段SQL查询语句，用于从多个表中获取特定条件下的数据。以下是各子句的解释：\n\n1. `SELECT`: 从指定表格中选择数据列。\n2. `异常行为表.camera_id AS 摄像头编号`: 将异常行为表的camera_id字段重命名为摄像头编号。\n3. `房间表.room_name AS 异常发生地点`: 将房间表的room_name字段重命名为异常发生地点。\n4. `异常行为表.moment AS 异常发生时刻`: 将异常行为表的moment字段重命名为异常发生时刻。\n5. `异常类型表.name AS 异常类型`: 将异常类型表的name字段重命名为异常类型。\n6. `FROM`: 指定要查询的表格或视图。\n7. `d_abnormal_behavior AS 异常行为表`: 定义一个别名，方便在查询中使用。\n8. `JOIN`: 连接多个表格，基于它们的共享字段。\n9. `s_camera AS 摄像头表 ON 异常行为表.camera_id=摄像头表.id`: 连接摄像头表，基于摄像头编号匹配。\n10. `s_room AS 房间表 ON 摄像头表.pid=房间表.id`: 连接房间表，基于房间ID匹配。\n11. `s_building AS 楼栋表 ON 房间表.pid=楼栋表.id`: 连接楼栋表，基于房间ID匹配。\n12. `s_region AS 区域表 ON 楼栋表.pid=区域表.id`: 连接区域表，基于楼栋ID匹配。\n13. `s_organization AS 单位表 ON 区域表.pid=单位表.id`: 连接单位表，基于区域ID匹配。\n14. `t_abnormal_type AS 异常类型表 ON 异常行为表.abnormal_type=异常类型表.id`: 连接异常类型表，基于异常类型ID匹配。\n15. `WHERE`: 设置查询条件。\n16. `DATEDIFF(now(), 异常行为表.moment) <1`: 计算当前时间与异常发生时刻的时间差，小于1天。\n17. `AND`: 连接多个查询条件。\n18. `区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学'`: 限制查询结果为高新校区的中国科学技术大学的数据。\n19. `ORDER BY`: 对查询结果按照某一字段进行排序。\n20. `异常行为表.moment DESC`: 按照异常发生时刻倒序排列。\n21. `LIMIT`: 限制查询结果的行数。\n22. `10`: 限制查询结果最多显示10行。"
    },
    {
        "query": "哪些房间经常发生异常行为？",
        "script": "```sql\nselect 房间表.room_name as 房间名称, count(*) as 5天内异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(),异常行为表.moment) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' GROUP by 房间表.room_name  ORDER by count(*) desc  limit 10;\n```\n这是一个 SQL（结构化查询语言）查询语句，用于从多个表中检索并计算特定信息。以下是对这个查询语句的详细解释：\n\n1. `d_abnormal_behavior`: 这个表保存了异常行为的数据，例如在某个地点发生了争吵或打架等事件。\n\n2. `s_camera`: 这个表记录了摄像头的数据，包括每个摄像头的ID、位置信息等。\n\n3. `s_room`: 这个表保存了房间的信息，包括每个房间的ID、名称、所属建筑等。\n\n4. `s_building`: 这个表记录了建筑的信息，包括每个建筑的ID、名称、所属区域等。\n\n5. `s_region`: 这个表保存了区域的信息，包括每个区域的ID、名称、所属单位等。\n\n6. `s_organization`: 这个表记录了单位的信息，包括每个单位的ID、名称等。\n\n7. `DATEDIFF`: 这个函数用于计算两个日期之间的差值。在这个查询中，它用于筛选出最近5天内的异常行为记录。\n\n8. `GROUP BY`: 这是SQL中的一个关键字，用于将查询结果按照指定的列进行分组。在这里，它将按房间名对查询结果进行分组。\n\n9. `ORDER BY`: 这也是SQL中的一个关键字，用于对查询结果按照指定的列进行排序。在这里，它将按照异常行为数量对查询结果进行降序排列（即异常行为数量最多的房间排在最前面）。\n\n10. `LIMIT`: 这是SQL中的一个关键字，用于限制查询结果的条数。在这里，它只返回前10个结果。\n\n综上所述，这个SQL查询语句的目的是找出过去5天内异常行为数量最多的10个房间。"
    },
    {
        "query": "现在有多少人在7号学生公寓？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='7号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL查询语句的目的是获取7号学生公寓在最近的5小时内的人数信息。具体步骤如下：\n\n1. `TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：这个条件用于筛选出距离当前时间（now()）小于5小时的数据。\n\n2. `and 人数分布表.building_name='7号学生公寓'`：这个条件用于限制数据是关于7号学生公寓的。\n\n3. `and 人数分布表.region_name='高新校区'`：这个条件用于限制数据是在高新校区的。\n\n4. `and 人数分布表.org_name='中国科学技术大学'`：这个条件用于限制数据是中国科学技术大学的。\n\n5. `order by 人数分布表.stat_time desc`：这个条件用于按照统计时间（stat_time）降序排列数据。\n\n6. `limit 1`：这个条件用于只返回一条结果，即最近5小时内的7号学生公寓的人数信息。\n\n通过以上条件，这个SQL语句将返回7号学生公寓在最近5小时内的人数信息。"
    },
    {
        "query": "信智楼每天平均有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一段SQL查询语句，用于计算某个建筑（这里是“信智楼”）在过去30天内的人均访问量。以下是每个部分的解释：\n\n1. `min(人数分布表.stat_time) as 统计时间`: 获取人数分布表中记录的最小日期作为统计时间。\n2. `round(avg(人数分布表.num)) as 平均人数`: 计算人数分布表中记录的平均数并四舍五入结果，作为平均人数。\n3. `FROM a_people_spread_day_building as 人数分布表`: 从名为\"a_people_spread_day_building\"的表中获取数据，这里将其简称为“人数分布表”。\n4. `WHERE 人数分布表.building_name='信智楼'`: 限制只返回与“信智楼”相关的数据。\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`: 限制只返回过去30天内的数据。\n6. `and 人数分布表.region_name='高新校区'`: 限制只返回与“高新校区”相关的数据。\n7. `and 人数分布表.org_name='中国科学技术大学'`: 限制只返回与“中国科学技术大学”相关的数据。\n8. `group by 人数分布表.stat_day`: 按照统计日期对数据进行分组。\n9. `order by min(人数分布表.stat_time) asc;`: 按照统计时间的升序排列结果。"
    },
    {
        "query": "给出3号学科楼安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中获取特定建筑（3号学科楼）的摄像头数量。以下是各子句和连接表的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数，计算符合条件的摄像头的总数，并将结果命名为“摄像头数量”。\n2. `from s_camera as 摄像头表`：指定数据源是名为“s_camera”的摄像头表。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表与房间表通过摄像头表的`pid`字段（表示摄像头所在的房间ID）等于房间表的主键`id`字段进行连接。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将房间表与楼栋表通过房间表的`pid`字段（表示房间所在的楼栋ID）等于楼栋表的主键`id`字段进行连接。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将楼栋表与区域表通过楼栋表的`pid`字段（表示楼栋所在的大楼ID）等于区域表的主键`id`字段进行连接。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将区域表与单位表通过区域表的`pid`字段（表示大楼所在的单位ID）等于单位表的主键`id`字段进行连接。\n7. `where 楼栋表.building_name='3号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置过滤条件，只返回满足条件的数据，即楼栋名称等于“3号学科楼”、区域名称等于“高新校区”且单位名称等于“中国科学技术大学”的数据。"
    },
    {
        "query": "查一下学生食堂的所有摄像头的基本信息",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于查询学生食堂的所有摄像头的基本信息。下面是对这段SQL的解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 选择要查询的列，包括摄像头编号（由摄像头表的id字段提供）、IP地址（由摄像头表的ip字段提供）和安装位置（由房间表的room_name字段提供）。\n\n2. `from s_camera as 摄像头表`: 从s_camera表（摄像头表）开始查询。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头表的主键（pid）与房间表的主键（id）建立连接，以便获取每个摄像头的具体安装位置。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间表的pid与楼栋表的id建立连接，以便获取每栋建筑物的名称。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋表的pid与区域表的id建立连接，以便获取每个区域的名称。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域表的pid与单位表的id建立连接，以便获取每个单位的名称。\n\n7. `where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，只返回满足条件的数据，即位于“学生食堂”的建筑、“高新校区”的区域以及属于“中国科学技术大学”的单位的数据。\n\n8. `order by 摄像头表.id asc limit 1000`: 对查询结果按照摄像头编号进行升序排序（asc表示升序，desc表示降序），并限制返回的数据量不超过1000条。"
    },
    {
        "query": "目前有人的房间有多少？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'      and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一段 SQL 查询语句，用于计算满足特定条件的房间数量。下面是对这段 SQL 的解释：\n\n1. `count(房间表.room_name)`：使用 `count()` 函数统计房间表中的房间名称（`room_name`），即计算符合条件的房间总数。\n\n2. `有人的房间数量`：这是查询的目标，即计算当前有人在的房间数量。\n\n3. `from s_camera as 摄像头表`：定义数据来源和别名，这里是摄像头表，用于获取摄像头信息。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表与房间表通过 `pid` 和 `id` 这两个字段进行连接，表示一个摄像头对应一个房间。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将房间表与楼栋表通过 `pid` 和 `id` 这两个字段进行连接，表示一个房间属于一个楼栋。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将楼栋表与区域表通过 `pid` 和 `id` 这两个字段进行连接，表示一个楼栋属于一个区域。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将区域表与单位表通过 `pid` 和 `id` 这两个字段进行连接，表示一个区域属于一个单位。\n\n8. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置条件，只统计位于“高新校区”且属于“中国科学技术大学”的单位下的房间。\n\n9. `and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：这个子查询用来筛选出近10分钟内有人出现的摄像头 ID，然后在主查询中只考虑这些摄像头的房间。\n\n综合以上，这个查询的目的是找出近10分钟内有人在的高新区中国科学技术大学的所有房间。"
    },
    {
        "query": "食堂每天有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中查询并计算某个食堂（这里是“学生食堂”）在近30天内的每日平均人数。下面是各个部分的具体解释：\n\n1. `SELECT`：这是选择要返回的列和聚合函数的开始。这里选择了两个列，分别是统计时间和平均人数。\n\n2. `MIN(人数分布表.stat_time) as 统计时间`：获取最近一次统计的时间。`MIN()`是聚合函数，用于找出每组的第一个值。这里将结果命名为\"统计时间\"。\n\n3. `ROUND(AVG(人数分布表.num)) as 平均人数`：计算每天的平均人数。`AVG()`是聚合函数，用于计算每组数值的平均值。`ROUND()`函数用于对结果进行四舍五入。这里将结果命名为\"平均人数\"。\n\n4. `FROM a_people_spread_day_building as 人数分布表`：指定数据来源表，即\"a_people_spread_day_building\"表，并将此表简称为\"人数分布表\"。\n\n5. `WHERE`：设置筛选条件，只选取满足条件的数据。这里的条件是：建筑名称为“学生食堂”，与当前时间的差小于30天，地区名为“高新校区”，机构名称为“中国科学技术大学”。\n\n6. `GROUP BY`：按日期分组，以便计算每天的平均人数。\n\n7. `ORDER BY`：按照统计时间的升序排列结果。\n\n这个查询语句最后会返回一个表格，包含每个日期的平均用餐人数以及相应的统计时间。"
    },
    {
        "query": "近期内识别到的人员中，拿手提包的有多少？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于从多个关联表中获取满足特定条件的数据。以下是各子句和连接关系的解释：\n\n1. `select count(*) as 背双肩包的人数`：选择计数函数（COUNT）计算符合要求的手提包数量，并将结果命名为“背双肩包的人数”。\n\n2. `from d_people as 人员表`：定义源表，即人员信息表，并为其取别名\"人员表\"。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接摄像头表到人员表，条件是摄像头与人员在同一个摄像头下。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表到摄像头表，条件是摄像头的房间号等于房间表的ID。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表到房间表，条件是房间属于某个楼栋，其ID对应楼栋表的ID。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表到楼栋表，条件是楼栋属于某个区域，其ID对应区域表的ID。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表到区域表，条件是区域属于某个单位，其ID对应单位表的ID。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`：连接背包维表到人员表，条件是人员携带的背包类型在背包维表中存在对应的记录。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：限制时间范围，只考虑最近5分钟内的数据。\n\n10. `and 背包维表.name='手提包'`：限定只统计携带手提包的人员数量。\n\n11. `and 区域表.region_name='高新校区'`：限定只统计位于高新校区的人员数量。\n\n12. `and 单位表.org_name='中国科学技术大学'`：限定只统计隶属于中国科学技术大学的人员数量。"
    },
    {
        "query": "信智楼近期识别到多少戴眼镜的行人？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段 SQL 语言，用于查询某个特定时间范围内（例如过去五分钟）内，位于某地（例如高新校区的中国科学技术大学信智楼）、并且佩戴了眼镜的行人数量。下面是对这段 SQL 的详细解释：\n\n1. `select count(*) as 戴眼镜人数`: 选择计数函数 `COUNT`，对符合条件的所有人进行计数，并将结果命名为 \"戴眼镜人数\"。\n\n2. `from d_people as 人员表`: 定义数据表 `d_people` 为 \"人员表\"，其中存储着每个人的信息。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接 `摄像头表`（可能记录摄像头的位置信息等）和 `人员表`，基于条件 `人员表.camera_id=摄像头表.id`，也就是每个行人被哪个摄像头捕捉。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接 `房间表` 和 `摄像头表`，基于条件 `摄像头表.pid=房间表.id`，即摄像头对应的房间信息。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接 `楼栋表` 和 `房间表`，基于条件 `房间表.pid=楼栋表.id`，获取每个房间所在的楼栋信息。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接 `区域表` 和 `楼栋表`，基于条件 `楼栋表.pid=区域表.id`，获取每个楼栋所在的区域信息。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接 `单位表` 和 `区域表`，基于条件 `区域表.pid=单位表.id`，获取每个区域所属的单位（例如学校或公司）信息。\n\n8. `join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id`: 连接 `眼镜维表` 和 `人员表`，基于条件 `人员表.glasses=眼镜维表.id`，获取每个人是否佩戴眼镜的信息。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 设置时间条件，只考虑在过去五分钟内抓拍到的行人。\n\n10. `and 眼镜维表.name='戴眼镜'`: 设置眼镜条件，只考虑佩戴眼镜的行人。\n\n11. `and 区域表.region_name='高新校区'`: 设置地点条件，只考虑位于高新校区的行人。\n\n12. `and 单位表.org_name='中国科学技术大学'`: 设置单位条件，只考虑属于中国科学技术大学的行人。\n\n13. `and 楼栋表.building_name='信智楼'`: 设置楼栋条件，只考虑位于信智楼的行人。\n\n通过以上条件筛选，SQL 最后将返回满足所有条件的行人总数。"
    },
    {
        "query": "信智楼不同朝向的人数",
        "script": "```sql\nselect 朝向维表.name as 朝向, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 朝向维表.name  order by 朝向维表.name asc;\n```\n这个SQL查询语句的目的是计算信智楼不同朝向的人数。下面是各子句的说明：\n\n1. select 朝向维表.name as 朝向, count(*) as 人数: 选择要输出的列，这里选择了朝向和对应的人数。\n\n2. from d_people as 人员表: 从人员表（可能包含人的一些信息，如性别、年龄等）开始查询。\n\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 连接摄像头表（存储摄像头的数据）和d_people表，条件是摄像头与人员关联。\n\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接房间表（可能包含房间的一些信息，如面积、布局等）和摄像头表，条件是摄像头所在房间的信息。\n\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接楼栋表（存储楼栋的信息）和房间表，条件是房间所在楼栋的信息。\n\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接区域表（存储区域的信息）和楼栋表，条件是楼栋所在区域的信息。\n\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接单位表（存储单位名称）和区域表，条件是区域所属单位的名称。\n\n8. join t_orientation as 朝向维表 on 人员表.orientation=朝向维表.id: 连接朝向维表（存储各个朝向的信息）和人员表，条件是人员的朝向。\n\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5: 筛选出最近5分钟内的人员信息。\n\n10. and 区域表.region_name='高新校区': 限定查询的区域为高新校区。\n\n11. and 单位表.org_name='中国科学技术大学': 限定查询的单位为中国科学技术大学。\n\n12. and 楼栋表.building_name='信智楼': 限定查询的楼栋为信智楼。\n\n13. group by 朝向维表.name: 对不同朝向进行分组。\n\n14. order by 朝向维表.name asc: 按照朝向的升序排列输出结果。"
    },
    {
        "query": "信智楼有多少人未背包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段用于查询\"信智楼\"多少人未背包的SQL语句。以下是各子句的解释：\n\n1. `select count(*) as 背双肩包的人数`: 选择计数函数（count）计算人数，将结果命名为“背双肩包的人数”。\n\n2. `from d_people as 人员表`: 数据源是d_people表，将其简称为“人员表”。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接s_camera表（摄像头表）和d_people表（人员表），依据条件是“人员表”的camera_id等于“摄像头表”的id。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表（房间表）和s_camera表（摄像头表），依据条件是“摄像头表”的pid等于“房间表”的id。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表（楼栋表）和s_room表（房间表），依据条件是“房间表”的pid等于“楼栋表”的id。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表（区域表）和s_building表（楼栋表），依据条件是“楼栋表”的pid等于“区域表”的id。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表（单位表）和s_region表（区域表），依据条件是“区域表”的pid等于“单位表”的id。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`: 连接t_bag表（背包维表）和d_people表（人员表），依据条件是“人员表”的bag等于“背包维表”的id。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 这部分是查询条件。首先通过TIMESTAMPDIFF()函数判断人员表中的moment与当前时间（now()）相差的分钟数是否小于5；然后判断背包维表中的name是否为“未背包”；同时要求区域表的区域名、单位表的单位名称以及楼栋表的楼栋名称都为“信智楼”。\n\n综上，这段SQL语句的目的是查询\"信智楼\"中，最近5分钟内出现且未背包的人员数量。"
    },
    {
        "query": "现在有多少人在体育馆？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='体育馆' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取当前在体育馆的人数。下面是各部分的解释：\n\n1. `SELECT 人数分布表.num AS 人数`: 这句是选择要查询的列。`num`是人数分布表中的一个字段，表示某个时间点的在场人数，这里将其作为结果集中的一列，命名为“人数”。\n\n2. `FROM a_people_spread_day_building AS 人数分布表`: 这句指定了数据所在的表和表的别名。这个查询使用的是`a_people_spread_day_building`表，将这个表简称为`人数分布表`。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这句是过滤条件，只选取过去5小时内（以小时为单位计算）的数据。`TIMESTAMPDIFF()`函数计算两个时间之间的差值，`now()`返回当前日期和时间。\n\n4. `AND 人数分布表.building_name = '体育馆'`: 这句是过滤条件，只选取体育馆的数据。\n\n5. `AND 人数分布表.region_name = '高新校区'`: 这句是过滤条件，只选取位于高新校区的数据。\n\n6. `AND 人数分布表.org_name = '中国科学技术大学'`: 这句是过滤条件，只选取属于中国科学技术大学的数据。\n\n7. `ORDER BY 人数分布表.stat_time DESC`: 这句是排序条件，按照统计时间的降序排列结果集，即最新的记录在最前面。\n\n8. `LIMIT 1`: 这句是限制结果集的大小，只返回一条记录。"
    },
    {
        "query": "食堂的监控安装情况",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中获取食堂监控摄像头的安装信息。以下是各部分解释：\n\n1. `select`: 选择要查询的列。\n2. `摄像头表.id as 摄像头编号`: 选择摄像头表的id字段并为其指定一个别名“摄像头编号”。\n3. `摄像头表.ip as IP地址`: 选择摄像头表的ip字段并为其指定一个别名“IP地址”。\n4. `房间表.room_name as 安装位置`: 选择房间表的room_name字段并为其指定一个别名“安装位置”。\n5. `from`: 指定要查询的表。这里有多个表连接在一起，包括摄像头表（s_camera）、房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）。\n6. `join`: 用于连接多个表。这里的on条件表示当一个摄像头（摄像头表）与一个房间（房间表）关联时，这个房间属于一个楼栋（楼栋表），而这个楼栋属于一个区域（区域表），这个区域又属于一个单位（单位表）。\n7. `where`: 设置查询条件。这里表示只查询位于“学生食堂”（楼栋表）、“高新校区”（区域表）和“中国科学技术大学”（单位表）的摄像头。\n8. `order by`: 设置查询结果的排序方式。这里表示按照摄像头的id字段升序排列。\n9. `limit`: 设置查询结果的最大数量。这里表示查询不超过1000条记录。"
    },
    {
        "query": "给出1号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 查询语句，用于计算 \"1号学生公寓\" 的摄像头数量。以下是各子句的解释：\n\n1. select count(*) as 摄像头数量: 选择计数函数 `count(*)` 作为结果集，并将结果命名为 \"摄像头数量\"。\n\n2. from s_camera as 摄像头表: 从名为 \"s_camera\" 的摄像头表中获取数据。\n\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id: 将摄像头表与房间表通过 `on 摄像头表.pid = 房间表.id` 条件进行连接，表示摄像头的 `pid`（可能代表设备编号）与房间的 `id` 是匹配的。\n\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 将房间表与楼栋表通过 `on 房间表.pid = 楼栋表.id` 条件进行连接，表示房间的 `pid` 与楼栋的 `id` 是匹配的。\n\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id: 将楼栋表与区域表通过 `on 楼栋表.pid = 区域表.id` 条件进行连接，表示楼栋的 `pid` 与区域的 `id` 是匹配的。\n\n6. join s_organization as 单位表 on 区域表.pid=单位表.id: 将区域表与单位表通过 `on 区域表.pid = 单位表.id` 条件进行连接，表示区域的 `pid` 与单位的 `id` 是匹配的。\n\n7. where 楼栋表.building_name='1号学生公寓': 设置筛选条件，只考虑楼栋名称为 \"1号学生公寓\" 的记录。\n\n8. and 区域表.region_name='高新校区': 继续设置筛选条件，只考虑区域名称为 \"高新校区\" 的记录。\n\n9. and 单位表.org_name='中国科学技术大学': 继续设置筛选条件，只考虑单位名称是 \"中国科学技术大学\" 的记录。\n\n最后，这段 SQL 语句会返回 \"1号学生公寓\" 的摄像头数量，即满足上述所有条件的摄像头的总数。"
    },
    {
        "query": "信智楼近期识别到的人员中，未背包的有多少？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询语句，用于计算在“信智楼”内、最近5分钟内未被识别到携带背包的人员数量。以下是各子句的解析：\n\n1. `select count(*) as 背双肩包的人数`: 选择计数的聚合函数COUNT，并给计数结果一个别名\"背双肩包的人数\"。\n\n2. `from d_people as 人员表`: 定义数据源为d_people表，并将其简写为\"人员表\"。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接s_camera表（摄像头信息表）与人员表，连接条件是人员表的摄像头ID等于摄像头表的ID。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表（房间信息表）与摄像头表，连接条件是摄像头表的房间ID等于房间表的ID。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表（楼栋信息表）与房间表，连接条件是房间表的楼栋ID等于楼栋表的ID。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表（区域信息表）与楼栋表，连接条件是楼栋表的所在区域ID等于区域表的ID。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表（单位信息表）与区域表，连接条件是区域表的所属单位ID等于单位表的ID。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`: 连接t_bag表（背包信息维表）与人员表，连接条件是人员表的背包ID等于背包维表的ID。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 限制条件，只选取最近5分钟内采集到的人员信息。其中，TIMESTAMPDIFF()函数计算时间差，即当前时间与人员表记录的时间差小于5分钟。\n\n10. `and 背包维表.name='未背包'`: 限制条件，只选取未背包的人员信息。\n\n11. `and 区域表.region_name='高新校区'`: 限制条件，只选取位于“高新校区”的人员信息。\n\n12. `and 单位表.org_name='中国科学技术大学'`: 限制条件，只选取属于“中国科学技术大学”的单位信息。\n\n13. `and 楼栋表.building_name='信智楼'`: 限制条件，只选取位于“信智楼”的楼栋信息。\n\n综合以上信息，该SQL查询语句的目的是计算在“信智楼”内、最近5分钟内未被识别到携带背包的人员数量。"
    },
    {
        "query": "给出运动场安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 查询语句，用于计算某特定体育场的摄像头数量。下面是对该查询语句各部分的解释：\n\n1. `count(*) as 摄像头数量`: 这是查询的目标，即计算摄像头的总数。`count(*)` 是 SQL 的聚合函数，用于计算某个字段（这里为空）的数量。\n\n2. `from s_camera as 摄像头表`: 定义查询的表格来源，这里是 `s_camera` 表，代表摄像机信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这行代码是联接 `s_room` 表（代表各个教室或场馆信息）与 `s_camera` 表。通过 `摄像头表.pid = 房间表.id` 这个条件将两个表关联起来。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 同样地，这行代码联接了 `s_building` 表（代表各个建筑信息）和前面两个表。这里的关联条件是 `房间表.pid = 楼栋表.id`。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 继续联接 `s_region` 表（代表各个地区信息）。这次的条件是 `楼栋表.pid = 区域表.id`。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 最后联接 `s_organization` 表（代表各个单位信息）。这个关联条件是 `区域表.pid = 单位表.id`。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这是查询的过滤条件，只有满足这些条件的摄像头记录才会被计算在内。\n\n综上所述，这条 SQL 语句会计算出在特定体育场的、位于特定校区和单位的所有摄像头的数量。"
    },
    {
        "query": "信智楼近期识别到的人员中，手中持物的有多少？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询语句，用于从数据库中统计\"信智楼\"（假设是一个地点名称）内手持物品的人员数量。\n\n各子句解释如下：\n\n1. select count(*) as 手里拿东西的人数: 计算符合条件的记录总数，作为结果集的一行。\n\n2. from d_people as 人员表: 从人员表（d_people）开始查询。\n\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 连接摄像头表（s_camera），条件是人员表中的摄像头ID等于摄像头表的ID。\n\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接房间表（s_room），条件是摄像头表的父ID等于房间表的ID。\n\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接楼栋表（s_building），条件是房间表的父ID等于楼栋表的ID。\n\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接区域表（s_region），条件是楼栋表的父ID等于区域表的ID。\n\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接单位表（s_organization），条件是区域表的父ID等于单位表的ID。\n\n8. join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id: 连接持物维表（t_hold_object），条件是人员表中的持物ID等于持物维表的ID。\n\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5: 限制条件，表示人员表中记录的创建时间距离当前时间的分钟数小于5分钟。\n\n10. and 持物维表.name='持物': 限制条件，表示持物维表中的名称字段值为'持物'。\n\n11. and 区域表.region_name='高新校区': 限制条件，表示区域表中的地区名称为'高新校区'。\n\n12. and 单位表.org_name='中国科学技术大学': 限制条件，表示单位表中的单位名称是'中国科学技术大学'。\n\n13. and 楼栋表.building_name='信智楼': 限制条件，表示楼栋表中的楼栋名称为'信智楼'。\n\n这段SQL查询语句的目的是查找并统计在\"信智楼\"的\"高新校区\"的\"中国科学技术大学\"范围内，最近5分钟内出现在摄像头中的手持物品的人员数量。"
    },
    {
        "query": "2号学科楼的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='2号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中查询特定时间范围内\"2号学科楼\"的人数。下面是对这个SQL语句的分解和解释：\n\n1. `select 人数分布表.num as 人数`：选择`num`字段作为查询结果的字段名，表示人数。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表名为`a_people_spread_day_building`，并将此表简称为“人数分布表”。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设定查询条件，只查询在5小时之内统计的数据。`TIMESTAMPDIFF()`函数用于计算两个时间之间的差值（以小时为单位），`now()`是获取当前时间。\n\n4. `and 人数分布表.building_name='2号学科楼'`：设置查询条件，只查询\"2号学科楼\"的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：设置查询条件，只查询位于\"高新校区\"的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置查询条件，只查询属于\"中国科学技术大学\"的数据。\n\n7. `order by 人数分布表.stat_time desc`：按照统计数据的时间进行降序排列，即最新的记录排在最前面。\n\n8. `limit 1`：限制查询结果为一条。"
    },
    {
        "query": "图书馆每天最少有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于查询图书馆（在这里是“图书教育中心”）在最近30天内每天的最低人数。下面是各个部分的解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选择最小的统计时间作为结果的一部分。\n\n2. `round(min(人数分布表.num)) as 平均人数`: 计算并四舍五入最小的人数值，作为结果的另一部分。\n\n3. `from a_people_spread_day_building as 人数分布表`: 从名为`a_people_spread_day_building`的表中获取数据，并将此表简称为\"人数分布表\"。\n\n4. `WHERE 人数分布表.building_name='图书教育中心'`: 限制结果只包含名为“图书教育中心”的建筑的数据。\n\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`: 限制结果只包括在最近的30天内收集到的数据。\n\n6. `and 人数分布表.region_name='高新校区'`: 进一步限制结果只包括“高新校区”的数据。\n\n7. `and 人数分布表.org_name='中国科学技术大学'`: 继续限制结果只包括属于“中国科学技术大学”的数据。\n\n8. `group by 人数分布表.stat_day`: 对每一天的数据进行分组，以便对每个日期进行统计。\n\n9. `order by min(人数分布表.stat_time) asc`: 对结果按照统计时间的升序排列，即按日期顺序排列。"
    },
    {
        "query": "近期识别到多少手中持物的行人？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于计算在特定时间和区域内，有多少个行人的手中持有物品。以下是各子句的解释：\n\n1. `select count(*) as 手里拿东西的人数`：选择计数函数count，对满足条件的记录进行统计，并将结果命名为\"手里拿东西的人数\"。\n\n2. `from d_people as 人员表`：指定数据源，即人员信息表（d_people），并将其简称为\"人员表\"。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：联接摄像头信息表（s_camera），连接条件是人员表的camera_id与摄像头表的id相等。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：联接房间信息表（s_room），连接条件是摄像头表的pid与房间表的id相等。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：联接楼栋信息表（s_building），连接条件是房间表的pid与楼栋表的id相等。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：联接区域信息表（s_region），连接条件是楼栋表的pid与区域表的id相等。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：联接单位信息表（s_organization），连接条件是区域表的pid与单位表的id相等。\n\n8. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`：联接持物信息表（t_hold_object），连接条件是人员表的hold_obj字段与持物维表的id字段相等。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：设置时间过滤条件，即人员表中的moment字段距离当前时间的分钟数小于5分钟。\n\n10. `and 持物维表.name='持物'`：设置持物过滤条件，即持物维表的name字段值为'持物'。\n\n11. `and 区域表.region_name='高新校区'`：设置区域过滤条件，即区域表中的region_name字段值为'高新校区'。\n\n12. `and 单位表.org_name='中国科学技术大学'`：设置单位过滤条件，即单位表中的org_name字段值为'中国科学技术大学'。"
    },
    {
        "query": "5号学生公寓摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='5号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算“5号学生公寓”的摄像头数量。以下是各个子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数COUNT(*)作为结果，并将返回值命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`: 从s_camera表（摄像头表）开始查询。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表（房间表），连接条件是摄像头表的主键（pid）等于房间表的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表（楼栋表），连接条件是房间表的pid字段等于楼栋表的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表（区域表），连接条件是楼栋表的pid字段等于区域表的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表（单位表），连接条件是区域表的pid字段等于单位表的id字段。\n\n7. `where 楼栋表.building_name='5号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求楼栋表的建筑名称（building_name）为“5号学生公寓”，区域表的行政区域名称（region_name）为“高新校区”，以及单位表的单位名称（org_name）为“中国科学技术大学”。\n\n这个查询将返回满足条件的摄像头数量。"
    },
    {
        "query": "行政与师生服务中心安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算\"行政与师生服务中心\"在中国科学技术大学高新校区内的摄像头数量。\n\n具体解释如下：\n\n1. `select count(*) as 摄像头数量`：这是查询的目标，即计算摄像头的总数。\n2. `from s_camera as 摄像头表`：定义摄像头数据所在的表（s_camera）和别名（摄像头表）。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表和房间表通过摄像头所在房间的id进行连接。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将房间表和楼栋表通过房间所在楼栋的id进行连接。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将楼栋表和区域表通过楼栋所在区域的id进行连接。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将区域表和单位表通过区域所属单位的id进行连接。\n7. `where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是查询的条件，即限制只查询在\"行政与师生服务中心\"、\"高新校区\"和中国科学技术大学的摄像头。\n\n这段查询语句的目的是为了获取满足条件的摄像头的总数。"
    },
    {
        "query": "找出师生活动中心一个月内，每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中查找师生活动中心（building_name为“师生活动中心”）在一个月内（DATEDIFF函数计算现在时间与stat_time之差小于30天）的最低每日人数。具体来说：\n\n1. `select min(人数分布表.stat_time) as 统计时间`：选择最小的stat_time作为统计时间。\n2. `round(min(人数分布表.num)) as 平均人数`：计算并保留小数位后的最小每日人数。\n3. `from a_people_spread_day_building as 人数分布表`：指定数据来源，即a_people_spread_day_building表，简称为“人数分布表”。\n4. `WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：设定筛选条件，只选取满足以下条件的数据：建筑名为“师生活动中心”，距离当前时间的日期差小于30天，地区名为“高新校区”，机构名为“中国科学技术大学”。\n5. `group by 人数分布表.stat_day`：按照stat_day进行分组，即将每天的记录视为一组。\n6. `order by min(人数分布表.stat_time) asc`：按最小统计时间（即最早的时间）升序排列。"
    },
    {
        "query": "有多少行人持物？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于统计特定时间内在特定地点和单位的行人中，有多少人手里拿着物品。以下是各部分解释：\n\n1. `SELECT count(*) as 手里拿东西的人数`：选择计数（COUNT）所有匹配的行，将结果命名为“手里拿东西的人数”。\n\n2. `FROM d_people as 人员表`：从人员表中获取数据，这是存储行人信息的数据表。\n\n3. `JOIN s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接摄像头表，通过人员表的摄像头ID与摄像头表的ID进行匹配。\n\n4. `JOIN s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表，通过摄像头表的房间ID与房间表的ID进行匹配。\n\n5. `JOIN s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表，通过房间表的楼栋ID与楼栋表的ID进行匹配。\n\n6. `JOIN s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表，通过楼栋表的区ID与区域表的ID进行匹配。\n\n7. `JOIN s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表，通过区域表的单位ID与单位表的ID进行匹配。\n\n8. `JOIN t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`：连接持物维表，通过人员表的持有物品ID与持物维表的ID进行匹配。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：设置条件，要求行人持有的物品时间不超过5分钟。\n\n10. `AND 持物维表.name='持物'`：进一步设置条件，要求行人持有的物品类型为\"持物\"。\n\n11. `AND 区域表.region_name='高新校区'`：设置条件，要求行人所在的区域为\"高新校区\"。\n\n12. `AND 单位表.org_name='中国科学技术大学'`：设置条件，要求行人所在的单位为\"中国科学技术大学\"。"
    },
    {
        "query": "2号学生公寓监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='2号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算\"2号学生公寓\"的监控设备（摄像头）数量。具体来说：\n\n1. `s_camera`是摄像头表，`s_room`是房间表，`s_building`是楼栋表，`s_region`是区域表，`s_organization`是单位表。\n\n2. 使用`JOIN`子句将5个表连接在一起，其中`s_camera`与`s_room`通过`pid`字段连接，`s_room`与`s_building`通过`pid`字段连接，`s_building`与`s_region`通过`pid`字段连接，`s_region`与`s_organization`通过`pid`字段连接。\n\n3. 使用`WHERE`子句设置筛选条件，即查找满足以下条件的监控设备数量：楼栋名称为\"2号学生公寓\"，区域名称为\"高新校区\"，单位名称为中国科学技术大学。\n\n4. 最后，使用`SELECT`子句选择摄像头的数量（即`COUNT(*)`），并将结果命名为\"摄像头数量\"。"
    },
    {
        "query": "有多少人不戴帽子？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='未戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段复杂的SQL查询语句，用于计算特定条件下的戴帽人数。以下是各子句的解释：\n\n1. `select count(*) as 戴帽子人数`: 选择计数函数（count）返回的结果，将其重命名为“戴帽子人数”。\n\n2. `from d_people as 人员表`: 指定数据源是d_people表，为了方便阅读，将之称为“人员表”。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 联接s_camera表（摄像头表），联接条件是人员表的camera_id等于摄像头表的id。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 联接s_room表（房间表），联接条件是摄像头表的pid等于房间表的id。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 联接s_building表（楼栋表），联接条件是房间表的pid等于楼栋表的id。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 联接s_region表（区域表），联接条件是楼栋表的pid等于区域表的id。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 联接s_organization表（单位表），联接条件是区域表的pid等于单位表的id。\n\n8. `join t_hat as 帽子维表 on 人员表.hat=帽子维表.id`: 联接t_hat表（帽子维表），联接条件是人员表的hat字段等于帽子维表的id字段。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 筛选条件，要求从人员表中的moment字段到当前时间（now()）的分钟差小于5。这个条件可能是用来确保数据的实时性。\n\n10. `and 帽子维表.name='未戴帽子'`: 筛选条件，要求帽子维表的name字段值为'未戴帽子'。\n\n11. `and 区域表.region_name='高新校区'`: 筛选条件，要求区域表的region_name字段值为'高新校区'。\n\n12. `and 单位表.org_name='中国科学技术大学'`: 筛选条件，要求单位表的org_name字段值为'中国科学技术大学'。\n\n综上所述，这段SQL查询语句的目的是计算在特定时间、地点和单位内，不戴帽子的人数。"
    },
    {
        "query": "当前信智楼有多少个房间里面有人？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'     and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一个SQL查询语句，用于计算\"信智楼\"里当前有人的房间数量。下面是各个子句的解释：\n\n1. `select count(房间表.room_name) 有人的房间数量`: 这是查询的主体，用于计算满足条件的房间数量。\n\n2. `from s_camera as 摄像头表`: 定义数据源，即摄像头信息表，用来获取摄像头的状态信息。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这行代码将摄像头表和房间表连接起来，通过摄像头ID（摄像头表的pid）与房间ID（房间表的id）相等这一条件进行关联。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这行代码将房间表和楼栋表连接起来，通过房间ID（房间表的pid）与楼栋ID（楼栋表的id）相等这一条件进行关联。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这行代码将楼栋表和区域表连接起来，通过楼栋ID（楼栋表的pid）与区域ID（区域表的id）相等这一条件进行关联。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这行代码将区域表和单位表连接起来，通过区域ID（区域表的pid）与单位ID（单位表的id）相等这一条件进行关联。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 这部分是查询条件，限定只查询位于\"高新校区\"、属于\"中国科学技术大学\"以及名为\"信智楼\"的信息。\n\n8. `and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 这部分进一步限制了查询范围，只返回在最近10分钟内（TIMESTAMPDIFF()函数计算时间差）有摄像头检测到人员的房间。"
    },
    {
        "query": "3号学生公寓安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='3号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 查询语句，用于计算满足特定条件的摄像头数量。下面是对这段 SQL 的解释：\n\n1. `SELECT`: 这是 SQL 命令的开始标志，表示从这个语句开始执行查询操作。\n2. `count(*) as 摄像头数量`: 使用 COUNT 函数对结果集（*）中的所有行进行计数，并将结果命名为 \"摄像头数量\"。\n3. `from`: 指定查询的数据来源，即数据表。\n4. `s_camera as 摄像头表`: 将数据表命名为 \"摄像头表\"，这个表存储了摄像头的详细信息。\n5. `join`: 连接其他数据表与摄像头表，基于两个表的共享列（PID）进行连接。\n6. `s_room as 房间表`: 将另一个数据表命名为 \"房间表\"，这个表存储了房间的相关信息，包括每个房间对应的 PID 值。\n7. `on 摄像头表.pid=房间表.id`: 定义连接条件，即摄像头表和房间表通过 PID 列建立联系。\n8. `join`: 继续连接更多的数据表，同样基于共享列（PID）进行连接。\n9. `s_building as 楼栋表`: 将第三个数据表命名为 \"楼栋表\"，这个表存储了楼栋的相关信息，包括每个楼栋对应的 PID 值。\n10. `on 房间表.pid=楼栋表.id`: 定义连接条件，即房间表和楼栋表通过 PID 列建立联系。\n11. `join`: 继续连接第四个数据表。\n12. `s_region as 区域表`: 将第四个数据表命名为 \"区域表\"，这个表存储了区域的相关信息，包括每个区域对应的 PID 值。\n13. `on 楼栋表.pid=区域表.id`: 定义连接条件，即楼栋表和区域表通过 PID 列建立联系。\n14. `join`: 继续连接第五个数据表。\n15. `s_organization as 单位表`: 将第五个数据表命名为 \"单位表\"，这个表存储了单位的详细信息，包括每个单位对应的 PID 值。\n16. `on 区域表.pid=单位表.id`: 定义连接条件，即区域表和单位表通过 PID 列建立联系。\n17. `where`: 设置查询条件，只返回满足这些条件的数据。\n18. `楼栋表.building_name='3号学生公寓'`: 查询条件之一，要求楼栋表的 building_name 字段等于指定的值，即 \"3号学生公寓\"。\n19. `and`: 连接多个查询条件，只有当所有条件都满足时，才返回相关数据。\n20. `区域表.region_name='高新校区'`: 查询条件之二，要求区域表的 region_name 字段等于指定的值，即 \"高新校区\"。\n21. `and`: 继续连接查询条件。\n22. `单位表.org_name='中国科学技术大学'`: 查询条件之三，要求单位表的 org_name 字段等于指定的值，即 \"中国科学技术大学\"。\n\n综上所述，这段 SQL 语句的目的是计算 \"3号学生公寓\"（位于 \"高新校区\"，属于 \"中国科学技术大学\"）安装的监控摄像头的数量。"
    },
    {
        "query": "近期内识别到的人员中，挎单肩包的有多少？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这个SQL查询语句是用来统计在近期（五分钟以内）内，位于高新校区的中国科学技术大学内的人员中，有多少人挎着单肩包。以下是各个子句的详细说明：\n\n1. `select count(*) as 背双肩包的人数`: 选择计数函数COUNT()，计算符合条件的挎单肩包的人数。\n\n2. `from d_people as 人员表`: 数据来源是d_people表，这里将它命名为“人员表”。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 通过人员表的camera_id与摄像头表的id进行连接操作，用于确定人员在特定摄像头下的活动情况。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头表的pid与房间表的id进行连接操作，用于获取摄像头所在的具体房间信息。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间表的pid与楼栋表的id进行连接操作，用于获取摄像头所在的具体楼栋信息。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋表的pid与区域表的id进行连接操作，用于获取摄像头所在的区域信息。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域表的pid与单位表的id进行连接操作，用于获取摄像头所在的具体单位名称信息。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`: 通过人员表的bag属性与背包维表的id进行连接操作，用于获取人员的背包类型信息。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包'`: 这部分条件用于筛选出最近五分钟内的人员活动记录，以及挎着单肩包的人员。\n\n10. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 最后这两部分条件用于限制数据范围，只选取高新校区的中国科学技术大学的数据。"
    },
    {
        "query": "统计图书馆每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于计算图书馆（在这里是图书教育中心）在特定时间段内的平均每天人数。以下是各部分的解释：\n\n1. select: 选择要返回的列和聚合函数结果。\n2. min(人数分布表.stat_time) as 统计时间: 返回统计时间（即记录生成的时间）的最小值。由于按日期分组后只有一条记录对应一个日期，因此最小时间就等于该日的统计时间。\n3. round(avg(人数分布表.num)) as 平均人数: 计算并四舍五入每天的人数平均值。avg()是平均函数，round()是四舍五入函数。\n4. from: 指定数据来源表。\n5. a_people_spread_day_building as 人数分布表: 给源数据表取别名，以便在后续查询中简化引用。\n6. WHERE: 设置筛选条件。这里筛选出以下条件的记录：建筑名为“图书教育中心”、记录生成时间与当前时间的差小于30天、地区名为“高新校区”、组织名为“中国科学技术大学”。\n7. DATEDIFF(now(), 人数分布表.stat_time) < 30: 计算当前时间与统计时间之间的天数差，小于30天则保留记录。\n8. and: 连接多个WHERE子句的条件。\n9. group by: 对某些列进行分组操作。这里按照统计日期（人数分布表.stat_day）进行分组。\n10. order by: 设置排序条件。这里按照统计时间（min(人数分布表.stat_time)）从小到大排序。\n11. asc: 表示升序排序。"
    },
    {
        "query": "体育馆安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算\"体育馆\"的摄像头数量。它从多个表（s_camera, s_room, s_building, s_region 和 s_organization）中连接并提取数据。\n\n1. `select count(*) as 摄像头数量`: 选择摄像头的计数作为结果。\n2. `from s_camera as 摄像头表`: 从摄像头表中开始查询。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将房间表与摄像头表通过摄像头表的pid和房间表的id进行关联。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将楼栋表与房间表通过房间表的pid和楼栋表的id进行关联。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将区域表与楼栋表通过楼栋表的pid和区域表的id进行关联。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将单位表与区域表通过区域表的pid和单位表的id进行关联。\n7. `where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 限制查询条件，只返回满足这些条件的数据。\n\n所以，这条SQL语句的目的是计算在特定条件下的\"体育馆\"安装了多少个摄像头。"
    },
    {
        "query": "统计食堂一个月内每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于统计食堂一个月内每天的平均人数。下面是各个部分的解释：\n\n1. select min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数: 选择最小统计时间和对应的平均每天人数。\n\n2. from a_people_spread_day_building as 人数分布表: 数据来源，表示从a_people_spread_day_building这张表（这里将其简称为“人数分布表”）中获取数据。\n\n3. WHERE 人数分布表.building_name='学生食堂': 筛选条件之一，只考虑building_name字段值为“学生食堂”的数据。\n\n4. AND DATEDIFF(now(), 人数分布表.stat_time) < 30: 筛选条件之二，仅保留统计时间与现在相隔小于30天的数据。\n\n5. AND 人数分布表.region_name='高新校区': 筛选条件之三，只考虑region_name字段值为“高新校区”的数据。\n\n6. AND 人数分布表.org_name='中国科学技术大学': 筛选条件之四，只考虑org_name字段值为“中国科学技术大学”的数据。\n\n7. group by 人数分布表.stat_day: 对日期进行分组，计算每一天的平均人数。\n\n8. order by min(人数分布表.stat_time) asc; : 对结果按照统计时间的先后顺序进行排序。"
    },
    {
        "query": "跨单肩包的人数",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段SQL查询语句，用于计算在“高新校区”的中国科学技术大学中，过去五分钟里使用单肩包的人数。下面是对这个SQL语句的分解和解释：\n\n1. `SELECT COUNT(*) AS 背双肩包的人数`：选择计数值作为结果，表示使用单肩包的人数。\n\n2. `FROM d_people AS 人员表`：从人员数据表（d_people）开始查询。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`：连接摄像头数据表（s_camera），条件是人员表中的摄像头ID与摄像头表的ID相等。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`：连接房间数据表（s_room），条件是摄像头表的父ID与房间表的ID相等。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`：连接楼栋数据表（s_building），条件是房间表的父ID与楼栋表的ID相等。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`：连接区域数据表（s_region），条件是楼栋表的父ID与区域表的ID相等。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`：连接单位数据表（s_organization），条件是区域表的父ID与单位表的ID相等。\n\n8. `JOIN t_bag AS 背包维表 ON 人员表.bag = 背包维表.id`：连接背包维表（t_bag），条件是人员表中的背包与背包维表的ID相等。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, NOW()) < 5 AND 背包维表.name = '单肩包' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`：设定查询条件，即在过去五分钟以内、在“高新校区”的中国科学技术大学内使用单肩包的人数。"
    },
    {
        "query": "老师食堂摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个表中获取特定条件下的摄像头数量。以下是各部分的具体解释：\n\n1. `count(*) as 摄像头数量`：使用聚合函数`count()`计算符合条件的摄像头数量。\n\n2. `from s_camera as 摄像头表`：指定要查询的摄像头数据所在的表，这里将表名缩写为“摄像头表”以便于理解。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：联接摄像头表和房间表，连接条件是摄像头表中的`pid`字段等于房间表中的`id`字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：联接房间表和楼栋表，连接条件是房间表中的`pid`字段等于楼栋表中的`id`字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：联接楼栋表和区域表，连接条件是楼栋表中的`pid`字段等于区域表中的`id`字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：联接区域表和单位表，连接条件是区域表中的`pid`字段等于单位表中的`id`字段。\n\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，要求楼栋名为“教工食堂”、所在区域为“高新校区”并且所属单位为“中国科学技术大学”。\n\n综上所述，这个SQL语句的目的是查询位于“教工食堂”（高新校区，中国科学技术大学）内的摄像头数量。"
    },
    {
        "query": "行政办公楼摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于统计\"行政办公楼\"的摄像头数量。以下是各部分解释：\n\n1. `SELECT count(*) as 摄像头数量`：这是查询的目标，即计算摄像头的总数。使用`count()`函数返回满足条件的摄像头记录数。\n\n2. `from s_camera as 摄像头表`：指定数据来源是名为`s_camera`的摄像头信息表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过摄像头表的`pid`字段与房间表的`id`字段关联，获取每个摄像头的所属房间信息。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：通过房间表的`pid`字段与楼栋表的`id`字段关联，获取每个摄像头的所属楼栋信息。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过楼栋表的`pid`字段与区域表的`id`字段关联，获取每个摄像头的所属区域信息。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：通过区域表的`pid`字段与单位表的`id`字段关联，获取每个摄像头的所属单位信息。\n\n7. `where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置筛选条件，只计算属于“行政办公楼”、位于“高新校区”并且归属单位为“中国科学技术大学”的摄像头的数量。"
    },
    {
        "query": "行政与师生服务中心人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政与师生服务中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定建筑（在这个例子中是“行政与师生服务中心”）的人数信息。下面是各部分的具体说明：\n\n1. select 人数分布表.num as 人数: 从数据表中选择名为\"num\"的列，并将它重命名为\"人数\"。\n\n2. from a_people_spread_day_building as 人数分布表: 指定数据来源是名为\"a_people_spread_day_building\"的数据表，并将其暂时称为\"人数分布表\"。\n\n3. WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5: 这个条件用于筛选出统计时间（\"stat_time\"）距离现在时间（now()）在5小时以内的记录。\n\n4. and 人数分布表.building_name='行政与师生服务中心': 过滤出\"building_name\"字段值为\"行政与师生服务中心\"的记录。\n\n5. and 人数分布表.region_name='高新校区': 过滤出\"region_name\"字段值为\"高新校区\"的记录。\n\n6. and 人数分布表.org_name='中国科学技术大学': 过滤出\"org_name\"字段值为\"中国科学技术大学\"的记录。\n\n7. order by 人数分布表.stat_time desc: 对结果按照\"stat_time\"字段的降序进行排序。\n\n8. limit 1: 限制返回的结果只有一条，即最近一次更新的人数信息。"
    },
    {
        "query": "教工食堂的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL语句从\"a_people_spread_day_building\"表中查询了名为\"教工食堂\"的建筑物中的人数。具体来说：\n\n1. `select 人数分布表.num as 人数`：选择字段\"num\"并命名为\"人数\"。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源于\"a_people_spread_day_building\"表，并将其简称为\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：过滤条件，仅选取统计时间与当前时间的时间差小于5小时的记录。\n\n4. `and 人数分布表.building_name='教工食堂'`：进一步筛选，只考虑建筑物名称为\"教工食堂\"的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：同上，仅保留地区名称为\"高新校区\"的记录。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：同上，只保留组织名称为\"中国科学技术大学\"的数据。\n\n7. `order by 人数分布表.stat_time desc`：按照统计时间的降序排列数据。\n\n8. `limit 1`：限制返回的结果集只有一条记录。\n\n综上，这个SQL语句的目的是获取过去5小时内，位于\"教工食堂\"且属于\"高新校区\"和\"中国科学技术大学\"的最后一条人员分布数据。"
    },
    {
        "query": "拍到人的室内摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段 SQL 语句，用于从数据库中查询满足特定条件的摄像头信息。以下是各部分解释：\n\n1. `select`: 选择需要返回的列。\n2. `摄像头表.id as 摄像头编号`: 选择摄像头表的 id 字段，并为其取名为“摄像头编号”。\n3. `房间表.room_name as 安装位置`: 选择房间表的 room_name 字段，并为其取名为“安装位置”。\n4. `楼栋表.building_name as 所属大楼`: 选择楼栋表的 building_name 字段，并为其取名为“所属大楼”。\n5. `from`: 从指定的数据表中获取数据。\n6. `s_camera as 摄像头表`: 摄像头表，对应摄像头的数据表。\n7. `join`: 连接其他数据表以获取更多相关信息。\n8. `s_room as 房间表`: 房间表，对应房间的数据表。\n9. `on`: 定义连接条件，即摄像头表与房间表的连接条件为摄像头表的 pid（表示属于某个房间）等于房间表的 id。\n10. `s_building as 楼栋表`: 楼栋表，对应楼栋的数据表。\n11. `on`: 定义连接条件，即房间表与楼栋表的连接条件为房间表的 pid（表示属于某个楼栋）等于楼栋表的 id。\n12. `s_region as 区域表`: 区域表，对应区域的数据表。\n13. `on`: 定义连接条件，即楼栋表与区域表的连接条件为楼栋表的 pid（表示属于某个区域）等于区域表的 id。\n14. `s_organization as 单位表`: 单位表，对应单位的（如学校、公司等）数据表。\n15. `on`: 定义连接条件，即区域表与单位表的连接条件为区域表的 pid（表示属于某个单位）等于单位表的 id。\n16. `where`: 设定查询条件。\n17. `摄像头表.inhouse = 1`: 筛选出内部使用的摄像头（即非室外摄像头）。\n18. `摄像头表.id in (...)`: 根据子查询结果筛选摄像头，子查询结果为最近10分钟内有人员出现的摄像头 id。\n19. `and`: 组合多个查询条件。\n20. `区域表.region_name='高新校区'`: 筛选出位于“高新校区”的摄像头。\n21. `单位表.org_name='中国科学技术大学'`: 筛选出属于“中国科学技术大学”的摄像头。\n22. `order by`: 设定排序条件。\n23. `摄像头表.id asc`: 按照摄像头 id 升序排列。\n24. `limit`: 设定返回结果的数量限制。\n25. `1000`: 返回最多1000条记录。"
    },
    {
        "query": "统计图书教育中心一个月内每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于统计图书教育中心一个月内每天最少人数的情况。以下是各部分的详细解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选择人数分布表中日期（stat_time）的最小值作为统计时间。\n\n2. `round(min(人数分布表.num)) as 平均人数`: 对人数分布表中的最小人数进行四舍五入取整，将其作为平均人数。\n\n3. `from a_people_spread_day_building as 人数分布表`: 从a_people_spread_day_building表中选择数据，该表用来存储人数分布信息。\n\n4. `WHERE 人数分布表.building_name='图书教育中心'`: 过滤出building_name字段值为“图书教育中心”的数据。\n\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`: 过滤出距离现在时间（now()函数返回当前时间）在30天以内的数据。\n\n6. `and 人数分布表.region_name='高新校区'`: 过滤出region_name字段值为“高新校区”的数据。\n\n7. `and 人数分布表.org_name='中国科学技术大学'`: 过滤出org_name字段值为“中国科学技术大学”的数据。\n\n8. `group by 人数分布表.stat_day`: 根据stat_day对数据进行分组。\n\n9. `order by min(人数分布表.stat_time) asc`: 按统计时间从小到大排序。"
    },
    {
        "query": "近期识别到多少手中未持物的行人？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于从多个关联表中统计某个条件下的行人人数。以下是各个子句的作用：\n\n1. select count(*) as 手里拿东西的人数：选择行数（即人数）作为查询结果。\n2. from d_people as 人员表：指定数据源为人员表。\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id：联接摄像头表，依据是摄像头ID在两个表中相等。\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id：联接房间表，依据是摄像头所在房间的ID在两个表中相等。\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：联接楼栋表，依据是房间所在的楼栋的ID在两个表中相等。\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id：联接区域表，依据是楼栋所在的区域的ID在两个表中相等。\n7. join s_organization as 单位表 on 区域表.pid=单位表.id：联接单位表，依据是区域所属单位的ID在两个表中相等。\n8. join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id：联接持物维表，依据是人员在某时刻持有的物品ID在两个表中相等。\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5：限制查询条件为最近5分钟内的数据。\n10. and 持物维表.name='未持物'：筛选出手中未持物的行人。\n11. and 区域表.region_name='高新校区'：筛选出位于高新校区的数据。\n12. and 单位表.org_name='中国科学技术大学'：筛选出属于中国科学技术大学的单位数据。\n\n这个查询语句的目的是计算最近5分钟内在中国科学技术大学高新校区内，手中未持物的行人的数量。"
    },
    {
        "query": "有人的室外摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 0 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从多个表中联合查询并筛选出特定条件下的数据。以下是各子句的解释：\n\n1. `select`: 定义需要返回的列。这里选择了四个表的字段：摄像头表（s_camera）、房间表（s_room）、楼栋表（s_building）和区域表（s_region）。\n\n2. `from`: 指定要查询的表。这里涉及到五个表的关联查询，分别是摄像头表（s_camera）、房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）。\n\n3. `join`: 联接多个表以获取所需数据。这里的连接方式是通过摄像头表（s_camera）分别与房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）通过`on`关键字进行关联。\n\n4. `where`: 设置查询条件。这里有四个过滤条件：摄像头表（s_camera）的`inhouse`字段等于0；摄像头表（s_camera）的`id`在另一个子查询结果中；区域表（s_region）的`region_name`字段值为'高新校区'；单位表（s_organization）的`org_name`字段值为'中国科学技术大学'。\n\n5. `subquery`: 在`where`子句中使用子查询。这个子查询的目的是获取距离现在时间小于10分钟的人员对应的摄像头ID（camera_id）。\n\n6. `order by`: 按照摄像头表（s_camera）的`id`字段升序排列查询结果。\n\n7. `limit`: 限制查询结果的行数为1000。\n\n综合以上分析，这段SQL查询语句的目的是查询安装在'高新校区'的'中国科学技术大学'范围内的室外摄像头，且这些摄像头距离现在时间小于10分钟内有人员出现。"
    },
    {
        "query": "2号学科楼现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='2号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中查询当前（时间戳距离现在小于5小时的）2号学科楼的人数信息。以下是各部分解释：\n\n1. select 人数分布表.num as 人数：选择num字段并将它重命名为“人数”。num是统计人数的变量。\n\n2. from a_people_spread_day_building as 人数分布表：指定查询的数据库表名（a_people_spread_day_building）和别名（人数分布表）。\n\n3. WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5：限定查询的时间范围，即距离现在（now()函数返回当前时间）5小时以内的数据。\n\n4. AND 人数分布表.building_name='2号学科楼'：进一步筛选出对应的建筑名称，即2号学科楼的信息。\n\n5. AND 人数分布表.region_name='高新校区'：按照区域名进行筛选，这里限定为高新校区的数据。\n\n6. AND 人数分布表.org_name='中国科学技术大学'：按照组织名进行筛选，这里限定为中国科学技术大学的数据。\n\n7. ORDER BY 人数分布表.stat_time DESC：按照统计时间（stat_time）降序排列，也就是按时间最近到最远的顺序排序。\n\n8. LIMIT 1：限制查询结果只返回一条记录，这里是获取最近一次统计的人数信息。"
    },
    {
        "query": "目前人数最多的是哪些大楼？",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num desc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中获取当前时间（即现在的时间）在过去五小时内的人数最多的10座大楼的信息。具体来说：\n\n1. `select 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数`: 选择两个列（分别是“建筑名称”和“人数”）作为查询结果中的字段名。\n2. `from a_people_spread_day_building as 人数分布表`: 从名为“a_people_spread_day_building”的表中选取数据，并将该表简称为“人数分布表”。\n3. `where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 过滤出满足“统计时间（即记录数据的时间）与现在的时间之差小于五小时”这一条件的数据。\n4. `and 人数分布表.region_name='高新校区'`: 过滤出满足“所在区域名称为‘高新校区’”这一条件的数据。\n5. `and 人数分布表.org_name='中国科学技术大学'`: 过滤出满足“组织名称为‘中国科学技术大学’”这一条件的数据。\n6. `order by 人数分布表.num desc`: 对筛选后的数据进行排序，按照人数从高到低排列。\n7. `limit 10`: 限制返回的结果集的大小，只返回前10条数据。"
    },
    {
        "query": "室内摄像头列表",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse=1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id  limit 1000;\n```\n这是一段SQL查询语句，用于从数据库中获取满足特定条件的室内摄像头信息。以下是各部分的主要功能说明：\n\n1. `select`: 指定需要查询的列和结果集的别名。这里选择了摄像头表的id作为摄像头编号，房间表的room_name作为安装位置，楼栋表的building_name作为所在大楼。\n\n2. `from`: 指定数据来源表，这里是三个关联表：s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）。\n\n3. `join`: 用于连接多个表并基于某个条件筛选数据。这里使用了四个连接操作符，分别是摄像头表与房间表通过pid字段连接，房间表与楼栋表通过pid字段连接，楼栋表与区域表通过pid字段连接，区域表与单位表通过pid字段连接。\n\n4. `where`: 设置查询条件，包括摄像头表中的inhouse字段等于1，表示只选择室内摄像头；区域表中的region_name字段等于'高新校区'；单位表中的org_name字段等于'中国科学技术大学'。\n\n5. `order by`: 对查询结果按照摄像头表的id进行排序。\n\n6. `limit`: 限制返回的数据条数，这里是1000条。\n\n综上，这段SQL语句的目的是从数据库中查询并返回满足特定条件的1000条室内摄像头信息，包括摄像头编号、安装位置和所在大楼。"
    },
    {
        "query": "现在有多少人在老师食堂？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中查询当前在教工食堂的人数。以下是各个部分的具体解释：\n\n1. `select 人数分布表.num as 人数`：选择名为`num`的列（代表人数）并为其设置别名`人数`，以便在结果集中使用。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定查询的数据来源，即名为`a_people_spread_day_building`的表，并将其临时命名为`人数分布表`。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置筛选条件，即统计时间（`stat_time`）距离当前时间（通过`now()`函数获取）的时间差（以小时为单位）小于5小时。\n\n4. `and 人数分布表.building_name='教工食堂'`：进一步限制筛选条件，要求`building_name`字段值为'教工食堂'。\n\n5. `and 人数分布表.region_name='高新校区'`：同上，要求`region_name`字段值为'高新校区'。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：同上，要求`org_name`字段值为'中国科学技术大学'。\n\n7. `order by 人数分布表.stat_time desc`：按统计时间降序排列查询结果，即最近的时间排在最前面。\n\n8. `limit 1`：限制查询结果为一条记录，即返回最新的一条人数信息。"
    },
    {
        "query": "找出人员聚集区",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num desc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中查找某个时间范围内（距离现在不超过5小时）的高新校区中国科学技术大学的人员聚集情况。以下是各部分的具体解释：\n\n1. select 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数：选择两个列作为查询结果，一个是建筑名称，另一个是人数。\n\n2. from a_people_spread_day_building as 人数分布表：指定数据来源表，名为a_people_spread_day_building，这里将其简称为人数分布表。\n\n3. where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5：设定查询条件，要求统计时间距当前时间的小时数小于5小时。\n\n4. and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'：进一步限制查询范围，要求数据所在的区域名称为“高新校区”，组织名称为“中国科学技术大学”。\n\n5. order by 人数分布表.num desc：按照人数多少降序排列查询结果，即人数越多的建筑排在最前面。\n\n6. limit 10：限定返回结果的条数为10条。"
    },
    {
        "query": "7号学生公寓安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询和计算“7号学生公寓”的摄像头数量。\n\n以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择摄像头的计数作为结果，并给这个结果起名为“摄像头数量”。\n2. `from s_camera as 摄像头表`：从摄像头表（s_camera）中取数。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表与房间表通过 PID（可能表示项目ID）关联起来，即一个摄像头属于一个房间。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将房间表与楼栋表通过 PID 关联起来，即一个房间属于一个楼栋。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将楼栋表与区域表通过 PID 关联起来，即一个楼栋属于一个区域。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将区域表与单位表通过 PID 关联起来，即一个区域属于一个单位。\n7. `where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设定查询条件，只查询满足这三个条件的数据。\n8. `;`：表示语句结束。"
    },
    {
        "query": "4号学生公寓人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='4号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。下面是该语句的详细分解：\n\n1. `select 人数分布表.num as 人数`：选择名为\"人数\"的列（这里指的是宿舍人数）作为查询结果中的字段。\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源，即“a_people_spread_day_building”表，并为其起个别名“人数分布表”。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置一个时间筛选条件，要求统计时间与当前时间的小时差小于5小时。\n4. `and 人数分布表.building_name='4号学生公寓'`：设置另一个条件，限制查询只返回“4号学生公寓”的数据。\n5. `and 人数分布表.region_name='高新校区'`：进一步限制查询范围至\"高新校区\"的数据。\n6. `and 人数分布表.org_name='中国科学技术大学'`：继续设置限制条件，只返回属于\"中国科学技术大学\"的数据。\n7. `order by 人数分布表.stat_time desc`：按照统计时间降序排列查询结果，最新的数据排在最前面。\n8. `limit 1`：限定查询结果只返回一条记录。"
    },
    {
        "query": "有人的室内摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段 SQL 查询语句，用于从数据库中筛选并获取特定的摄像头的数据信息。下面是对该 SQL 的详细解析：\n\n1. `select`：开始选择需要获取的数据列。\n2. `摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`：指定返回的数据列的别名。\n3. `from`：确定数据来源表。\n4. `s_camera as 摄像头表`：摄像头主表，存放摄像头的基本信息。\n5. `join`：连接其他相关表以获取更多信息。这里连接了四个表：\n   - `s_room as 房间表`：摄像头所在房间的信息表。\n   - `s_building as 楼栋表`：摄像头所在楼栋的信息表。\n   - `s_region as 区域表`：摄像头所在区域的信息表。\n   - `s_organization as 单位表`：摄像头所在单位的信息表。\n6. `on`：指定连接条件。例如，`摄像头表.pid=房间表.id`表示摄像头与房间通过 PID 字段关联。\n7. `where`：设置筛选条件。这里筛选的条件是：\n   - `摄像头表.inhouse = 1`：表示摄像头是在室内的（不在室外的）。\n   - `摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：表示摄像头的 ID 在最近 10 分钟内有与人相关的活动（即有人出现在摄像头范围内）。\n   - `区域表.region_name='高新校区'`：表示摄像头的所在区域是高新校区。\n   - `单位表.org_name='中国科学技术大学'`：表示摄像头的所在单位是中国科学技术大学。\n8. `order by`：按照指定的字段进行排序。这里是按照摄像头表的 ID 升序排列。\n9. `limit`：限制返回结果的数量。这里是限制返回最多 1000 条记录。"
    },
    {
        "query": "8号学生公寓现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='8号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取“8号学生公寓”当前的人数信息。具体解释如下：\n\n1. `select 人数分布表.num as 人数`: 选择字段\"人数\"（即表中记录的人数）；\n2. `from a_people_spread_day_building as 人数分布表`: 从名为\"a_people_spread_day_building\"的表格中选取数据，这里将其简称为\"人数分布表\"；\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这部分条件设置了一个时间限制，只选取过去5小时内的数据；\n4. `and 人数分布表.building_name='8号学生公寓'`: 只选取\"8号学生公寓\"的数据；\n5. `and 人数分布表.region_name='高新校区'`: 只选取\"高新校区\"的数据；\n6. `and 人数分布表.org_name='中国科学技术大学'`: 只选取\"中国科学技术大学\"的数据；\n7. `order by 人数分布表.stat_time desc`: 对选出的数据进行时间降序排序，最近的数据排在最前面；\n8. `limit 1`: 只返回符合条件的数据中的一条，也就是最接近当前时间的一条数据。"
    },
    {
        "query": "目前有多少个房间是没人的？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'      and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一个复杂的SQL查询语句，用于计算某个特定区域的某个单位的房间内没有人的数量。以下是该查询的详细解释：\n\n1. `SELECT count(房间表.room_name)`: 这里选择的是对`room_name`（即房间名称）进行计数操作。\n2. `from s_camera as 摄像头表`: 从`s_camera`表开始查询，这个表用来存储摄像头的数据。\n3. `JOIN s_room as 房间表 ON 摄像头表.pid = 房间表.id`: 将`s_room`表与`s_camera`表通过`id`字段连接起来，`s_room`表存放了房间的信息。\n4. `JOIN s_building as 楼栋表 ON 房间表.pid = 楼栋表.id`: 将`s_building`表与`s_room`表通过`id`字段连接起来，`s_building`表存放了楼栋的信息。\n5. `JOIN s_region as 区域表 ON 楼栋表.pid = 区域表.id`: 将`s_region`表与`s_building`表通过`id`字段连接起来，`s_region`表存放了区域的信息。\n6. `JOIN s_organization as 单位表 ON 区域表.pid = 单位表.id`: 将`s_organization`表与`s_region`表通过`id`字段连接起来，`s_organization`表存放了单位的信息。\n7. `WHERE 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 限制条件是区域名为“高新校区”且单位为“中国科学技术大学”。\n8. `AND 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 这个子查询用于找出过去10分钟内有人进入过的摄像头ID，然后从原始的摄像头表中排除这些ID。也就是说，这里的逻辑是找出过去10分钟内没有人进入过的房间。"
    },
    {
        "query": "查一下图教中心的所有摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这个SQL查询语句的目的是查找并返回位于“图书教育中心”、“高新校区”和“中国科学技术大学”的摄像头的详细信息。具体来说，它会从摄像头表（s_camera）、房间表（s_room）、楼栋表（s_building）、区域表（s_region）和单位表（s_organization）中获取数据。\n\n以下是各表的简要说明以及它们之间的联系：\n\n1. 摄像头表（s_camera）：存储摄像头的各种信息，例如摄像头ID、IP地址等。\n2. 房间表（s_room）：存储房间的各种信息，例如房间名、所属楼栋ID等。\n3. 楼栋表（s_building）：存储楼栋的各种信息，例如楼栋名、所属区域ID等。\n4. 区域表（s_region）：存储区域的各种信息，例如区域名、所属单位ID等。\n5. 单位表（s_organization）：存储单位的各种信息，例如单位名称等。\n\n在WHERE子句中，我们使用AND连接条件来筛选出满足特定条件的摄像头，即摄像头所在的楼栋名为“图书教育中心”，所在区域名为“高新校区”，所在单位名为“中国科学技术大学”。ORDER BY子句用于按照摄像头ID升序排列结果，LIMIT子句用于限制查询结果的条数（这里设为1000条）。"
    },
    {
        "query": "图书馆哪些地方安装了摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这个SQL查询语句是用来从数据库中获取特定位置的摄像头信息。具体解释如下：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 这部分是选择要查询的列，包括摄像头的ID（用于识别每个摄像头）、IP地址（摄像头网络连接的信息）以及安装摄像头的房间名称。\n\n2. `from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分是定义查询的数据来源和关联条件。这里通过JOIN操作将四个表（s_camera摄像头表，s_room房间表，s_building楼栋表，s_region区域表，s_organization单位表）按照一定的关系连接在一起。\n\n3. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是设定查询条件。只有满足这三个条件的摄像头信息才会被查询出来，即位于“图书教育中心”的“高新校区”的“中国科学技术大学”的摄像头信息。\n\n4. `order by 摄像头表.id asc limit 1000`: 这部分是设置查询结果的排序方式（按摄像头ID升序排列）和返回记录数（限制在1000条）。"
    },
    {
        "query": "1号学生公寓监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算1号学生公寓的监控数量。下面是各子句的解释：\n\n1. `SELECT`: 选择需要返回的结果。\n2. `count(*) as 摄像头数量`: 计算摄像头的数量，并将结果命名为\"摄像头数量\"。\n3. `FROM s_camera as 摄像头表`: 从s_camera表（摄像头表）开始查询。\n4. `JOIN s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表（房间表），连接条件是摄像头表中的pid等于房间表中的id。\n5. `JOIN s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表（楼栋表），连接条件是房间表中的pid等于楼栋表中的id。\n6. `JOIN s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表（区域表），连接条件是楼栋表中的pid等于区域表中的id。\n7. `JOIN s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表（单位表），连接条件是区域表中的pid等于单位表中的id。\n8. `WHERE 楼栋表.building_name='1号学生公寓' AND 区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学'`: 过滤条件，只返回满足这些条件的数据，即要求楼栋名为“1号学生公寓”，区域名为“高新校区”，单位名为“中国科学技术大学”的数据。\n\n这个查询语句的目的是统计1号学生公寓内的监控数量，通过连接多个表来获取相关信息。"
    },
    {
        "query": "信智楼近期内识别到的人员中，背双肩包的有多少？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于从多个表中获取数据并计算符合条件的人员数量。以下是各个子句的解释：\n\n1. `SELECT count(*) as 背双肩包的人数`: 返回满足条件的背双肩包的人数。\n2. `FROM d_people as 人员表`: 指定人员表作为查询的主表。\n3. `JOIN s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接摄像头表，根据摄像头ID匹配人员与摄像头的关系。\n4. `JOIN s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接房间表，根据房间ID匹配摄像头与房间的关系。\n5. `JOIN s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接楼栋表，根据楼栋ID匹配房间与楼栋的关系。\n6. `JOIN s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接区域表，根据区域ID匹配楼栋与区域的关系。\n7. `JOIN s_organization as 单位表 on 区域表.pid=单位表.id`: 连接单位表，根据单位ID匹配区域与单位的关系。\n8. `JOIN t_bag as 背包维表 on 人员表.bag=背包维表.id`: 连接背包维表，根据背包ID匹配人员和背包的关系。\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='背包'`: 设置查询条件，限制时间差（即查询最近五分钟内的记录）和只返回背双肩包的人员。\n10. `AND 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 设置查询范围，限制查询在“高新校区”的“中国科学技术大学”的“信智楼”范围内进行。"
    },
    {
        "query": "2号学生公寓现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='2号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于查询\"2号学生公寓\"在最近的5小时内的人数。以下是各个部分的具体解释：\n\n1. `SELECT`：选择要获取的数据字段，这里选择了`num`字段作为人数。\n\n2. `FROM`：指定数据来源表，这里是`a_people_spread_day_building`表，也被称为`人数分布表`。\n\n3. `WHERE`：设置查询条件，这里的条件是时间差（现在时间减去统计时间）小于5小时，并且公寓名称、校区和机构名称分别等于'2号学生公寓'、'高新校区'和'中国科学技术大学'。\n\n4. `ORDER BY`：按照统计时间的降序排列结果，也就是最近的时间排在最前面。\n\n5. `LIMIT`：限制返回的记录条数，这里只返回一条记录。"
    },
    {
        "query": "图书馆每天平均有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取图书馆（假设是“图书教育中心”）在近30天内每天的平均人数。下面是各部分解释：\n\n1. select min(人数分布表.stat_time) as 统计时间: 选择最小统计时间作为“统计时间”字段。\n\n2. round(avg(人数分布表.num)) as 平均人数: 计算每天的人数平均值，并四舍五入到整数。\n\n3. from a_people_spread_day_building as 人数分布表: 从名为“a_people_spread_day_building”的表中读取数据，并将其称为“人数分布表”。\n\n4. WHERE 人数分布表.building_name='图书教育中心': 筛选出“图书教育中心”的数据。\n\n5. and DATEDIFF(now(), 人数分布表.stat_time) < 30: 限制查询结果在最近30天内。DATEDIFF是计算两个日期之间差异的函数，这里表示从当前时间（now()）减去统计数据的时间（人数分布表的stat_time）小于30天。\n\n6. and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学': 进一步筛选出“高新校区”且隶属于“中国科学技术大学”的数据。\n\n7. group by 人数分布表.stat_day: 按统计日期（人数分布表的stat_day）进行分组，以便计算每日的平均人数。\n\n8. order by min(人数分布表.stat_time) asc;: 按照统计时间从小到大排序（升序），即先列出最早的日期。"
    },
    {
        "query": "图书馆安装了哪些摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一段SQL查询语句，用于从数据库中获取特定条件下安装的摄像头信息。以下是各子句的解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 这是查询的字段，包括摄像头的ID（摄像头编号）、IP地址和安装位置（房间名）。\n\n2. `from s_camera as 摄像头表`: 从名为`s_camera`的表中获取数据，这里将这个表称为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 使用`join`子句将摄像头表与房间表连接在一起，条件是摄像头表的`pid`字段等于房间表的`id`字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 同样地，将摄像头表和楼栋表连接在一起，条件是房间表的`pid`字段等于楼栋表的`id`字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将摄像头表和区域表连接在一起，条件是楼栋表的`pid`字段等于区域表的`id`字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将摄像头表和单位表连接在一起，条件是区域表的`pid`字段等于单位表的`id`字段。\n\n7. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，即要求摄像头位于指定的\"图书教育中心\"大楼，属于\"高新校区\"区域，且属于\"中国科学技术大学\"单位。\n\n8. `order by 摄像头表.id asc limit 1000`: 对查询结果进行排序，按照摄像头编号从小到大（ASC升序）排列，并限制返回的结果数为1000条。"
    },
    {
        "query": "图书教育中心安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从数据库中获取满足特定条件的数据。以下是各部分的具体含义：\n\n1. `SELECT`: 选择需要返回的数据字段。在这个例子中，选择了计数函数 `COUNT(*)` 和一个别名 `摄像头数量`。这个查询将返回满足条件的前述摄像头的总数。\n\n2. `COUNT(*)`: 这是一个聚合函数，用于计算满足条件的行数。这里用来统计摄像头的数量。\n\n3. `as 摄像头表`: 为摄像头所在的表格（s_camera）起个别名 `摄像头表`，方便后续连接操作和简化查询语句。\n\n4. `JOIN`: 连接操作，用于结合多个表格的信息。这里连接了五个表格：摄像头表、房间表、楼栋表、区域表和单位表。\n\n5. `ON`: 定义连接条件。例如 `摄像头表.pid = 房间表.id`，表示摄像头的父级ID（设备所属房间的ID）与房间表的ID相等。其他连接条件同理。\n\n6. `WHERE`: 过滤条件。只有满足这些条件的摄像头才会被计算在内。在这个例子中，要求楼栋名为“图书教育中心”，区域为“高新校区”，单位为“中国科学技术大学”。\n\n7. `AND`: 逻辑运算符，表示所有条件必须同时满足。\n\n8. 最后括号内的信息是一些额外注释，帮助理解查询的逻辑关系。"
    },
    {
        "query": "3号学生公寓的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='3号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取3号学生公寓的人数。下面是对该SQL语句的分解和解释：\n\n1. `select 人数分布表.num as 人数`: 这部分代码选择名为`num`的字段作为查询结果，并将这个字段重命名为\"人数\"。\n\n2. `from a_people_spread_day_building as 人数分布表`: 这部分代码指定了查询数据的来源，即`a_people_spread_day_building`表（别名设为“人数分布表”）。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这部分代码是查询条件，用于筛选出距离现在（即查询时刻）不超过5小时的数据。\n\n4. `and 人数分布表.building_name='3号学生公寓'`: 这部分代码是查询条件的一部分，要求被查询的`building_name`字段值等于\"3号学生公寓\"。\n\n5. `and 人数分布表.region_name='高新校区'`: 这部分代码是查询条件的一部分，要求被查询的`region_name`字段值等于\"高新校区\"。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 这部分代码是查询条件的一部分，要求被查询的`org_name`字段值等于\"中国科学技术大学\"。\n\n7. `order by 人数分布表.stat_time desc`: 这部分代码对查询结果按照`stat_time`字段的值降序排列。\n\n8. `limit 1`: 这部分代码限制查询结果只返回一条记录（即最近一次统计的3号学生公寓人数）。"
    },
    {
        "query": "体育场总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于查询某个特定体育场的摄像头数量。下面是对这段SQL的详细解释：\n\n1. `select count(*) as 摄像头数量`：选择函数count(*)，计算所有摄像头的数量。这里将返回的数量命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：指定数据来源表为s_camera，将其简称为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，根据条件“摄像头表.pid = 房间表.id”进行连接。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，根据条件“房间表.pid = 楼栋表.id”进行连接。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，根据条件“楼栋表.pid = 区域表.id”进行连接。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，根据条件“区域表.pid = 单位表.id”进行连接。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，要求楼栋表中的建筑名称必须是“体育场”，区域表中的地区名称必须是“高新校区”，单位表中的单位名称必须是“中国科学技术大学”。满足这些条件的摄像头数量才会被计算出来。"
    },
    {
        "query": "科大高新校区有哪些建筑？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称 from s_building as 楼栋表  join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid = 单位表.id where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'  order by 楼栋表.building_name asc;\n```\n这是一个SQL查询语句，用于从数据库中获取中国科学技术大学高新校区的所有楼宇名称。以下是各个部分的解释：\n\n1. `select 楼栋表.building_name as 楼宇名称`：选择\"楼宇名称\"这一列作为查询结果，其中\"building_name\"是楼栋表中的字段，\"楼宇名称\"是为方便理解而添加的别名。\n\n2. `from s_building as 楼栋表`：指定数据来源表名为\"s_building\"，这里将其简称为\"楼栋表\"。\n\n3. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：表示将\"s_region\"表（简称\"区域表\"）与\"s_building\"表进行连接，连接条件是\"楼栋表\"的\"pid\"字段等于\"区域表\"的\"id\"字段。\n\n4. `join s_organization as 单位表 on 区域表.pid = 单位表.id`：同样表示将另一个表\"s_organization\"（简称\"单位表\"）与前面两个表进行连接，连接条件是\"区域表\"的\"pid\"字段等于\"单位表\"的\"id\"字段。\n\n5. `where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'`：设置查询条件，即\"单位表\"的\"org_name\"字段值等于\"中国科学技术大学\"，同时\"区域表\"的\"region_name\"字段值等于\"高新校区\"。\n\n6. `order by 楼栋表.building_name asc`：对查询结果按照\"楼宇名称\"字段的升序排列。"
    },
    {
        "query": "当前有人的房间有多少？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'      and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一段 SQL 语句，用于计算满足特定条件的“有人”的房间数量。以下是各部分解释：\n\n1. `count(房间表.room_name)`: 这是要查询的列（即结果），表示\"有人\"的房间数量。\n\n2. `from s_camera as 摄像头表`: 从名为 \"s_camera\" 的表中开始查询，这里将其简称为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将名为 \"s_room\" 的表（房间表）连接到摄像头表，连接条件是摄像头表的 pid 等于房间表的 id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将名为 \"s_building\" 的表（楼栋表）连接到房间表，连接条件是房间表的 pid 等于楼栋表的 id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将名为 \"s_region\" 的表（区域表）连接到楼栋表，连接条件是楼栋表的 pid 等于区域表的 id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将名为 \"s_organization\" 的表（单位表）连接到区域表，连接条件是区域表的 pid 等于单位表的 id。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是筛选条件，只选择 \"高新校区\" 和 \"中国科学技术大学\" 的数据。\n\n8. `and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`: 这部分是另一个筛选条件，只选择在过去 10 分钟内有人出现过的摄像头。"
    },
    {
        "query": "现在有多少人在8号学生公寓？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='8号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取8号学生公寓当前的人数信息。下面是对该SQL的详细解释：\n\n1. `SELECT 人数分布表.num AS 人数`：选择名为\"num\"的字段作为\"人数\"字段返回。\n\n2. `FROM a_people_spread_day_building AS 人数分布表`：指定数据源，也就是表格名称为 \"a_people_spread_day_building\"，并为其起个别名为 \"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置筛选条件，即统计时间（stat_time）距离现在（now()）的时间差小于5小时。\n\n4. `AND 人数分布表.building_name = '8号学生公寓'`：设置筛选条件，即建筑名称等于“8号学生公寓”。\n\n5. `AND 人数分布表.region_name = '高新校区'`：设置筛选条件，即所在地区（region_name）等于“高新校区”。\n\n6. `AND 人数分布表.org_name = '中国科学技术大学'`：设置筛选条件，即所属机构（org_name）等于“中国科学技术大学”。\n\n7. `ORDER BY 人数分布表.stat_time DESC`：按统计时间（stat_time）降序排列结果集。\n\n8. `LIMIT 1`：限制返回的结果集数量，即只返回一条记录。"
    },
    {
        "query": "给出行政办公楼的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算\"行政办公楼\"的摄像头数量。以下是各部分的具体含义：\n\n1. `select count(*) as 摄像头数量`：选择函数`count()`来计算摄像头的总数，并将结果命名为`摄像头数量`。\n\n2. `from s_camera as 摄像头表`：指定数据来源是摄像头信息表（s_camera），这里将其简称为摄像头表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过摄像头表的`pid`字段与房间表的`id`字段建立连接，表示每个摄像头都与一个房间关联。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：通过房间表的`pid`字段与楼栋表的`id`字段建立连接，表示每个房间都属于一个楼栋。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：通过楼栋表的`pid`字段与区域表的`id`字段建立连接，表示每个楼栋都属于一个区域。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：通过区域表的`pid`字段与单位表的`id`字段建立连接，表示每个区域都属于一个单位。\n\n7. `where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即只计算属于“行政办公楼”、位于“高新校区”且属于“中国科学技术大学”的摄像头数量。\n\n这个查询语句通过多表联接和过滤条件，最终得到行政办公楼的摄像头数量。"
    },
    {
        "query": "有多少行人背双肩包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于从多个表中获取数据并计算满足特定条件的行人背双肩包的数量。下面是对这个SQL语句的分解和解释：\n\n1. `SELECT COUNT(*) AS 背双肩包的人数`：选择计数函数COUNT()来计算满足条件的行人数量。\n\n2. `FROM d_people AS 人员表`：指定要查询的主表，即“人员”表（d_people）。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`：联接摄像头表（s_camera），通过摄像头ID（camera_id）将摄像头与行人关联起来。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`：联接房间表（s_room），通过摄像头所属房间的ID（pid）将房间信息关联进来。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`：联接楼栋表（s_building），通过房间所属楼栋的ID（pid）将楼栋信息关联进来。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`：联接区域表（s_region），通过楼栋所属区域的ID（pid）将区域信息关联进来。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`：联接单位表（s_organization），通过区域所属单位的ID（pid）将单位信息关联进来。\n\n8. `JOIN t_bag AS 背包维表 ON 人员表.bag = 背包维表.id`：联接背包维表（t_bag），通过行人所背背包的ID（bag）将背包信息关联进来。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, NOW()) < 5 AND 背包维表.name = '背包' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`：设置查询条件，包括时间条件（最近5分钟内的数据）、背包类型条件（必须为背包）、区域和单位条件（位于高新校区的中国科学技术大学）。\n\n综合以上，这个SQL语句的目的是查询并计算在高新校区的中国科学技术大学内，过去5分钟内背着双肩包的行人数量。"
    },
    {
        "query": "监控密度最高的是哪栋楼？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) desc  limit 1;\n```\n这是一个SQL查询语句，用于查询摄像头分布信息。下面是对这个SQL语句的解释：\n\n1. select 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量：选择“楼宇名称”和摄像头数量作为查询结果的两列；\n2. from s_camera as 摄像头表：指定摄像头数据所在的表格（s_camera）；\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id：将摄像头表与房间表通过摄像头的pid和房间的id进行关联；\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：将房间表与楼栋表通过房间的pid和楼栋的id进行关联；\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id：将楼栋表与区域表通过楼栋的pid和区域的id进行关联；\n6. join s_organization as 单位表 on 区域表.pid=单位表.id：将区域表与单位表通过区域的pid和单位表的id进行关联；\n7. where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'：设置查询条件，只查询位于“高新校区”且属于“中国科学技术大学”的数据；\n8. group by 楼栋表.building_name：按照楼栋名称对数据进行分组；\n9. order by count(*) desc：按照每组数据的摄像头数量进行降序排序；\n10. limit 1：限制查询结果的数量，只返回一条记录。"
    },
    {
        "query": "当前有多少个房间里面没有人？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'      and 摄像头表.id not in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一个复杂的SQL查询语句，用于计算某个特定区域的某个单位的房间内目前是否有人。以下是该查询的各个部分及功能解释：\n\n1. `s_camera as 摄像头表`：摄像头表，存储摄像头的数据。\n2. `s_room as 房间表`：房间表，存储房间的数据。\n3. `s_building as 楼栋表`：楼栋表，存储楼栋的数据。\n4. `s_region as 区域表`：区域表，存储区域的数据。\n5. `s_organization as 单位表`：单位表，存储单位的数据。\n6. `d_people as 人员表`：人员表，存储人员进出记录的数据。\n\n查询逻辑如下：\n\n- 从摄像头表、房间表、楼栋表、区域表和单位表中获取数据。\n- 通过连接操作将这些表关联在一起，条件是摄像头表的pid（摄像头所在楼栋ID）等于房间表和楼栋表的id，以及楼栋表的pid等于区域表和单位表的id。\n- 设置查询条件为：区域名为“高新校区”且单位为“中国科学技术大学”。\n- 通过子查询排除当前无人所在的摄像头（即在过去10分钟内没有人员在该摄像头下出现）。\n- 最后，统计满足条件的房间内的人数（实际上是通过计算房间总数来实现的）。"
    },
    {
        "query": "8号学生公寓监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='8号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句是用来统计\"8号学生公寓\"监控摄像头的数量。首先，从多个关联的表格（s_camera, s_room, s_building, s_region, s_organization）中获取信息。然后，通过WHERE子句筛选出满足特定条件的数据：楼栋名称为\"8号学生公寓\"，区域名称为\"高新校区\"，单位名称为中国科学技术大学。最后，使用COUNT函数计算符合上述条件的摄像头数量。"
    },
    {
        "query": "很少发生异常行为的房间有哪些？",
        "script": "```sql\nselect 房间表.room_name as 房间名称, count(*) as 5天内异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where DATEDIFF(now(),异常行为表.moment) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' GROUP by 房间表.room_name  ORDER by count(*) asc  limit 10;\n```\n这是一个SQL查询语句，用于统计在过去5天内（从当前时间向前推5天）在指定区域和单位内（即高新校区和中国科学技术大学）没有发生过异常行为的房间数量。具体来说：\n\n1. `d_abnormal_behavior`：异常行为表，存储了发生的各种异常行为记录；\n2. `s_camera`：摄像头表，存储了各个摄像头的设备信息；\n3. `s_room`：房间表，存储了各个房间的详细信息；\n4. `s_building`：楼栋表，存储了各个楼栋的信息；\n5. `s_region`：区域表，存储了各个区域的详细信息；\n6. `s_organization`：单位表，存储了各个单位的组织结构信息。\n\n以下是这个查询的具体步骤和目的：\n\n1. `SELECT room_name AS 房间名称, COUNT(*) AS 5天内异常行为数量`：选择要查询的字段（房间名称和异常行为数量）；\n2. `FROM d_abnormal_behavior AS 异常行为表`：确定查询的主表，也就是异常行为表；\n3. `JOIN s_camera AS 摄像头表 ON 异常行为表.camera_id = 摄像头表.id`：连接摄像头表和异常行为表，通过摄像头ID进行关联；\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`：连接房间表和摄像头表，通过摄像头所属的房间ID进行关联；\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`：连接楼栋表和房间表，通过房间所属的楼栋ID进行关联；\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`：连接区域表和楼栋表，通过楼栋所属的区域ID进行关联；\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`：连接单位表和区域表，通过区域所属的单位ID进行关联；\n8. `WHERE DATEDIFF(NOW(), 异常行为表.moment) < 5 AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`：设置查询条件，包括时间限制（最近5天内的数据）、区域和单位限制（只考虑高新校区和中国科学技术大学的数据）；\n9. `GROUP BY 房间表.room_name`：按照房间名称对结果进行分组，以便计算每个房间的异常行为数量；\n10. `ORDER BY COUNT(*) ASC`：按照异常行为数量的升序排列结果，使得异常行为较少的房间排在前列；\n11. `LIMIT 10`：限制返回的结果数量，仅显示排名前10的房间。\n\n这个查询的最终目的是找出过去5天内异常行为较少的10个房间，以便对这些房间进行关注和管理。"
    },
    {
        "query": "体育场摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算某个特定体育场的摄像头数量。以下是各子句的详细解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数（count）作为查询结果，返回满足条件的摄像头总数。\n\n2. `from s_camera as 摄像头表`：指定摄像头数据的来源表，名为s_camera，在此表中查找数据。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，基于摄像头表中的pid与房间表中的id相等这一条件。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，基于房间表中的pid与楼栋表中的id相等这一条件。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，基于楼栋表中的pid与区域表中的id相等这一条件。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，基于区域表中的pid与单位表中的id相等这一条件。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，要求楼栋名称、区域名称和单位名称分别等于指定的值。\n\n通过这个查询，可以计算出特定体育场（例如，高新校区的中国科学技术大学体育场）的摄像头数量。"
    },
    {
        "query": "体育馆摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算某个特定条件下的摄像头数量。下面是各子句的详细解释：\n\n1. `select count(*) as 摄像头数量`: 选择函数COUNT(*)来计算满足条件的摄像头的总数，并将这个数量命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`: 声明数据来源是摄像头表（s_camera），并为其取别名\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和房间表（s_room），连接条件是摄像头表的pid等于房间表的id。同时，为房间表取别名\"房间表\"。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接摄像头表和楼栋表（s_building），连接条件是房间表的pid等于楼栋表的id。同时，为楼栋表取别名\"楼栋表\"。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接摄像头表和区域表（s_region），连接条件是楼栋表的pid等于区域表的id。同时，为区域表取别名\"区域表\"。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接摄像头表和单位表（s_organization），连接条件是区域表的pid等于单位表的id。同时，为单位表取别名\"单位表\"。\n\n7. `where 楼栋表.building_name='体育馆' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设定查询条件，即要求楼栋名称为\"体育馆\"，区域名称为\"高新校区\"，单位名称是\"中国科学技术大学\"。\n\n综合以上各子句，这段SQL查询语句的意思是：从摄像头表出发，通过房间表、楼栋表、区域表和单位表的多表连接操作，查找出满足特定条件的摄像头数量（即位于\"体育馆\"、\"高新校区\"和中国科学技术大学的摄像头数量）。"
    },
    {
        "query": "行政与师生服务中心安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于查询\"行政与师生服务中心\"的监控设备（摄像头）数量。\n\n以下是各个子句的解释：\n1. select count(*) as 摄像头数量: 选择计数函数count(*)作为返回的结果，将结果命名为\"摄像头数量\"；\n2. from s_camera as 摄像头表: 从s_camera表开始查询，将此表简称为\"摄像头表\"；\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接摄像头表和房间表，连接条件是摄像头表的pid字段等于房间表的id字段；\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接房间表和楼栋表，连接条件是房间表的pid字段等于楼栋表的id字段；\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接楼栋表和区域表，连接条件是楼栋表的pid字段等于区域表的id字段；\n6. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接区域表和单位表，连接条件是区域表的pid字段等于单位表的id字段；\n7. where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学': 设置查询条件，即楼栋表的building_name字段值为\"行政与师生服务中心\"、区域表的region_name字段值为\"高新校区\"和单位表的org_name字段值为\"中国科学技术大学\"；\n8. 单位表.org_name='中国科学技术大学': 在查询条件中指定了单位表的信息，可能是在这个数据库中，不同的摄像头可能被分配给不同的单位（例如，学校内的不同学院或部门），为了更准确地找到位于\"行政与师生服务中心\"的摄像头，需要限定摄像头的所属单位为中国科学技术大学。"
    },
    {
        "query": "近几天各种类型异常行为数量有多少？",
        "script": "```sql\nselect 异常类型表.name as 异常行为类型, count(*) as 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by 异常类型表.name asc;\n```\n这是一段SQL查询语句，用于查询近7天内（即从查询时刻往前推7天）在“高新校区”的“中国科学技术大学”内，各类型异常行为的数量。下面是各子句的解释：\n\n1. select 异常类型表.name as 异常行为类型, count(*) as 异常行为数量：选择要查询的列，即异常行为类型和对应的数量。\n\n2. from d_abnormal_behavior as 异常行为表：指定数据源，即存储异常行为数据的表。\n\n3. join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id：连接摄像头表和异常行为表，通过camera_id字段建立关联。\n\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id：连接房间表和摄像头表，通过pid字段建立关联。\n\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：连接楼栋表和房间表，通过pid字段建立关联。\n\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id：连接区域表和楼栋表，通过pid字段建立关联。\n\n7. join s_organization as 单位表 on 区域表.pid=单位表.id：连接单位表和区域表，通过pid字段建立关联。\n\n8. join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id：连接异常类型表和异常行为表，通过abnormal_type字段建立关联。\n\n9. where DATEDIFF(now(), 异常行为表.moment) < 7：设置查询的时间条件，即查询最近7天内的数据。\n\n10. and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'：设置空间条件，即只查询特定校区和单位的异常行为数据。\n\n11. group by 异常类型表.name：按异常行为类型进行分组，以便计算每种类型的异常行为数量。\n\n12. order by 异常类型表.name asc：按照异常行为类型名称进行升序排列，使得结果按照类型顺序展示。"
    },
    {
        "query": "师生活动中心总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于查询师生活动中心（假设这是一个具体的建筑名称）的摄像头数量。具体来说：\n\n1. `s_camera`、`s_room`、`s_building`、`s_region`和`s_organization`是五个数据库中的表格，分别用来存储摄像头信息、房间信息、楼栋信息、区域信息和单位信息。\n\n2. `count(*) as 摄像头数量`用于计算摄像头的总数。\n\n3. `from`后面的部分是联接操作，通过摄像头的pid（假设是摄像头在数据表中的唯一标识）与其他四个表进行联接，以便获取摄像头的位置和单位等信息。\n\n4. `where`条件筛选出满足特定条件的摄像头。在这个例子中，要求摄像头的楼栋名称是“师生活动中心”，所在的区域是“高新校区”，并且所属的单位名称为“中国科学技术大学”。\n\n5. 最后，通过这个查询语句我们可以得到符合条件的摄像头数量。"
    },
    {
        "query": "体育场安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算体育场（具体是指中国科技大学高新校区的体育场）安装的摄像头数量。以下是各子句的解读：\n\n1. select count(*) as 摄像头数量: 从数据库中查询摄像头的数量。count(*)表示统计所有摄像头的数目。\n2. from s_camera as 摄像头表: 指定摄像头的数据表名为s_camera。\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id: 将摄像头表与房间表进行关联（join），条件是摄像头表的pid字段等于房间表的id字段。\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 将房间表与楼栋表进行关联，条件是房间表的pid字段等于楼栋表的id字段。\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id: 将楼栋表与区域表进行关联，条件是楼栋表的pid字段等于区域表的id字段。\n6. join s_organization as 单位表 on 区域表.pid=单位表.id: 将区域表与单位表进行关联，条件是区域表的pid字段等于单位表的id字段。\n7. where 楼栋表.building_name='体育场': 根据建筑名称过滤结果，仅保留\"体育场\"的数据。\n8. and 区域表.region_name='高新校区': 根据区域名称过滤结果，仅保留\"高新校区\"的数据。\n9. and 单位表.org_name='中国科学技术大学': 根据单位名称过滤结果，仅保留\"中国科学技术大学\"的数据。\n\n通过以上查询，可以获取到位于中国科技大学高新校区体育场的摄像头数量。"
    },
    {
        "query": "告诉我现在2号学科楼有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='2号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前（时间接近现在）在“2号学科楼”的中国科学技术大学高新校区的人数。\n\n以下是这个SQL语句的各个部分解释：\n\n1. `select 人数分布表.num as 人数`：选择名为\"num\"的列并将其作为\"人数\"进行返回。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源，即\"a_people_spread_day_building\"表，并为其取别名\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：筛选条件，限制结果只包括过去5小时内的数据。\n\n4. `and 人数分布表.building_name='2号学科楼'`：筛选条件，要求建筑名称为“2号学科楼”。\n\n5. `and 人数分布表.region_name='高新校区'`：筛选条件，要求地区名称为“高新校区”。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：筛选条件，要求组织名称为“中国科学技术大学”。\n\n7. `order by 人数分布表.stat_time desc`：对数据进行排序，按统计时间降序排列。\n\n8. `limit 1`：限制返回的数据条数，这里只返回一条记录。"
    },
    {
        "query": "5号学生公寓监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='5号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于统计“5号学生公寓”的监控数量。以下是各个部分的作用：\n\n1. `select count(*) as 摄像头数量`：选择摄像头的总数作为结果。\n2. `from s_camera as 摄像头表`：定义源表（摄像头表），用于存储摄像头信息。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表与房间表进行连接（JOIN），连接条件是摄像头表中的pid等于房间表中的id。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将房间表与楼栋表进行连接，连接条件是房间表中的pid等于楼栋表中的id。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将楼栋表与区域表进行连接，连接条件是楼栋表中的pid等于区域表中的id。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将区域表与单位表进行连接，连接条件是区域表中的pid等于单位表中的id。\n7. `where 楼栋表.building_name='5号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即只返回满足这些条件的数据。\n\n通过以上步骤，该SQL语句实现了从摄像头表、房间表、楼栋表、区域表和单位表中筛选出5号学生公寓的监控数量。"
    },
    {
        "query": "现在有多少人在4号学生公寓？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='4号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一段SQL查询语句，用于从数据库中获取某个特定时间范围内（例如过去5小时内）在“4号学生公寓”的居住者数量。以下是该语句各部分的简要说明：\n\n1. `select 人数分布表.num as 人数`：选择名为\"num\"的字段并为其指定别名\"人数\"，这将返回查询结果中的数字数据。\n\n2. `from a_people_spread_day_building as 人数分布表`：声明查询的数据来源是名为\"a_people_spread_day_building\"的表，并将此表临时命名为\"人数分布表\"，以便在查询中使用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：限制查询只返回在过去5小时内记录的数据。这个条件通过使用`TIMESTAMPDIFF`函数计算当前时间和记录时间之间的小时数来实现。\n\n4. `and 人数分布表.building_name='4号学生公寓'`：筛选出仅来自\"4号学生公寓\"的记录。\n\n5. `and 人数分布表.region_name='高新校区'`：进一步筛选出仅来自\"高新校区\"的记录。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：再次筛选出仅来自\"中国科学技术大学\"的记录。\n\n7. `order by 人数分布表.stat_time desc limit 1`：将查询结果按照记录时间的降序排列，并仅返回一条记录。"
    },
    {
        "query": "师生服务中心安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询某个特定地点（这里是“行政与师生服务中心”）的监控设备（摄像头）数量。以下是这段 SQL 语句的详细解析：\n\n1. `select count(*) as 摄像头数量`：这是 SQL 的 SELECT 语句，用于计算满足后续 WHERE 条件的摄像头数量。这里使用 COUNT 函数和星号 (*) 来获取所有摄像头的数量。\n\n2. `from s_camera as 摄像头表`：定义查询数据的来源，即摄像头信息表（s_camera），并为其取名为 \"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是一个 JOIN 子句，用于将摄像头表（s_camera）与房间表（s_room）进行连接。连接条件是摄像头表的 pid（摄像头所在房间编号）等于房间表的 id（房间编号）。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：又是一个 JOIN 子句，将房间表（s_room）与楼栋表（s_building）进行连接。连接条件是房间表的 pid（所属楼栋编号）等于楼栋表的 id（楼栋编号）。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：又一个 JOIN 子句，将楼栋表（s_building）与区域表（s_region）进行连接。连接条件是楼栋表的 pid（所属区域编号）等于区域表的 id（区域编号）。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：最后一个 JOIN 子句，将区域表（s_region）与单位表（s_organization）进行连接。连接条件是区域表的 pid（所属单位编号）等于单位表的 id（单位编号）。\n\n7. `where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：WHERE 子句，用于过滤满足以下条件的摄像头数据：所在的楼栋名称为 \"行政与师生服务中心\"，所在的区域名称为 \"高新校区\"，所属的单位名称为 \"中国科学技术大学\"。\n\n综上所述，这段 SQL 语句的目的是查询位于 \"行政与师生服务中心\"、\"高新校区\" 和 \"中国科学技术大学\" 的监控摄像头数量。"
    },
    {
        "query": "信智楼近期识别到的人员中，手中未持物的有多少？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于从数据库中获取信智楼近期识别到的手中未持物的人员数量。以下是各个部分的具体解释：\n\n1. `select count(*) as 手里拿东西的人数`: 这句代码用于返回满足条件的记录数，这里即为手中未持物的人员数量。\n\n2. `from d_people as 人员表`: 这是数据表别名，`d_people`是人员表，后续出现的`人员表`是对应的别名。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 这是连接条件，将人员表和摄像头表通过摄像头的ID进行关联。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这也是一个连接条件，将摄像头表和房间表通过房间的ID进行关联。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 同样是一个连接条件，将房间表和楼栋表通过楼栋的ID进行关联。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 又是一个连接条件，将楼栋表和区域表通过区域的ID进行关联。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 最后一个连接条件，将区域表和单位表通过单位的ID进行关联。\n\n8. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`: 这个连接条件将人员表与持物维表关联起来，根据人员持有的物品（持物维表的id）进行查询。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 这个条件表示查询的时间范围限制，即最近5分钟内的数据。\n\n10. `and 持物维表.name='未持物'`: 这个条件表示查询的是手中未持物的人员。\n\n11. `and 区域表.region_name='高新校区'`: 这个条件表示只查询位于高新校区的信智楼的数据。\n\n12. `and 单位表.org_name='中国科学技术大学'`: 这个条件表示只查询属于中国科学技术大学的信智楼的数据。\n\n13. `and 楼栋表.building_name='信智楼'`: 这个条件表示只查询名为“信智楼”的数据。\n\n综上所述，这个查询语句的目的是从多个表中筛选出信智楼、高新校区、中国科学技术大学范围内，最近5分钟内识别到的手中未持物的人员数量。"
    },
    {
        "query": "找出近期从食堂出发的10条行人轨迹",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='学生食堂' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一段SQL查询语句，用于从数据库中查找最近从食堂出发的10条行人轨迹。以下是各部分的具体解释：\n\n1. `select`: 选择要查询的数据列。\n\n2. `start_time`, `end_time`, `name`, `camera_id_list`: 要查询的列名。\n\n3. `a_people_trail as 行人轨迹表`: 定义一个别名“行人轨迹表”，用于表示数据源是a_people_trail这张表。\n\n4. `s_camera as 摄像头表`: 定义一个别名“摄像头表”，用于表示数据源是s_camera这张表。\n\n5. `join`: 用于连接两张或多张表的子句。\n\n6. `on`: 用于指定连接条件的子句。\n\n7. `where`: 用于过滤数据的子句。\n\n8. `order by`: 用于排序数据的子句。\n\n9. `desc`: 用于指定按降序排序。\n\n10. `limit`: 用于限制返回结果的数量。\n\n整句翻译成中文大致为：“从‘行人轨迹表’中选择轨迹起始时间、轨迹结束时间、虚拟人名和经过的摄像头Id；将行人轨迹表与摄像头表进行连接操作，连接条件为行人轨迹表中的开始摄像头Id等于摄像头表中的Id；然后按照轨迹起始时间的倒序排列，返回最近的数据，限制结果为10条。”"
    },
    {
        "query": "高新校区室外人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='高新校区室外' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。以下是各部分解释：\n\n1. `select 人数分布表.num as 人数`：选择字段，即从\"人数分布表\"中选择名为\"num\"的列，并将结果重命名为\"人数\"。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表，即以\"a_people_spread_day_building\"作为数据表，并将其简写为\"人数分布表\"。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：过滤条件，即时间戳差（当前时间-统计时间）小于5小时的数据。\n\n4. `and 人数分布表.building_name='高新校区室外'`：过滤条件，即建筑名称等于\"高新校区室外\"。\n\n5. `and 人数分布表.region_name='高新校区'`：过滤条件，即地区名称等于\"高新校区\"。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：过滤条件，即组织名称等于\"中国科学技术大学\"。\n\n7. `order by 人数分布表.stat_time desc`：排序依据，即按照统计时间降序排列。\n\n8. `limit 1`：限制返回结果数量，即仅返回一条数据。"
    },
    {
        "query": "告诉我现在4号学生公寓有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='4号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中获取特定时间范围内\"4号学生公寓\"的人数信息。下面是对这个SQL语句的详细解读：\n\n1. `select 人数分布表.num as 人数`: 这部分是选择数据的部分，`num`表示的是具体的人数，`as 人数`是将这个字段重命名为“人数”。\n\n2. `from a_people_spread_day_building as 人数分布表`: 这部分是从哪个表中读取数据。`a_people_spread_day_building`是数据表的名称，`as 人数分布表`是为了在后续的操作中更方便地引用该表。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这部分是筛选条件。`TIMESTAMPDIFF()`函数计算两个日期之间的差值，这里用来判断统计时间与当前时间的小时差是否小于5小时。\n\n4. `and 人数分布表.building_name='4号学生公寓'`: 这部分是筛选条件的一部分，要求被查询的建筑物名称为“4号学生公寓”。\n\n5. `and 人数分布表.region_name='高新校区'`: 这部分同样是筛选条件，要求被查询的区域名称为“高新校区”。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 这部分同样作为筛选条件，要求被查询的组织名称为“中国科学技术大学”。\n\n7. `order by 人数分布表.stat_time desc limit 1`: 这部分是数据的排序和限制返回结果的数量。`order by ... desc`表示按照某个字段降序排列；`limit 1`表示只返回满足条件的最近的一条记录。\n\n所以，整个SQL语句的意思是查询并返回在近5小时内，位于\"4号学生公寓\"、\"高新校区\"且属于\"中国科学技术大学\"的人数信息，并且按照统计时间的降序排列，只返回最近的一条记录。"
    },
    {
        "query": "教师食堂安装了多少个监控？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于统计教师食堂的监控设备（摄像头）的数量。以下是各子句的解释：\n\n1. `SELECT count(*) as 摄像头数量`: 选择计数函数COUNT()，对满足条件的摄像头表中的记录进行统计，并将结果命名为\"摄像头数量\"。\n\n2. `FROM s_camera as 摄像头表`: 指定数据来源是摄像头表（s_camera）。\n\n3. `JOIN s_room as 房间表 ON 摄像头表.pid=房间表.id`: 连接摄像头表与房间表，连接条件是摄像头表的pid字段等于房间表的id字段。\n\n4. `JOIN s_building as 楼栋表 ON 房间表.pid=楼栋表.id`: 连接房间表与楼栋表，连接条件是房间表的pid字段等于楼栋表的id字段。\n\n5. `JOIN s_region as 区域表 ON 楼栋表.pid=区域表.id`: 连接楼栋表与区域表，连接条件是楼栋表的pid字段等于区域表的id字段。\n\n6. `JOIN s_organization as 单位表 ON 区域表.pid=单位表.id`: 连接区域表与单位表，连接条件是区域表的pid字段等于单位表的id字段。\n\n7. `WHERE 楼栋表.building_name='教工食堂' AND 区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求楼栋名称是\"教工食堂\"，所在区域是\"高新校区\"，所属单位是\"中国科学技术大学\"。\n\n这个查询语句的目的是统计位于特定位置（教工食堂）和特定校区（高新校区）的中国科学技术大学的监控设备（摄像头）的数量。"
    },
    {
        "query": "有多少人持物？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于统计在指定时间内、特定地点和单位的所有人中有多少人手里拿着特定物品。下面是对这个查询语句的详细解释：\n\n1. `select count(*) as 手里拿东西的人数`: 返回满足条件的总人数。\n2. `from d_people as 人员表`: 人员表是一个临时表或数据库中的实际表格，存储了每个人的信息。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 这一步将摄像头表与人员表关联起来，基于每个摄像头对应的ID进行匹配。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这一步将房间表与摄像头表关联起来，基于每个摄像头的房间ID进行匹配。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这一步将楼栋表与房间表关联起来，基于每个房间所属的楼栋ID进行匹配。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这一步将区域表与楼栋表关联起来，基于每个楼栋所属的区域ID进行匹配。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这一步将单位表与区域表关联起来，基于每个区域所属的单位ID进行匹配。\n8. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`: 这一步将持物维表与人员表关联起来，基于每个人持有的物品ID进行匹配。\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 这个条件表示只统计过去5分钟内的情况。\n10. `and 持物维表.name='持物'`: 这个条件表示只有当持有物品的名称是“持物”时，才计入统计。\n11. `and 区域表.region_name='高新校区'`: 这个条件表示只统计位于“高新校区”的情况。\n12. `and 单位表.org_name='中国科学技术大学'`: 这个条件表示只统计属于“中国科学技术大学”的情况。"
    },
    {
        "query": "5分钟内识别到多少不戴眼镜的行人？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='未戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段 SQL 语言查询代码，用于在5分钟时间内，统计某个区域（这里是高新校区）的中国科学技术大学中，未戴眼镜的行人数量。以下是各子句的解释：\n\n1. `SELECT COUNT(*) AS 戴眼镜人数`: 选择计数函数，计算满足条件的行数；\n2. `FROM d_people AS 人员表`: 指定数据源，这里是人员信息表；\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`: 连接摄像头表，通过 camera_id 字段关联；\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 连接房间表，通过 pid 字段关联；\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 连接楼栋表，通过 pid 字段关联；\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 连接区域表，通过 pid 字段关联；\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 连接单位表，通过 pid 字段关联；\n8. `JOIN t_glasses AS 眼镜维表 ON 人员表.glasses = 眼镜维表.id`: 连接眼镜维表，通过 glasses 字段关联；\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, NOW()) < 5 AND 眼镜维表.name = '未戴眼镜'`: 设置条件，限制时间范围在5分钟内，且要求眼镜状态为“未戴眼镜”；\n10. `AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 进一步限制查询结果的区域和单位。"
    },
    {
        "query": "统计师生活动中心每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='师生活动中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中检索特定建筑物（师生活动中心）在特定时间段内（过去30天内）的平均每日人数。以下是各部分解释：\n\n1. `SELECT min(人数分布表.stat_time) as 统计时间`: 选择每天的起始时间（即最小的时间戳）作为统计时间。\n2. `ROUND(AVG(人数分布表.num)) as 平均人数`: 计算并保留两位小数的人数的平均值。\n3. `FROM a_people_spread_day_building as 人数分布表`: 从名为a_people_spread_day_building的数据表中获取数据，并将其简称为“人数分布表”。\n4. `WHERE 人数分布表.building_name='师生活动中心' AND DATEDIFF(now(), 人数分布表.stat_time) < 30 AND 人数分布表.region_name='高新校区' AND 人数分布表.org_name='中国科学技术大学'`: 设置筛选条件，只选取建筑物名称为“师生活动中心”、区域名称为“高新校区”、机构名称为“中国科学技术大学”且距离当前时间（now()函数返回当前日期和时间）不超过30天的数据。\n5. `GROUP BY 人数分布表.stat_day`: 根据统计日期（stat_day）对数据进行分组，以便计算每日平均人数。\n6. `ORDER BY min(人数分布表.stat_time) ASC`: 按统计时间的最小值升序排列结果。"
    },
    {
        "query": "操场监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算操场监控摄像头的数量。这个查询通过多个表的连接（JOIN）来实现，涉及到的表格包括s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。\n\n具体解释如下：\n\n1. `select count(*) as 摄像头数量`：选择摄像头的数量作为结果。\n2. `from s_camera as 摄像头表`：指定摄像头表作为查询的起点。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，条件是摄像头表的pid（设备ID）等于房间表的id。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，条件是房间表的pid等于楼栋表的id。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，条件是楼栋表的pid等于区域表的id。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，条件是区域表的pid等于单位表的id。\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，只返回满足这些条件的记录，即：楼栋名称为“体育场”，所在区域为“高新校区”，且所属单位为“中国科学技术大学”的摄像头数量。\n\n执行此查询后，将返回操场上监控摄像头的数量。"
    },
    {
        "query": "安装摄像头最少的建筑是哪栋？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) asc limit 1;\n```\n这是一个SQL查询语句，用于从多个表中获取并统计摄像头安装在指定区域的最低建筑（楼）的信息。以下是各子句的简要说明：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量`: 选择要查询的列，包括楼宇名称和摄像头数量；\n2. `from s_camera as 摄像头表`: 从摄像头表（s_camera）中开始查询数据；\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 通过摄像头表的pid与房间表的id关联两个表的数据；\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 通过房间表的pid与楼栋表的id关联两个表的数据；\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 通过楼栋表的pid与区域表的id关联两个表的数据；\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 通过区域表的pid与单位表的id关联两个表的数据；\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 对查询结果设置条件限制，只返回属于“高新校区”并且隶属于“中国科学技术大学”的区域的数据；\n8. `group by 楼栋表.building_name`: 对查询结果按照楼宇名称进行分组，以便计算每个楼宇的摄像头数量；\n9. `order by count(*) asc limit 1`: 对每组数据进行排序（按摄像头数量升序排列），并取前1名（即摄像头数量最少的1栋建筑）。"
    },
    {
        "query": "6号学生公寓的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='6号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。以下是该语句的主要部分及其功能：\n\n1. `SELECT 人数分布表.num AS 人数`：选择字段`num`作为结果中的\"人数\"列。\n2. `FROM a_people_spread_day_building AS 人数分布表`：指定数据来源，即`a_people_spread_day_building`表，并将该表简称为`人数分布表`。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置时间条件，即从当前时间（now()函数返回）回溯5小时以内的时间范围内的数据。\n4. `and 人数分布表.building_name='6号学生公寓'`：设置建筑物名称条件，即只选择名为'6号学生公寓'的建筑物数据。\n5. `and 人数分布表.region_name='高新校区'`：设置区域名称条件，即只选择位于'高新校区'的建筑物数据。\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置机构名称条件，即只选择属于'中国科学技术大学'的建筑物数据。\n7. `ORDER BY 人数分布表.stat_time DESC`：按照统计时间（stat_time）降序排列数据。\n8. `LIMIT 1`：限制返回的结果集大小为1条记录。\n\n综上，该查询将返回满足上述条件的最近一次统计数据，即5小时以内、来自'6号学生公寓'、位于'高新校区'且属于'中国科学技术大学'的数据，并仅返回1条记录。"
    },
    {
        "query": "信智楼近期识别到多少未背包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n该SQL语句用于查询某个时间范围内（例如最近5分钟）位于特定区域（如“高新校区”）的中国科学技术大学的“信智楼”中，没有携带双肩包的行人人数。具体来说，这个查询涉及多个表的连接和过滤条件。以下是对每个表格及其作用的简单说明：\n\n1. `d_people`: 人员表，包含行人的信息，如相机ID、抓拍时刻等。\n2. `s_camera`: 摄像头表，包含摄像头的ID和其他相关信息。\n3. `s_room`: 房间表，存储了房间的ID和相关信息。\n4. `s_building`: 楼栋表，存储了楼栋的ID和相关信息。\n5. `s_region`: 区域表，存储了区域的信息。\n6. `s_organization`: 单位表，存储了单位的信息。\n7. `t_bag`: 背包维表，存储了背包类型的信息。\n\n查询过程中，通过连接这些表格并根据给定的过滤条件，最终计算出满足条件的未背包行人数量。"
    },
    {
        "query": "拍到人的室内摄像头有哪些？",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中获取数据。下面是各子句的详细解释：\n\n1. select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼: 选择摄像头表、房间表和楼栋表中的部分列作为查询结果。\n\n2. from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid=单位表.id: 通过连接（JOIN）操作将摄像头表与房间表、楼栋表、区域表和单位表结合在一起，以便在查询中包含这些表的数据。\n\n3. where 摄像头表.inhouse = 1 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10): 筛选出室内摄像头（摄像头表.inhouse = 1）且距离现在时间不超过10分钟的摄像头ID（camera_id）。\n\n4. and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学': 限制查询结果为“高新校区”和“中国科学技术大学”范围内的摄像头信息。\n\n5. order by 摄像头表.id asc limit 1000: 对查询结果按照摄像头编号（摄像头表.id）升序排列，并返回前1000条记录。"
    },
    {
        "query": "2号学生公寓的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='2号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于查询\"2号学生公寓\"在特定条件下的最近一次统计的人数信息。以下是各部分详细解析：\n\n1. `select 人数分布表.num as 人数`：选择字段`num`并命名为`人数`，表示要查询的人数数据。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表为`a_people_spread_day_building`（假设该表记录了各建筑内人员的统计数据），并将此表简称为`人数分布表`以便于后续使用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：限制条件，表示只查询过去五小时内的数据。其中`TIMESTAMPDIFF()`函数用于计算两个时间之间的差值，`now()`是获取当前时间的函数。\n\n4. `and 人数分布表.building_name='2号学生公寓'`：进一步限制条件，表示仅查询`building_name`字段值为'2号学生公寓'的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：继续添加限制条件，要求`region_name`字段值为'高新校区'。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：继续添加限制条件，要求`org_name`字段值为'中国科学技术大学'。\n\n7. `order by 人数分布表.stat_time desc`：对查询结果按照`stat_time`字段的降序排列，即最新的数据排在最前面。\n\n8. `limit 1`：限定返回的结果数量，只返回一条数据。"
    },
    {
        "query": "5分钟内识别到多少手中持物的行人？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于统计5分钟内手持物品的行人人数。这个查询涉及到多个表的连接和筛选条件，下面是对各个部分的具体解释：\n\n1. `d_people as 人员表`: 人员表是用于存储行人信息的表，其中包含一个标识行人的字段（如ID）和一个记录行人手持物品的字段（如hold_obj）。\n\n2. `s_camera as 摄像头表`: 摄像头表是用于存储摄像头的信息表，包括摄像头的ID、位置等信息。与人员表关联，以便确定某个行人是由哪个摄像头捕捉到的。\n\n3. `s_room as 房间表`: 房间表是用于存储房间信息的表，包括房间的ID、名称等信息。与摄像头表关联，以便确定摄像头的具体位置。\n\n4. `s_building as 楼栋表`: 楼栋表是用于存储楼栋信息的表，包括楼栋的ID、名称等信息。与房间表关联，以便进一步确定摄像头的位置信息。\n\n5. `s_region as 区域表`: 区域表是用于存储区域信息的表，包括区域的ID、名称等信息。与楼栋表关联，以便确定摄像头所在的具体区域。\n\n6. `s_organization as 单位表`: 单位表是用于存储单位名称的信息表，包括单位的ID、名称等信息。与区域表关联，以便确定摄像头所在的单位。\n\n7. `t_hold_object as 持物维表`: 持物维表是用于存储手持物品信息的表，包括物品的ID、名称等信息。与人员表关联，以便确定行人手持的物品类型。\n\n8. `TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 这个条件用于筛选在5分钟之内的数据，即最近5分钟内抓拍到的行人照片。\n\n9. `持物维表.name='持物'`: 这个条件用于筛选手持物品的行人，即只有当行人手持物品时，才会被计入统计结果。\n\n10. `区域表.region_name='高新校区'` 和 `单位表.org_name='中国科学技术大学'`: 这两个条件用于限制统计范围，即只统计位于“高新校区”且属于“中国科学技术大学”的单位内的行人手持物品的数量。"
    },
    {
        "query": "科大高新校区有哪些大楼？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称 from s_building as 楼栋表  join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid = 单位表.id where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'  order by 楼栋表.building_name asc;\n```\n该SQL语句用于查询中国科技大学高新校区的所有楼宇名称及其相关信息。以下是各子句的解释：\n\n1. `select 楼栋表.building_name as 楼宇名称`：这是查询的目标列，即我们需要获取的楼宇名称信息。\n\n2. `from s_building as 楼栋表`：指定数据来源，即我们从名为`s_building`的表（在后面的代码中我们称之为“楼栋表”）中提取数据。\n\n3. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是一个连接操作，通过将`s_building`表（楼栋表）和`s_region`表（区域表）进行连接，以便我们可以从每个楼宇找到其对应所在地区的信息。连接条件是`楼栋表.pid=区域表.id`。\n\n4. `join s_organization as 单位表 on 区域表.pid = 单位表.id`：这是另一个连接操作，将`s_region`表（区域表）和`s_organization`表（单位表）进行连接。这个连接的目的是让我们能够从每个地区找到其对应的管理单位名称。连接条件是`区域表.pid = 单位表.id`。\n\n5. `where 单位表.org_name='中国科学技术大学' and 区域表.region_name='高新校区'`：这是过滤条件，只有当管理单位名称是中国科学技术大学且地区名称为高新校区时，才保留相应的记录。\n\n6. `order by 楼栋表.building_name asc`：这是排序条件，按照楼宇名称进行升序排列。\n\n整个SQL语句的意思是：从`s_building`（楼栋表）、`s_region`（区域表）和`s_organization`（单位表）这三个表中，找出所有属于中国科学技术大学高新校区的楼宇名称，并按楼宇名称进行升序排列。"
    },
    {
        "query": "信智楼有多少人挎单肩包？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='单肩包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于统计信智楼（假设是某个建筑或地点）有多少人挎单肩包。下面是对这个查询语句的逐句解释：\n\n1. `select count(*) as 背双肩包的人数`: 这是查询目标，即计算满足条件的挎单肩包的人数。\n\n2. `from d_people as 人员表`: 这是数据来源，表示从人员表（假设是记录每个人的信息的数据表）中获取数据。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 这句是与摄像头表进行连接，假设每个摄像头对应一个ID，通过这个连接条件找到与每个人相关的摄像头的数据。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这句是与房间表进行连接，假设每个摄像头对应一个房间ID，通过这个连接条件找到与每个摄像头对应的房间的信息。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这句是与楼栋表进行连接，假设每个房间对应一个楼栋ID，通过这个连接条件找到与每个房间对应的楼栋的信息。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这句是与区域表进行连接，假设每个楼栋对应一个区域ID，通过这个连接条件找到与每个楼栋对应的区域的信息。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这句是与单位表进行连接，假设每个区域对应一个单位ID，通过这个连接条件找到与每个区域对应的单位的名称。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`: 这句是与背包维表进行连接，假设每个人的背包类型在背包维表中有一个对应的ID，通过这个连接条件找到与每个人对应的背包类型的信息。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`: 这个条件是限制查询时间范围，即只查找在过去5分钟内的数据。\n\n10. `and 背包维表.name='单肩包'`: 这个条件是限制查找的背包类型，即只查找挎单肩包的人员。\n\n11. `and 区域表.region_name='高新校区'`: 这个条件是限制查找的区域，即只查找位于高新校区的人员。\n\n12. `and 单位表.org_name='中国科学技术大学'`: 这个条件是限制查找的单位，即只查找属于中国科学技术大学的人员。\n\n13. `and 楼栋表.building_name='信智楼'`: 这个条件是限制查找的楼栋，即只查找位于信智楼的人员。"
    },
    {
        "query": "当前人数最多的是哪些建筑？",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num desc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中获取当前（距离现在时间不超过5小时）在特定区域（高新校区）和机构（中国科学技术大学）的人数分布信息。\n\n以下是各部分的具体解释：\n\n1. `select 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数`：选择要查询的列，这里选择了建筑名称（building_name）和人数（num）两列，并分别重命名为“建筑名称”和“人数”。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定查询的数据表名为a_people_spread_day_building，并将其缩写为“人数分布表”。\n\n3. `where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置查询的时间条件，即统计时间（stat_time）与当前时间（now()）的小时差小于5小时。\n\n4. `and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：设置查询的区域和机构条件，即所在区域名（region_name）为“高新校区”，所属机构名（org_name）为“中国科学技术大学”。\n\n5. `order by 人数分布表.num desc`：按照人数（num）降序排列查询结果。\n\n6. `limit 10`：限制查询结果的条数，只返回前10条数据。"
    },
    {
        "query": "4号学生公寓安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语言，用于查询某个特定地点的摄像头数量。具体解释如下：\n\n1. `select count(*) as 摄像头数量`：选择摄像头数量这一列，并计算满足条件的摄像头的总数。\n2. `from s_camera as 摄像头表`：指定数据来源于摄像头表，这是摄像头的数据库表名称。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表与房间表通过摄像头和房间之间的关联字段（这里是 PID）进行连接。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将房间表与楼栋表通过房间和楼栋之间的关联字段（这里是 PID）进行连接。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将楼栋表与区域表通过楼栋和区域之间的关联字段（这里是 PID）进行连接。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将区域表与单位表通过区域和单位之间的关联字段（这里是 PID）进行连接。\n7. `where 楼栋表.building_name='4号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，即查询的摄像头所在楼栋、区域和单位需要满足的条件。这里表示只查询位于“4号学生公寓”，属于“高新校区”且隶属于“中国科学技术大学”的摄像头数量。"
    },
    {
        "query": "7号学生公寓安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算7号学生公寓（假设这是某个学校的宿舍楼）所安装的摄像头的数量。具体来说，该查询通过多个表的联接操作和条件的筛选，获取到所有满足特定条件的摄像头的数据，然后使用count函数来计算这些摄像头的总数。\n\n下面详细解释一下每个部分的含义：\n\n1. `select count(*) as 摄像头数量`：这部分是查询的主体，选择计数函数(count)对所有行进行统计并返回一个名为“摄像头数量”的列。\n\n2. `from s_camera as 摄像头表`：这是查询的主表，用于存储摄像头的数据。这里将其简称为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这行代码表示将摄像头表与另一个叫做s_room的表（假设这是用来存储所有宿舍的数据的表）进行联接。联接的条件是两个表中对应的摄像头ID（摄像头表中的pid字段）和宿舍ID（房间表中的id字段）相等。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这行代码表示将房间表与另一个叫做s_building的表（假设这是用来存储所有宿舍楼的数据的表）进行联接。联接的条件是两个表中对应的宿舍楼ID（楼栋表中的id字段）和宿舍ID（房间表中的pid字段）相等。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这行代码表示将楼栋表与另一个叫做s_region的表（假设这是用来存储所有校区的数据的表）进行联接。联接的条件是两个表中对应的校区ID（区域表中的id字段）和宿舍楼ID（楼栋表中的pid字段）相等。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这行代码表示将区域表与另一个叫做s_organization的表（假设这是用来存储所有学校或单位的数据的表）进行联接。联接的条件是两个表中对应的单位ID（单位表中的id字段）和校区ID（区域表中的pid字段）相等。\n\n7. `where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这部分是查询的过滤条件，只有当楼栋名称为'7号学生公寓'、校区名称为'高新校区'且单位为'中国科学技术大学'的情况下，才会返回相应的摄像头数据。\n\n综上所述，这个查询的目的是找出在特定学校（中国科学技术大学）特定校区（高新校区）特定宿舍楼（7号学生公寓）中安装的所有摄像头的数量。"
    },
    {
        "query": "师生活动中心监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于统计“师生活动中心”的监控摄像头数量。以下是各子句的解释：\n\n1. select count(*) as 摄像头数量: 选择摄像头的数量作为结果集的一列，并命名为摄像头数量。\n2. from s_camera as 摄像头表: 从摄像头表（s_camera）中获取数据。\n3. join s_room as 房间表 on 摄像头表.pid=房间表.id: 将摄像头表和房间表通过摄像头所在的房间id进行关联。\n4. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 将房间表和楼栋表通过房间所在楼栋的id进行关联。\n5. join s_region as 区域表 on 楼栋表.pid=区域表.id: 将楼栋表和区域表通过楼栋所在的区域的id进行关联。\n6. join s_organization as 单位表 on 区域表.pid=单位表.id: 将区域表和单位表通过区域所在的单位的id进行关联。\n7. where 楼栋表.building_name='师生活动中心': 限制条件为楼栋名称为“师生活动中心”。\n8. and 区域表.region_name='高新校区': 限制条件为区域名称为“高新校区”。\n9. and 单位表.org_name='中国科学技术大学': 限制条件为单位名称为“中国科学技术大学”。"
    },
    {
        "query": "信智楼手里拿东西的人数",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个复杂的SQL查询语句，主要目的是计算信智楼内当前手中持有物品的人数。下面是对这个查询语句的详细解析：\n\n1. `select count(*) as 手里拿东西的人数`：选择计数函数（COUNT）返回满足条件的总人数。这里的*表示对所有行进行计数。\n\n2. `from d_people as 人员表`：定义数据表d_people作为\"人员表\"。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：通过on子句连接摄像头表和d_people表，其中摄像头表的ID等于人员表的camera_id字段。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表和摄像头表，摄像头表的pid等于房间表的id字段。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表和房间表，房间表的pid等于楼栋表的id字段。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表和楼栋表，楼栋表的pid等于区域表的id字段。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表和区域表，区域表的pid等于单位表的id字段。\n\n8. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`：连接t_hold_object表和d_people表，d_people表的hold_obj字段等于持物维表的id字段。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：限制查询的时间范围，即最近5分钟内的数据。\n\n10. `and 持物维表.name='持物'`：筛选出手中持有物品的记录。\n\n11. `and 区域表.region_name='高新校区'`：限定区域为中国科学技术大学的高新区。\n\n12. `and 单位表.org_name='中国科学技术大学'`：限定单位为\"中国科学技术大学\"。\n\n13. `and 楼栋表.building_name='信智楼'`：限定楼栋为\"信智楼\"。\n\n综上所述，这个SQL语句的目的是计算信智楼内最近5分钟内手中持有物品的人数。"
    },
    {
        "query": "查看行人轨迹表最近10条记录",
        "script": "```sql\nselect 行人轨迹表.start_time as 轨迹起始时间, 行人轨迹表.end_time as 轨迹结束时间, 行人轨迹表.name as 虚拟人名, 行人轨迹表.camera_id_list as 经过的摄像头Id from a_people_trail as 行人轨迹表 join s_camera as 摄像头表 on 行人轨迹表.start_camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 行人轨迹表.start_time desc  limit 10;\n```\n这是一个SQL查询语句，用于从多个表中获取行人轨迹信息。以下是对该SQL语句的详细解释：\n\n1. `select`: 从指定的表中选取某些字段。\n2. `a_people_trail as 行人轨迹表`: 定义要查询的表名为“a_people_trail”，并为其起别名“行人轨迹表”，以便在后续的连接和条件中使用。\n3. `start_time as 轨迹起始时间, end_time as 轨迹结束时间, name as 虚拟人名, camera_id_list as 经过的摄像头Id`: 选择要从“行人轨迹表”中获取的字段，分别为起始和结束时间、虚拟人名和经过的摄像头ID。\n4. `from`: 指定要查询的表。\n5. `join`: 连接其他表以获取更多的信息。这里连接到s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。\n6. `on`: 设置连接条件。例如，行人轨迹表的start_camera_id等于摄像头表的id，摄像头表的pid等于房间表的pid等。\n7. `where`: 设定筛选条件。在这里，要求区域表中的region_name为“高新校区”，且单位表中的org_name为“中国科学技术大学”。\n8. `order by`: 对查询结果进行排序。这里是按照行人轨迹表的start_time降序排列。\n9. `limit`: 限制查询结果的条数。这里是只返回最近的10条记录。"
    },
    {
        "query": "找出信智楼一个月内，每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取信智楼一个月内（DATEDIFF(now(), 人数分布表.stat_time) < 30）每天最少的人数。具体解释如下：\n\n1. select: 选择要查询的数据列和聚合函数。\n2. min(人数分布表.stat_time): 获取每天的最小值（即最少人数）。\n3. as 统计时间: 为最小值设置别名“统计时间”，方便在结果集中查看。\n4. round(min(人数分布表.num)) as 平均人数: 计算每天的最小人数并四舍五入保留整数。\n5. from a_people_spread_day_building as 人数分布表: 从名为“a_people_spread_day_building”的表中获取数据，为方便起见，将表简写为“人数分布表”。\n6. WHERE: 设置查询条件，包括建筑名称（信智楼）、时间范围（一个月内）、校区和机构名称等限制。\n7. DATEDIFF(now(), 人数分布表.stat_time) < 30: 判断数据是否在一个月之内（现在时间减去统计时间小于30天）。\n8. and 人数分布表.region_name='高新校区': 限制校区为“高新校区”。\n9. and 人数分布表.org_name='中国科学技术大学': 限制机构为“中国科学技术大学”。\n10. group by 人数分布表.stat_day: 对每天的统计数据进行分组。\n11. order by min(人数分布表.stat_time) asc;: 按统计时间升序排列，使结果按照时间顺序排列。"
    },
    {
        "query": "查一下师生活动中心的所有摄像头的基本信息",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中检索与“师生活动中心”相关的摄像头基本信息。这个查询涉及到5个表，分别是s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。这些表通过外键关联在一起，形成一个关系模型，以存储和管理摄像头的详细信息。\n\n以下是查询中的关键部分及其含义：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 这句代码选择3个字段作为查询结果，包括摄像头的ID（作为摄像头编号）、IP地址以及安装在哪个房间。\n\n2. `from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这句代码表示查询的数据来源于s_camera表（摄像头表）和s_room表（房间表）。通过ON子句指定连接条件，即摄像头表的pid字段等于房间表的id字段。\n\n3. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这句代码表示将s_building表（楼栋表）加入到查询中，并通过ON子句指定连接条件，即房间表的pid字段等于楼栋表的id字段。\n\n4. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这句代码表示将s_region表（区域表）加入到查询中，并通过ON子句指定连接条件，即楼栋表的pid字段等于区域表的id字段。\n\n5. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这句代码表示将s_organization表（单位表）加入到查询中，并通过ON子句指定连接条件，即区域表的pid字段等于单位表的id字段。\n\n6. `where 楼栋表.building_name='师生活动中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这句代码表示只返回满足特定条件的数据，即楼栋名称为“师生活动中心”，区域名称为“高新校区”，单位名称是“中国科学技术大学”。\n\n7. `order by 摄像头表.id asc limit 1000;`: 这句代码表示对查询结果按照摄像头表的id字段进行升序排序，并限制返回的记录数为1000条。"
    },
    {
        "query": "找出信智楼一个月内，每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个 SQL 查询语句，用于查找信智楼（假设是一个建筑名称）在一个月内每天平均人数。以下是各个部分和操作的详细解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 这句代码选择的是人数分布表中的 stat_time 字段的最小值作为统计时间。这个最小值是用户想要获取的一个月内的最早的一天。\n\n2. `round(avg(人数分布表.num)) as 平均人数`: 这句代码计算的是人数分布表中 num 字段的平均值，并四舍五入到整数。这是要找的每天平均人数。\n\n3. `from a_people_spread_day_building as 人数分布表`: 这句代码指定了查询的数据来源，也就是 \"a_people_spread_day_building\" 表格，为了方便后面引用，这里将其称为 \"人数分布表\"。\n\n4. `WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 这句代码定义了查询的条件。首先，它限制了建筑名称为 \"信智楼\"；其次，通过 `DATEDIFF(now(), 人数分布表.stat_time) < 30` 来确保数据是最近一个月内的；然后，它还限定了地区和机构名称分别为 \"高新校区\" 和 \"中国科学技术大学\"。\n\n5. `group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc`: 这句代码将结果按照统计日期（即每天的日期）进行分组，并按照统计时间的升序排序。这可以保证结果按照从最早的日期到最晚的日期的顺序排列。"
    },
    {
        "query": "告诉我现在行政与师生服务中心有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政与师生服务中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL查询语句的目的是为了获取当前（即最近五小时内）“行政与师生服务中心”的人数。具体解析如下：\n\n1. select 人数分布表.num as 人数: 选择num字段并将其重命名为\"人数\"。\n\n2. from a_people_spread_day_building as 人数分布表: 从名为a_people_spread_day_building的表中检索数据，并将其重命名为\"人数分布表\"。\n\n3. WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5: 过滤条件，只保留统计时间（stat_time）距今五小时以内的记录。\n\n4. and 人数分布表.building_name='行政与师生服务中心': 过滤条件，只保留building_name字段值为'行政与师生服务中心'的记录。\n\n5. and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学': 过滤条件，只保留region_name字段值为'高新校区'且org_name字段值为'中国科学技术大学'的记录。\n\n6. order by 人数分布表.stat_time desc: 按照stat_time字段的降序排列结果集。\n\n7. limit 1: 限制返回的结果集只有一条记录。"
    },
    {
        "query": "找出镜头中有人的室内摄像头的编号",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse = 1 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)  and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个复杂的SQL查询语句，用于找出镜头中有人（即在过去10分钟内有人脸识别记录）的室内摄像头编号、安装位置、所属大楼等信息。以下是各部分解释：\n\n1. `select 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所属大楼`：这是查询的列信息，分别选择摄像头表中的摄像头编号、房间表中的安装位置和楼栋表中的所属大楼字段作为查询结果。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是连接摄像头表、房间表和楼栋表，通过摄像头表的pid字段等于房间表的id字段进行连接，再通过房间表的pid字段等于楼栋表的id字段进行连接。\n\n3. `join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id`：这是继续连接区域表和单位表，通过楼栋表的pid字段等于区域表的id字段进行连接，再通过区域表的pid字段等于单位表的id字段进行连接。\n\n4. `where 摄像头表.inhouse = 1 and 摄像头表.id in (select DISTINCT camera_id from d_people where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：这是过滤条件，只选取摄像头表中标记为“inhouse”（表示在室内）的摄像头，并且这些摄像头的id需要在过去10分钟内有人在摄像头中出现（通过d_people表中的moment字段与当前时间对比得出）。\n\n5. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是进一步过滤条件，只选取位于“高新校区”且属于“中国科学技术大学”的摄像头。\n\n6. `order by 摄像头表.id asc limit 1000`：这是排序和限制返回数量，按照摄像头表中的id字段升序排序，并只返回前1000条记录。"
    },
    {
        "query": "有多少行人未持物？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这个SQL查询语句是用来计算在特定时间范围内、特定区域内的行人中有多少人没有持有物品的。具体解释如下：\n\n1. `select count(*) as 手里拿东西的人数 from`：这是查询的起始部分，表示我们要查询的目标是计算行人数量。\n\n2. `d_people as 人员表`：定义了\"行人\"这张表的别名，方便后续连接和引用。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接摄像头表和人员表，根据摄像头的ID匹配对应的行人信息。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表和摄像头表，根据房间的ID匹配对应摄像头的信息。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表和房间表，根据楼栋的ID匹配对应房间的信息。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表和楼栋表，根据区域的ID匹配对应楼栋的信息。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表和区域表，根据单位的ID匹配对应区域的信息。\n\n8. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`：连接持物维表和行人表，根据行人持有的物品ID匹配对应物品的信息。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：设置查询的时间条件，限制只返回最近5分钟内的数据。\n\n10. `and 持物维表.name='未持物'`：进一步限制只返回没有持有物品的行人的数量。\n\n11. `and 区域表.region_name='高新校区'`：限定查询的区域范围，只返回位于“高新校区”的数据。\n\n12. `and 单位表.org_name='中国科学技术大学'`：限定查询的单位范围，只返回属于“中国科学技术大学”的数据。\n\n综上所述，这个SQL查询语句将返回特定时间内、特定区域内、属于特定单位的行人中，有多少人没有持有物品。"
    },
    {
        "query": "不同下衣风格分别有多少人？",
        "script": "```sql\nselect substring(人员表.lower,6) as 下衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.lower  order by 人员表.lower asc;\n```\n这是一个SQL查询语句，用于统计高新校区中国科学技术大学的不同下衣风格的人数。以下是各个部分的具体解释：\n\n1. select: 选择子句，用于返回查询结果中的列。在这个查询中，选择了两个列：\n   - substring(人员表.lower,6): 提取人员表中lower字段的第六个字符开始的后缀，这里假设lower字段包含了每个人的下衣风格信息。\n   - count(*): 计算每个下衣风格的总数（即人数）。\n\n2. from: 指定数据来源，包括多个表连接。在这个查询中，涉及以下表格的连接：\n   - d_people: 人员表，存储了每个人的基本信息，例如姓名、性别等。\n   - s_camera: 摄像头表，存储了摄像头的位置和相关信息。\n   - s_room: 房间表，存储了每个房间的信息，包括所属楼栋和区域。\n   - s_building: 楼栋表，存储了每个楼栋的信息，包括所属区域和单位。\n   - s_region: 区域表，存储了每个区域的信息，包括所属单位。\n   - s_organization: 单位表，存储了每个单位的信息。\n\n3. join: 连接条件，用于将多个表根据共享字段进行连接。在这个查询中，通过以下关系将各个表连接在一起：\n   - 人员表.camera_id = 摄像头表.id: 每个人对应一个摄像头，通过摄像头ID将人员和摄像头连接起来。\n   - 摄像头表.pid = 房间表.id: 每个摄像头对应一个房间，通过房间ID将摄像头和房间连接起来。\n   - 房间表.pid = 楼栋表.id: 每个房间对应一个楼栋，通过楼栋ID将房间和楼栋连接起来。\n   - 楼栋表.pid = 区域表.id: 每个楼栋对应一个区域，通过区域ID将楼栋和区域连接起来。\n   - 区域表.pid = 单位表.id: 每个区域对应一个单位，通过单位ID将区域和单位连接起来。\n\n4. where: 过滤条件，用于筛选满足特定条件的数据。在这个查询中，设置了以下过滤条件：\n   - TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5: 限制查询的时间范围，只考虑最近5分钟内的数据。\n   - 区域表.region_name = '高新校区': 限制查询的区域，只考虑高新校区的数据。\n   - 单位表.org_name = '中国科学技术大学': 限制查询的单位，只考虑中国科学技术大学的数据。\n\n5. group by: 分组条件，用于对查询结果进行分组。在这个查询中，按照每个下衣风格的组合进行分组。\n\n6. order by: 排序条件，用于对查询结果进行排序。在这个查询中，按照每个下衣风格的字母顺序进行升序排列。\n\n总结，这个查询的目的是获取高新校区中国科学技术大学内，不同下衣风格的人数统计。"
    },
    {
        "query": "找出学生食堂一个月内，每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于计算一个月内（即过去30天内）学生食堂每天的平均人数。以下是各部分的解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选择最小的统计数据时间作为统计时间。\n2. `round(avg(人数分布表.num)) as 平均人数`: 对人数分布表的“人数”字段进行平均值计算并四舍五入保留小数位，将其命名为“平均人数”。\n3. `from a_people_spread_day_building as 人数分布表`: 从数据表`a_people_spread_day_building`中选择数据，将其称为“人数分布表”。\n4. `WHERE 人数分布表.building_name='学生食堂'`: 过滤条件，仅选择名为“学生食堂”的建筑物数据。\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`: 过滤条件，仅选择过去30天的数据。`DATEDIFF`函数返回两个日期之间的差值。这里表示从当前时间到现在所记录的数据的时间差小于30天。\n6. `and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 过滤条件，仅选择位于“高新校区”且属于“中国科学技术大学”的数据。\n7. `group by 人数分布表.stat_day`: 对数据进行分组，按照“统计日期”进行分组。\n8. `order by min(人数分布表.stat_time) asc`: 对结果按照统计时间从小到大排序。"
    },
    {
        "query": "现在有多少人在室外？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='高新校区室外' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n"
    },
    {
        "query": "近期识别到多少背双肩包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这个SQL查询语句的目的是为了计算在最近的五分钟内在高新校区的中国科学技术大学内，背着双肩包的行人的数量。\n\n以下是各个子句的解释：\n\n1. `select count(*) as 背双肩包的人数`：这是查询的主体，用于计算满足条件的行人数量。\n\n2. `from d_people as 人员表`：从人员表中获取数据，这是一个包含行人信息的表格。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接摄像头表，通过摄像头ID匹配每个行人对应的摄像头信息。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接房间表，通过摄像头所属的房间ID获取房间信息。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接楼栋表，通过房间所属的楼栋ID获取楼栋信息。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接区域表，通过楼栋所属的区域ID获取区域信息。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接单位表，通过区域所属的单位ID获取单位名称。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`：连接背包维表，通过人员的背包ID匹配背包信息。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：设置时间条件，只考虑最近五分钟的记录。\n\n10. `and 背包维表.name='背包'`：设置背包类型条件，只考虑背着双肩包（名字为“背包”）的行人。\n\n11. `and 区域表.region_name='高新校区'`：设置区域条件，只考虑位于高新校区的行人。\n\n12. `and 单位表.org_name='中国科学技术大学'`：设置单位条件，只考虑位于中国科学技术大学的行人。"
    },
    {
        "query": "当前人数最少的是哪些建筑？",
        "script": "```sql\nselect 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.num asc  limit 10;\n```\n这是一个SQL查询语句，用于从数据库中查询当前（距离现在不超过5小时）人数最少的10个建筑物信息。以下是各部分解释：\n\n1. select 人数分布表.building_name as 建筑名称, 人数分布表.num as 人数: 选择要查询的列名，将building_name重命名为\"建筑名称\", num重命名为\"人数\"。\n2. from a_people_spread_day_building as 人数分布表: 从名为a_people_spread_day_building的数据表中获取数据，并将该表简称为\"人数分布表\"。\n3. where TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5: 限制查询条件，只选取距离现在时间（now()函数返回当前日期和时间）不超过5小时的记录。\n4. and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学': 进一步限制查询条件，只选取地区名称为“高新校区”且机构名称为“中国科学技术大学”的记录。\n5. order by 人数分布表.num asc: 按照人数分布表的num字段值进行升序排列，即从小到大排序。\n6. limit 10: 限制查询结果集的大小，仅返回前10条记录。"
    },
    {
        "query": "现在有多少人在2号学生公寓？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='2号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取“2号学生公寓”当前的人数。以下是各部分的解释：\n\n1. `select 人数分布表.num as 人数`：选择字段`num`并将其命名为`人数`，该字段存储了公寓内的人数信息。\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表，名为`a_people_spread_day_building`，在此表中，将使用别名`人数分布表`进行引用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置过滤条件，只返回与当前时间（now()）相隔小于5小时的数据。这个条件确保了数据的新鲜度。\n\n4. `and 人数分布表.building_name='2号学生公寓'`：过滤条件，只返回`building_name`字段值为'2号学生公寓'的数据。\n\n5. `and 人数分布表.region_name='高新校区'`：过滤条件，只返回`region_name`字段值为'高新校区'的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：过滤条件，只返回`org_name`字段值为'中国科学技术大学'的数据。\n\n7. `order by 人数分布表.stat_time desc`：按照`stat_time`字段降序排列结果集，最新的统计数据将排在最前面。\n\n8. `limit 1`：限制结果集的行数为1，即仅返回一条记录。"
    },
    {
        "query": "不同年龄段的人数",
        "script": "```sql\nselect case 人员表.age_group when 'AgeLess18' then '小于18岁' when 'Age18-60' then '18-60岁' else '大于60岁' end as '年龄组', count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.age_group  order by 人员表.age_group asc;\n```\n这是一个 SQL（结构化查询语言）查询语句，用于从多个表中检索并计算特定信息。这个查询的目的是计算不同年龄段的人员数量，并将结果按年龄分组排序。以下是查询的详细解释：\n\n1. select: 选择要返回的列和聚合函数。\n2. case ... when ... then ...: 根据条件表达式将 age_group 字段转换为不同的描述性标签。例如，当 age_group 值为 'AgeLess18' 时，将其转换为 '小于18岁'；当值为 'Age18-60' 时，将其转换为 '18-60岁'；否则，将其转换为 '大于60岁'。\n3. count(*): 计算每个年龄组的总人数。\n4. as: 将 age_group 字段重命名为 '年龄组'。\n5. from: 指定要从中检索数据的表，这里包括 d_people（人员表）、s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和 s_organization（单位表）。\n6. join: 连接这些表，以便在查询中包含来自所有表的数据。连接条件基于这些表的关联字段（如 camera_id、pid等）。\n7. where: 设置查询的过滤条件，包括时间限制（TIMESTAMPDIFF() 函数计算当前时间与 moment 字段之间的分钟差，限制在过去5分钟内的时间范围）以及特定的区域和单位信息。\n8. group by: 按照 age_group 对数据进行分组，以便对每个年龄组进行计数。\n9. order by: 按照 age_group 对结果进行升序排序。\n\n这个查询的最终目的是生成一个表格，其中列出不同年龄段的人数，并按照年龄分组排序。"
    },
    {
        "query": "最近识别到的人员中，不同年龄段分别有多少人？",
        "script": "```sql\nselect case 人员表.age_group when 'AgeLess18' then '小于18岁' when 'Age18-60' then '18-60岁' else '大于60岁' end as '年龄组', count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.age_group  order by 人员表.age_group asc;\n```\n这个SQL查询语句的目的是为了计算不同年龄段的人数。以下是各部分的详细解释：\n\n1. `case 人员表.age_group`: 这部分定义了一个条件表达式，用于根据`人员表.age_group`的值来区分不同的年龄段。具体来说，如果`age_group`等于'AgeLess18'，则返回'小于18岁'；如果等于'Age18-60'，则返回'18-60岁'；否则返回'大于60岁'。\n\n2. `when 'AgeLess18' then '小于18岁' when 'Age18-60' then '18-60岁' else '大于60岁' end as '年龄组': 这是`case`表达式的主体部分，根据`age_group`的值返回对应的年龄段名称。\n\n3. `count(*) as 人数`: 这部分计算每个年龄段的人数。`count(*)`是SQL中的聚合函数，用于计算满足条件的行数。这里将结果命名为'人数'。\n\n4. `from d_people as 人员表`: 这部分指定了数据源，即人员信息表（d_people），并将其简称为'人员表'。\n\n5. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 这部分连接了摄像头表（s_camera），连接条件是`人员表.camera_id`等于`摄像头表.id`。\n\n6. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 这部分连接了房间表（s_room），连接条件是`摄像头表.pid`等于`房间表.id`。\n\n7. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 这部分连接了楼栋表（s_building），连接条件是`房间表.pid`等于`楼栋表.id`。\n\n8. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 这部分连接了区域表（s_region），连接条件是`楼栋表.pid`等于`区域表.id`。\n\n9. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分连接了单位表（s_organization），连接条件是`区域表.pid`等于`单位表.id`。\n\n10. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是查询条件，要求时间差（当前时间与记录时间的分钟数之差）小于5分钟，且区域名称为'高新校区'，单位名称为'中国科学技术大学'。\n\n11. `group by 人员表.age_group`: 这部分是分组条件，按照年龄段对数据进行分组，以便统计每个年龄段的人数。\n\n12. `order by 人员表.age_group asc`: 这部分是排序条件，按照年龄段进行升序排列。"
    },
    {
        "query": "最近识别到的人员中，不同年龄段的人数是多少？",
        "script": "```sql\nselect case 人员表.age_group when 'AgeLess18' then '小于18岁' when 'Age18-60' then '18-60岁' else '大于60岁' end as '年龄组', count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 人员表.age_group  order by 人员表.age_group asc;\n```\n这是一个SQL查询语句，用于统计不同年龄段的人员数量。这个查询涉及到多个表的联接和聚合函数。以下是各部分的主要功能：\n\n1. `select`: 从表格中选择数据列。在这个查询中，选择了两个列：一个是根据人员表中\"年龄分组\"字段计算出的\"年龄组\"（通过`case`语句实现），另一个是各个年龄组的计数（使用`count(*)`函数实现）。\n\n2. `from`: 指定查询数据的来源表格。在这个查询中，数据来源有四个关联的表格：`d_people`（人员表）、`s_camera`（摄像头表）、`s_room`（房间表）、`s_building`（楼栋表）和`s_region`（区域表）。\n\n3. `join`: 联接表格。这是通过ON子句实现的，用于连接关联表格中的相关记录。例如，`人员表.camera_id=摄像头表.id`表示在`人员表`和`摄像头表`中，当`人员表`中的`camera_id`与`摄像头表`中的`id`相同时，将这两个表格的记录联接起来。\n\n4. `where`: 设置查询条件。在这个查询中，主要有两个条件：一是时间间隔（当前时间与记录时间的时间差，单位为分钟）小于5分钟；二是所在区域名称为“高新校区”且所在单位名称为“中国科学技术大学”。\n\n5. `group by`: 按指定的列对查询结果进行分组。在这里，按照`人员表.age_group`（即年龄组）进行分组，以便计算每个年龄组的人数。\n\n6. `order by`: 对查询结果进行排序。在这个查询中，按照年龄组升序排列。\n\n7. `case`: 根据条件表达式的真值，返回不同的结果。这里用于将\"年龄分组\"字段转换为易于理解的\"年龄组\"名称。"
    },
    {
        "query": "图教中心的监控安装情况",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中检索与特定条件匹配的数据。以下是各部分的具体解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：这部分定义了要返回的列。这里选择了摄像头表中的ID（摄像头编号）和IP地址，以及房间表中的房间名称（安装位置）。\n\n2. `from s_camera as 摄像头表`：指定了查询的主表，即摄像头表（s_camera）。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表（s_camera）和房间表（s_room），连接条件是摄像头表的pid字段等于房间表的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表（s_room）和楼栋表（s_building），连接条件是房间表的pid字段等于楼栋表的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表（s_building）和区域表（s_region），连接条件是楼栋表的pid字段等于区域表的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表（s_region）和单位表（s_organization），连接条件是区域表的pid字段等于单位表的id字段。\n\n7. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：定义了查询的条件。这里限制了楼栋名称为“图书教育中心”，区域名称为“高新校区”，单位名称为“中国科学技术大学”。\n\n8. `order by 摄像头表.id asc limit 1000`：对查询结果进行排序，按照摄像头表（s_camera）的id字段升序排列（asc），并限制结果为前1000条记录。"
    },
    {
        "query": "现在有多少人在教师食堂？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取当前在“教工食堂”（假设这是一个特定地点）的人数。以下是该查询的各个部分的简要解释：\n\n1. `SELECT 人数分布表.num as 人数`: 从数据表中选择名为\"num\"的列，并将它重命名为\"人数\"。\n\n2. `FROM a_people_spread_day_building as 人数分布表`: 声明查询的数据表来源，并为其起一个别名（在这里是\"人数分布表\"）以便于后续使用。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 这个条件用于筛选出在过去五小时内统计的数据。`TIMESTAMPDIFF()`函数计算两个时间之间的差值（以小时为单位），`now()`返回当前的日期和时间，这个条件表示只考虑过去五小时内的数据。\n\n4. `and 人数分布表.building_name='教工食堂'`: 这个条件用于进一步筛选出与\"教工食堂\"相关的数据。\n\n5. `and 人数分布表.region_name='高新校区'`: 这个条件用于进一步筛选出与\"高新校区\"相关的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 这个条件用于进一步筛选出与\"中国科学技术大学\"相关的数据。\n\n7. `ORDER BY 人数分布表.stat_time DESC LIMIT 1`: 根据统计数据的时间（按降序排列）对结果进行排序，然后限制返回的结果数为1，即仅返回最近的一条记录。"
    },
    {
        "query": "4号学生公寓现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='4号学生公寓' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个 SQL（结构化查询语言）查询语句，用于从数据库中获取特定时间范围内的人数信息。下面是该SQL语句的各个部分及其含义的简单说明：\n\n1. `select 人数分布表.num as 人数`：选择名为`num`的字段作为查询结果中的\"人数\"字段。\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表名为`a_people_spread_day_building`，并为其分配一个别名\"人数分布表\"以便在后续的查询条件中使用。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置一个条件，只返回在过去5小时内的人数数据。`TIMESTAMPDIFF`是一个函数，用于计算两个日期之间的差值（这里以小时为单位）。\n4. `and 人数分布表.building_name='4号学生公寓'`：进一步设置条件，只返回`building_name`字段值为'4号学生公寓'的数据。\n5. `and 人数分布表.region_name='高新校区'`：同上，只返回`region_name`字段值为'高新校区'的数据。\n6. `and 人数分布表.org_name='中国科学技术大学'`：同上，只返回`org_name`字段值为'中国科学技术大学'的数据。\n7. `order by 人数分布表.stat_time desc limit 1`：按`stat_time`字段降序排列结果集，并只返回第一条记录。这意味着，如果满足上述所有条件的数据存在多条，将返回最近的一条。"
    },
    {
        "query": "现在有多少人在2号学科楼？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='2号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取当前（时间戳与现在的时间差小于5小时）在“2号学科楼”的人数信息。以下是该语句的详细解析：\n\n1. `select 人数分布表.num as 人数`：选择字段`num`作为结果集的列名`人数`；\n2. `from a_people_spread_day_building as 人数分布表`：从`a_people_spread_day_building`表中选择数据，并将该表别名设为`人数分布表`；\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置条件，限制统计时间与当前时间的时差小于5小时的数据；\n4. `and 人数分布表.building_name='2号学科楼'`：设置条件，限制建筑名为“2号学科楼”的数据；\n5. `and 人数分布表.region_name='高新校区'`：设置条件，限制区域名为“高新校区”的数据；\n6. `and 人数分布表.org_name='中国科学技术大学'`：设置条件，限制组织名为“中国科学技术大学”的数据；\n7. `order by 人数分布表.stat_time desc`：按照`stat_time`降序排列结果集；\n8. `limit 1`：限制结果集返回的行数为1，即只返回一条满足条件的数据。"
    },
    {
        "query": "行政办公楼人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政办公楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的\"行政办公楼\"人数信息。以下是各部分解释：\n\n1. `select 人数分布表.num as 人数`: 从表格`人数分布表`中选择字段`num`作为输出列名（在此处命名为“人数”）；\n2. `from a_people_spread_day_building as 人数分布表`: 指定数据来源表格，并为其起别名“人数分布表”以便在后续操作中使用；\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 对查询结果设定时间限制条件，仅返回在过去五小时内的数据；\n4. `and 人数分布表.building_name='行政办公楼'`: 设置筛选条件，只选取`building_name`字段值为“行政办公楼”的数据；\n5. `and 人数分布表.region_name='高新校区'`: 进一步筛选，要求`region_name`字段值等于“高新校区”；\n6. `and 人数分布表.org_name='中国科学技术大学'`: 再增加一个筛选条件，确保`org_name`字段值是“中国科学技术大学”；\n7. `order by 人数分布表.stat_time desc`: 对查询结果按照`stat_time`字段的降序排列，即最新的数据排在最前面；\n8. `limit 1`: 限定返回结果的数量，此处为一条记录。\n\n整个语句的意思是，从数据库中的`a_people_spread_day_building`表格选取满足条件的数据（过去五小时内、“行政办公楼”、“高新校区”和“中国科学技术大学”），并按照时间降序排列，最终只返回一条记录。"
    },
    {
        "query": "近期识别到的人员中，不戴眼镜的有多少？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='未戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段 SQL 语言，用于查询某个数据库中的特定数据。以下是各部分的主要功能说明：\n\n1. `select`: 选择要返回的数据字段和计算结果。\n2. `count(*) as 戴眼镜人数`: 计算满足条件的记录总数，并命名为 \"戴眼镜人数\"。\n3. `from`: 指定要查询的数据表，这里是 `d_people`（人员表）。\n4. `join`: 连接多个表以获取所需数据，这里连接了 `s_camera`（摄像头表）、`s_room`（房间表）、`s_building`（楼栋表）、`s_region`（区域表）、`s_organization`（单位表） 和 `t_glasses`（眼镜维表）。\n5. `on`: 指定连接条件，即两个表的关联字段相等。\n6. `where`: 设置查询条件，即满足这些条件的记录将被选中。这里的条件包括：时间差（人员被识别到的时间与当前时间的差值）小于 5 分钟，人员未戴眼镜（眼镜维表中的名称等于 \"未戴眼镜\"），所在区域为 \"高新校区\"，所在单位名称为 \"中国科学技术大学\"。\n7. `TIMESTAMPDIFF()`: 计算时间差函数，这里用于限制查询结果的时效性。\n8. `now()`: 获取当前时间。\n9. `and`: 连接多个查询条件，表示所有条件都必须满足。\n10. `as`: 为字段或结果设置别名，方便在查询结果中引用。"
    },
    {
        "query": "现在有多少人在行政办公楼？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政办公楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这个SQL查询语句的目的是获取当前在\"行政办公楼\"中的人数。它从a_people_spread_day_building（人数分布表）这张表中选择数据。\n\n具体来说，该语句执行以下操作：\n\n1. 使用TIMESTAMPDIFF函数计算每个记录的统计时间（stat_time）与当前时间（now()）的小时差值。\n2. 筛选出小时差值小于5的记录，即最近5小时内的数据。\n3. 通过and条件筛选出building_name等于\"行政办公楼\"、region_name等于\"高新校区\"和org_name等于\"中国科学技术大学\"的记录。\n4. 按照stat_time降序排列结果，即先显示最近的记录。\n5. 通过limit 1限制只返回一条结果，即最近的一条记录。\n6. 将返回的结果中的num字段命名为人数。"
    },
    {
        "query": "行政与师生服务中心安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政与师生服务中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算\"行政与师生服务中心\"中摄像头的数量。以下是各个子句的含义：\n\n1. select count(*) as 摄像头数量: 这行代码用于返回满足条件的摄像头的数量，并将结果命名为 \"摄像头数量\"。\n\n2. from s_camera as 摄像头表: 从名为s_camera的表中获取数据，并将其简称为\"摄像头表\"。\n\n3. join s_room as 房间表: 连接另一个名为s_room的表，并称其为\"房间表\"。\n\n4. on 摄像头表.pid=房间表.id: 这部分指定了摄像头表和房间表之间的关联条件，即摄像头表中的pid（可能表示设备ID）必须等于房间表中的id。\n\n5. join s_building as 楼栋表: 连接第三个名为s_building的表，并称其为\"楼栋表\"。\n\n6. on 房间表.pid=楼栋表.id: 这部分指定了房间表和楼栋表之间的关联条件，即房间表中的pid必须等于楼栋表中的id。\n\n7. join s_region as 区域表: 连接第四个名为s_region的表，并称其为\"区域表\"。\n\n8. on 楼栋表.pid=区域表.id: 这部分指定了楼栋表和区域表之间的关联条件，即楼栋表中的pid必须等于区域表中的id。\n\n9. join s_organization as 单位表: 连接第五个名为s_organization的表，并称其为\"单位表\"。\n\n10. on 区域表.pid=单位表.id: 这部分指定了区域表和单位表之间的关联条件，即区域表中的pid必须等于单位表中的id。\n\n11. where 楼栋表.building_name='行政与师生服务中心': 这部分指定了筛选条件，即只有当楼栋表中的building_name字段等于“行政与师生服务中心”时，才包含在结果中。\n\n12. and 区域表.region_name='高新校区': 这部分进一步限制了筛选条件，只有当区域表中的region_name字段等于“高新校区”时，才包含在结果中。\n\n13. and 单位表.org_name='中国科学技术大学': 最后一部分再次增加了筛选条件，只有当单位表中的org_name字段等于“中国科学技术大学”时，才包含在结果中。\n\n综上所述，这个查询语句会返回满足所有这些筛选条件的摄像头数量。"
    },
    {
        "query": "1号学科楼安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算1号学科楼安装的监控数量。以下是各部分解释：\n\n1. `select count(*) as 摄像头数量`：选择函数count()的结果作为输出列“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：指定数据来源表为\"s_camera\"，并为其赋予别名\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：联接另一个表\"s_room\"（赋予别名\"房间表\"），联接条件是\"摄像头表\"的pid字段等于\"房间表\"的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：联接第三个表\"s_building\"（赋予别名\"楼栋表\"），联接条件是\"房间表\"的pid字段等于\"楼栋表\"的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：联接第四个表\"s_region\"（赋予别名\"区域表\"），联接条件是\"楼栋表\"的pid字段等于\"区域表\"的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：联接第五个表\"s_organization\"（赋予别名\"单位表\"），联接条件是\"区域表\"的pid字段等于\"单位表\"的id字段。\n\n7. `where 楼栋表.building_name='1号学科楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置筛选条件，要求楼栋名为\"1号学科楼\"、区域名称为\"高新校区\"且单位名称是\"中国科学技术大学\"。\n\n这段查询将返回满足条件的监控摄像头的数量。"
    },
    {
        "query": "学生食堂安装了哪些摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个表中获取与“学生食堂”相关的摄像头的信息。以下是各表和字段的简要说明：\n\n1. s_camera（摄像头表）: id(摄像头编号)、ip(IP地址)。\n2. s_room（房间表）: room_name（安装位置）、pid（父级ID）。\n3. s_building（楼栋表）: building_name（楼栋名称）、pid（父级ID）。\n4. s_region（区域表）: region_name（区域名称）、pid（父级ID）。\n5. s_organization（单位表）: org_name（单位名称）、pid（父级ID）。\n\n这个查询的连接关系是：通过摄像头表的pid字段与房间表关联；通过房间表的pid字段与楼栋表关联；通过楼栋表的pid字段与区域表关联；通过区域表的pid字段与单位表关联。\n\n查询条件是：要求楼栋名称等于“学生食堂”，区域名称等于“高新校区”，单位名称等于“中国科学技术大学”。同时按照摄像头表的id字段升序排列，并限制返回结果的数量不超过1000条。"
    },
    {
        "query": "信智楼5分钟内识别到多少拿手提包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段用于查询的SQL语句，目的是在5分钟之内识别出携带手提包行人的数量。以下是各部分的主要含义和功能：\n\n1. `select count(*) as 背双肩包的人数`：选择计数函数count()，计算满足条件的行数（即携带手提包行人的数量）。\n\n2. `from d_people as 人员表`：从数据表d_people中选取记录，此表中存储了关于行人的信息。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：将摄像头表s_camera与人员表进行内连接，条件是人员表的camera_id等于摄像头表的id。这个连接的目的是获取每个行人在被摄像头捕捉时的信息。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将房间表s_room与摄像头表进行内连接，条件是摄像头表的pid等于房间表的id。这个连接的目的是获取每个摄像头所在的房间信息。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将楼栋表s_building与房间表进行内连接，条件是房间表的pid等于楼栋表的id。这个连接的目的是获取每个摄像头所在的楼栋信息。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将区域表s_region与楼栋表进行内连接，条件是楼栋表的pid等于区域表的id。这个连接的目的是获取每个摄像头所在的区域信息。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将单位表s_organization与区域表进行内连接，条件是区域表的pid等于单位表的id。这个连接的目的是获取每个摄像头所在的单位名称。\n\n8. `join t_bag as 背包维表 on 人员表.bag=背包维表.id`：将背包维表t_bag与人员表进行内连接，条件是人员表的bag等于背包维表的id。这个连接的目的是获取每个行人的背包类型信息。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='手提包' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`：设置查询条件，包括时间条件（最近5分钟内）、背包类型条件（必须为手提包）、区域和单位条件（必须位于高新校区的中国科学技术大学信智楼）。这些条件共同筛选出符合条件的行人记录。"
    },
    {
        "query": "信智楼安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算“信智楼”安装了摄像头的数量。以下是各个子句的解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数count(*)作为查询结果，将计数值命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`: 从s_camera表（摄像头表）开始查询，为了方便阅读，将其重命名为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和房间表，连接条件是摄像头表的主键（PID）等于房间表的ID。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表和楼栋表，连接条件是房间表的主键（PID）等于楼栋表的主键（ID）。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表和区域表，连接条件是楼栋表的主键（PID）等于区域表的主键（ID）。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表和单位表，连接条件是区域表的主键（PID）等于单位表的主键（ID）。\n\n7. `where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求楼栋名称为“信智楼”，区域名称为“高新校区”，单位名称（组织名称）为“中国科学技术大学”。\n\n综合以上各子句，这个查询语句的目的是在满足特定条件的条件下，统计出信智楼的摄像头数量。"
    },
    {
        "query": "老师食堂安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于统计“教工食堂”在中国科学技术大学高新校区内的摄像头数量。以下是各子句的解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数count(*)作为结果集，并将返回的结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：指定数据来源是名为s_camera的表，并为其赋予别名\"摄像头表\"，以便在后续子句中使用。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：通过摄像头的project_id（即pid）与房间的id进行连接操作，生成一个新的表格。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：同样地，房间表的project_id（即pid）与楼栋表的id进行连接操作，生成新的表格。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：再进行一次连接操作，这次是楼栋表的project_id（即pid）与区域表的id进行连接。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：最后进行一次连接操作，区域表的project_id（即pid）与单位表的id进行连接。\n\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设定过滤条件，只返回满足条件的记录，即在“教工食堂”、“高新校区”和“中国科学技术大学”范围内的摄像头数量。\n\n综上，这个SQL语句的目的是计算出位于特定地点（即“教工食堂”、“高新校区”和“中国科学技术大学”范围内）的摄像头数量。"
    },
    {
        "query": "找出信智楼一个月内，每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于在信智楼内找出一个月内每天的最高人数。下面是该SQL语句的每个部分的解释：\n\n1. `SELECT`: 选择要返回的结果字段。在这个例子中，我们选择了两个结果字段：`min(人数分布表.stat_time) as 统计时间` 和 `round(max(人数分布表.num)) as 平均人数`。\n\n2. `MIN()` 和 `MAX()`: 这两个函数分别用于计算最小和最大值。这里使用它们来找出一个月内每天在信智楼的最多人数。\n\n3. `FROM`: 从指定的数据表中获取数据。在这里，数据表名为`a_people_spread_day_building`，别名为`人数分布表`。\n\n4. `WHERE`: 定义筛选条件，只有满足这些条件的记录才会被选中。在这个查询中，筛选条件包括：建筑名称为`信智楼`，距离现在的时间（以天为单位）小于30天，地区名称为`高新校区`，机构名称为`中国科学技术大学`。\n\n5. `GROUP BY`: 按照指定的字段对结果进行分组。在这个查询中，按照`人数分布表.stat_day`进行分组，这样我们可以得到每天在信智楼的最多人数。\n\n6. `ORDER BY`: 对结果进行排序。在这个查询中，按照`min(人数分布表.stat_time)`进行升序排序，这样我们可以得到最早的那天的最多人数在最前面。\n\n综上所述，这个SQL查询语句的目的是找出信智楼一个月内，每天的人数最多的情况。"
    },
    {
        "query": "监控密度最低的是哪栋楼？",
        "script": "```sql\nselect 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'  group by 楼栋表.building_name  order by count(*) asc limit 1;\n```\n这是一条SQL查询语句，用于查找某校区某大学的监控摄像头数量最低的楼栋信息。以下是各个子句的解释：\n\n1. `select 楼栋表.building_name as 楼宇名称, count(*) as 摄像头数量`：这是选择子句，选择了\"楼宇名称\"（即楼栋名）和\"摄像头数量\"作为查询结果的字段。其中，count(*)是聚合函数，用于计算每个楼栋的摄像头数量。\n\n2. `from s_camera as 摄像头表`：这是表格源子句，指定了数据来源于名为\"s_camera\"的摄像头表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是连接子句，将摄像头表和房间表通过摄像头的pid（可能是指设备ID）等于房间表的id的条件进行连接。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是连接子句，将房间表和楼栋表通过房间的pid（可能是指楼栋ID）等于楼栋表的id的条件进行连接。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是连接子句，将楼栋表和区域表通过楼栋的pid（可能是指区域ID）等于区域表的id的条件进行连接。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是连接子句，将区域表和单位表通过区域的pid（可能是指单位ID）等于单位表的id的条件进行连接。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是条件子句，指定了只查询满足\"高新校区\"和\"中国科学技术大学\"这两个条件的摄像头信息。\n\n8. `group by 楼栋表.building_name`：这是分组子句，按照楼栋名对摄像头数量进行分组，以便后续进行聚合计算。\n\n9. `order by count(*) asc limit 1`：这是排序和限制子句，将摄像头数量按照升序排列（asc表示升序，desc表示降序），并限制返回的结果集只有一条记录。"
    },
    {
        "query": "食堂的摄像头安装情况",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于查询学校食堂的摄像头安装情况。这个语句包含了多个表的连接和筛选条件，以下是各部分详细解析：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`: 这是查询结果中的列名，分别表示摄像头的编号、IP地址和安装位置。\n\n2. `from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id join s_region as 区域表 on 楼栋表.pid=区域表.id join s_organization as 单位表 on 区域表.pid=单位表.id`: 这部分是连接各个表并设置关联条件的代码。其中，`s_camera`（摄像头表）、`s_room`（房间表）、`s_building`（楼栋表）、`s_region`（区域表）和`s_organization`（单位表）是各个表的别名。通过摄像头表的`pid`字段与房间表的`id`字段建立连接，然后依次通过房间表的`pid`字段与楼栋表的`id`字段、楼栋表的`pid`字段与区域表的`id`字段、区域表的`pid`字段与单位表的`id`字段建立连接。\n\n3. `where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 这部分是筛选条件，要求查询结果为位于“学生食堂”、“高新校区”且属于“中国科学技术大学”的摄像头信息。\n\n4. `order by 摄像头表.id asc limit 1000`: 这部分是排序和限制结果的代码。按照摄像头表的`id`字段从小到大（即升序）排列查询结果，并限制结果数量为1000条。"
    },
    {
        "query": "找出食堂一个月内，每天最少人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于查找一个月内在特定食堂（学生食堂）每天的最低人数。以下是各部分的解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`：选择每天的最小值作为统计时间。\n2. `round(min(人数分布表.num)) as 平均人数`：计算每天的人数并保留小数位后的结果作为平均人数。\n3. `from a_people_spread_day_building as 人数分布表`：从名为“a_people_spread_day_building”的表中获取数据。\n4. `WHERE 人数分布表.building_name='学生食堂'`：筛选出满足条件（食堂名称为“学生食堂”）的数据。\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`：限制查询时间范围在30天以内（即最近的一个月内）。\n6. `and 人数分布表.region_name='高新校区'`：进一步筛选出位于“高新校区”的数据。\n7. `and 人数分布表.org_name='中国科学技术大学'`：继续筛选出属于“中国科学技术大学”的数据。\n8. `group by 人数分布表.stat_day`：按日期对数据进行分组。\n9. `order by min(人数分布表.stat_time) asc`：按照统计时间的升序排列数据，使得每天的最小人数排在一起。"
    },
    {
        "query": "统计图书教育中心每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于计算“图书教育中心”（假设是一个地点）在近30天内每天的人数平均值。具体解释如下：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选取人数分布表中日期（stat_time）的最小值作为统计时间。\n\n2. `round(avg(人数分布表.num)) as 平均人数`: 计算人数分布表中人数（num）的平均值并保留小数位。\n\n3. `from a_people_spread_day_building as 人数分布表`: 从a_people_spread_day_building这个表（假设是存储人数数据的表）中选取数据。\n\n4. `WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 对数据进行筛选，只选择“图书教育中心”的数据，并且这些数据距离现在的时间（now()函数获取当前时间）小于30天，同时所在区域为“高新校区”，所属单位为“中国科学技术大学”。\n\n5. `group by 人数分布表.stat_day`: 按天数（stat_day）进行分组，以便计算每天的人数平均值。\n\n6. `order by min(人数分布表.stat_time) asc`: 按照统计时间（即日期）从小到大排序。"
    },
    {
        "query": "很少发生的异常行为是哪些类型？",
        "script": "```sql\nselect 异常行为类型表.name from t_abnormal_type as 异常行为类型表 where name not in( select 异常类型表.name as 异常行为类型 from d_abnormal_behavior as 异常行为表 join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by count(*) desc  ) limit 10;\n```\n这是一个复杂的SQL查询语句，用于从多个表中获取异常行为类型。下面是各部分的主要功能和解释：\n\n1. `t_abnormal_type`: 异常行为类型表，包含所有可能的异常行为类型名称。\n2. `d_abnormal_behavior`: 异常行为表，记录了各种异常行为的详细信息，包括发生时间、地点等。\n3. `s_camera`: 摄像头表，记录了每个摄像头的ID和相关信息。\n4. `s_room`: 房间表，记录了每个房间的ID和相关信息，包括所属楼栋等信息。\n5. `s_building`: 楼栋表，记录了每个楼栋的ID和相关信息，包括所属区域等信息。\n6. `s_region`: 区域表，记录了每个区域的ID和相关信息，包括所属单位等信息。\n7. `s_organization`: 单位表，记录了每个单位的ID和相关信息。\n8. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 筛选条件，只返回位于“高新校区”的中国科学技术大学的异常行为数据。\n9. `group by 异常类型表.name order by count(*) desc`: 对异常行为类型进行分组并统计每种类型的数量，然后按数量降序排列。\n10. `limit 10`: 从结果中取出前10种异常行为类型。\n\n整个查询的目的是找出在特定区域和单位内（即高新校区的中国科学技术大学）很少发生的异常行为类型，即那些不在上述排序后的列表中的类型。"
    },
    {
        "query": "行政办公楼安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于计算\"行政办公楼\"（假设是某个具体建筑物）上的监控摄像头数量。以下是这个SQL查询语句各部分的具体解释：\n\n1. `select count(*) as 摄像头数量`：选择计数函数（count()）作为返回结果，并为其起一个别名“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：声明查询的数据源，即摄像头的数据表（s_camera）。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：使用内连接（join）将房间数据表（s_room）与摄像头数据表（s_camera）关联起来，关联条件为摄像头表中的pid字段等于房间表的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：同样地，使用内连接将楼栋数据表（s_building）与房间数据表（s_room）关联起来，关联条件为房间表的pid字段等于楼栋表的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：再次使用内连接将区域数据表（s_region）与楼栋数据表（s_building）关联起来，关联条件为楼栋表的pid字段等于区域表的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：最后，使用内连接将单位数据表（s_organization）与区域数据表（s_region）关联起来，关联条件为区域表的pid字段等于单位表的id字段。\n\n7. `where 楼栋表.building_name='行政办公楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询的条件，要求被查询的楼栋名为\"行政办公楼\"、所在区域为\"高新校区\"且所属单位为\"中国科学技术大学\"。\n\n综上，该SQL查询语句会计算出满足特定条件的\"行政办公楼\"上的监控摄像头数量。"
    },
    {
        "query": "信智楼每天有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这个SQL查询语句的目的是获取名为\"信智楼\"的建筑在过去30天内每天的平均人数。以下是各个部分的解释：\n\n1. `min(人数分布表.stat_time) as 统计时间`：返回每日数据中的最早日期，用于按日期排序。\n2. `round(avg(人数分布表.num)) as 平均人数`：计算每天的人数平均值。\n3. `FROM a_people_spread_day_building as 人数分布表`：指定要查询的表格名称。\n4. `WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`：限制查询范围，只考虑过去30天内位于“高新校区”且属于“中国科学技术大学”的“信智楼”的数据。\n5. `group by 人数分布表.stat_day`：按照统计日（即每天的日期）对数据进行分组，以便对每天的人数进行求平均操作。\n6. `order by min(人数分布表.stat_time) asc`：按照统计时间的最小值升序排列结果，即按天排序，最早的日期排在最前面。"
    },
    {
        "query": "近期识别到的人员中，戴帽子的有多少？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个复杂的SQL查询语句，用于从多个关联表中统计满足特定条件的戴帽子的人员数量。以下是各子句和表的简要解释：\n\n1. `select count(*) as 戴帽子人数`：计算符合条件的戴帽子人员的数量。\n2. `from d_people as 人员表`：从人员表（假设名称为d_people）开始查询。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：将摄像头表（假设名称为s_camera）与人员表通过camera_id和id进行关联。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将房间表（假设名称为s_room）与摄像头表通过pid和id进行关联。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将楼栋表（假设名称为s_building）与房间表通过pid和id进行关联。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将区域表（假设名称为s_region）与楼栋表通过pid和id进行关联。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将单位表（假设名称为s_organization）与区域表通过pid和id进行关联。\n8. `join t_hat as 帽子维表 on 人员表.hat=帽子维表.id`：将帽子维表（假设名称为t_hat）与人员表通过hat字段和id进行关联。\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='戴帽子'`：筛选出最近5分钟内的、且被标记为“戴帽子”的人员记录。\n10. `and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：进一步限制查询结果，仅返回位于“高新校区”且属于“中国科学技术大学”的戴帽子人员数量。\n\n综上所述，这个查询语句的目的是在特定的时间和地点范围内，统计并返回戴帽子的人员数量。"
    },
    {
        "query": "3号学科楼人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='3号学科楼' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取3号学科楼的人数。下面是对该SQL语句的分解和解释：\n\n1. select 人数分布表.num as 人数: 从\"人数分布表\"这个表中选择名为\"num\"的字段作为\"人数\"字段。\n2. FROM a_people_spread_day_building as 人数分布表: 从名为\"a_people_spread_day_building\"的表中选择数据，并将其重命名为\"人数分布表\"。\n3. WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5: 筛选出在5小时之前更新的数据。其中，TIMESTAMPDIFF是MySQL中的时间差函数，用于计算两个时间之间的差值；now()表示当前时间。\n4. AND 人数分布表.building_name='3号学科楼': 限制条件，要求\"人数分布表\"中的\"building_name\"（建筑物名称）等于\"3号学科楼\"。\n5. AND 人数分布表.region_name='高新校区': 限制条件，要求\"人数分布表\"中的\"region_name\"（地区名称）等于\"高新校区\"。\n6. AND 人数分布表.org_name='中国科学技术大学': 限制条件，要求\"人数分布表\"中的\"org_name\"（组织机构名称）等于\"中国科学技术大学\"。\n7. ORDER BY 人数分布表.stat_time DESC: 对结果进行排序，按照\"人数分布表\"中的\"stat_time\"（更新时间）降序排列。\n8. LIMIT 1: 限制查询结果的数量，仅返回一条记录。"
    },
    {
        "query": "5号学生公寓安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='5号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个 SQL 查询语句，用于统计 5 号学生公寓的监控摄像头数量。这个查询涉及到多个表（s_camera, s_room, s_building, s_region 和 s_organization），通过连接和条件筛选来获取所需数据。\n\n以下是各子句的解释：\n\n1. `SELECT count(*) as 摄像头数量`: 选择计数函数 COUNT(*)，计算符合条件的摄像头的数量，并将结果命名为 \"摄像头数量\"。\n2. `FROM s_camera as 摄像头表`: 从 s_camera 表开始查询，将其称为 \"摄像头表\"，方便后续引用。\n3. `JOIN s_room as 房间表 ON 摄像头表.pid=房间表.id`: 将 s_room 表连接到查询中，通过摄像头表的 pid（设备ID）与房间表的 id（房间ID）相等的关系进行连接，并将其称为 \"房间表\"。\n4. `JOIN s_building as 楼栋表 ON 房间表.pid=楼栋表.id`: 将 s_building 表连接到查询中，通过房间表的 pid（楼栋ID）与楼栋表的 id（楼栋ID）相等的关系进行连接，并将其称为 \"楼栋表\"。\n5. `JOIN s_region as 区域表 ON 楼栋表.pid=区域表.id`: 将 s_region 表连接到查询中，通过楼栋表的 pid（区域ID）与区域表的 id（区域ID）相等的关系进行连接，并将其称为 \"区域表\"。\n6. `JOIN s_organization as 单位表 ON 区域表.pid=单位表.id`: 将 s_organization 表连接到查询中，通过区域表的 pid（单位ID）与单位表的 id（单位ID）相等的关系进行连接，并将其称为 \"单位表\"。\n7. `WHERE 楼栋表.building_name='5号学生公寓' AND 区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求满足以下条件：楼栋名称为 \"5号学生公寓\"，区域名称为 \"高新校区\"，单位名称（所属机构）为 \"中国科学技术大学\"。\n\n这个查询最后会返回一个结果，即 \"摄像头数量\"，表示符合上述条件的 5 号学生公寓的监控摄像头数量。"
    },
    {
        "query": "统计信智楼一个月内每天平均人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这个SQL语句用于从数据表`a_people_spread_day_building`中统计\"信智楼\"（假设是某个建筑物）在一个月内每天的平均人数。\n\n1. `SELECT min(人数分布表.stat_time) AS 统计时间, ROUND(AVG(人数分布表.num)) AS 平均人数`: 这部分是从数据表中选择需要的列（在这里是`stat_time`和`num`），并计算它们的平均值。`min(人数分布表.stat_time)`获取的是一个月内的最早一天，也就是统计的开始日期；`ROUND(AVG(人数分布表.num))`计算的是每一天的平均人数。\n\n2. `FROM a_people_spread_day_building AS 人数分布表`: 这部分指定了数据来源，即`a_people_spread_day_building`数据表，并为其起了别名\"人数分布表\"以便于后续使用。\n\n3. `WHERE 人数分布表.building_name='信智楼' AND DATEDIFF(NOW(), 人数分布表.stat_time) < 30 AND 人数分布表.region_name='高新校区' AND 人数分布表.org_name='中国科学技术大学'`: 这部分是查询的过滤条件。`building_name='信智楼'`表示只查询\"信智楼\"的数据；`DATEDIFF(NOW(), 人数分布表.stat_time) < 30`表示只查询过去30天内的数据（这里使用了`DATEDIFF`函数来计算两个日期之间的差值）；`region_name='高新校区'`和`org_name='中国科学技术大学'`表示限制查询的数据来源。\n\n4. `GROUP BY 人数分布表.stat_day ORDER BY MIN(人数分布表.stat_time) ASC`: 这部分是数据的分组和排序。`GROUP BY 人数分布表.stat_day`表示按每一天进行分组，这样就可以计算每一天的平均人数；`ORDER BY MIN(人数分布表.stat_time) ASC`表示按照每一天的最早时间（也就是统计的开始日期）从小到大排序，这样可以让结果按照统计开始的日期先后顺序展示。"
    },
    {
        "query": "信智楼5分钟内识别到多少不戴眼镜的行人？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='未戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于在“信智楼”（假设是一个建筑名称）的5分钟内，统计不戴眼镜的行人数量。以下是各子句和表之间的连接关系：\n\n1. `select count(*) as 戴眼镜人数`: 选择计数函数count()作为结果集，并将返回值重命名为\"戴眼镜人数\"。\n2. `from d_people as 人员表`: 从\"d_people\"表开始查询，并为其指定一个别名\"人员表\"。\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 将\"s_camera\"表与\"d_people\"表通过\"camera_id\"字段进行内连接，并为\"s_camera\"表指定别名\"摄像头表\"。\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将\"s_room\"表与\"摄像头表\"表通过\"pid\"字段进行内连接，并为\"s_room\"表指定别名\"房间表\"。\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将\"s_building\"表与\"房间表\"表通过\"pid\"字段进行内连接，并为\"s_building\"表指定别名\"楼栋表\"。\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将\"s_region\"表与\"楼栋表\"表通过\"pid\"字段进行内连接，并为\"s_region\"表指定别名\"区域表\"。\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将\"s_organization\"表与\"区域表\"表通过\"pid\"字段进行内连接，并为\"s_organization\"表指定别名\"单位表\"。\n8. `join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id`: 将\"t_glasses\"表与\"人员表\"表通过\"glasses\"字段进行内连接，并为\"t_glasses\"表指定别名\"眼镜维表\"。\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='未戴眼镜' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`: 这部分是条件筛选，要求满足以下条件：当前时间减去人员表的记录时间不超过5分钟；眼镜维表中的名字为'未戴眼镜'；所在区域为'高新校区'；所在单位为'中国科学技术大学'；所在的楼宇为'信智楼'。\n\n综上所述，这个SQL查询语句的目的是在“信智楼”的5分钟内，统计不戴眼镜的行人数量。"
    },
    {
        "query": "7号学生公寓安装的监控数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='7号学生公寓' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这个SQL查询语句的目的是为了计算7号学生公寓（假设这是某个学校的学生公寓）的监控设备（摄像头）的数量。\n\n首先，这个查询涉及到了四个表，分别是：s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）。\n\n接着，这个查询通过一系列的JOIN操作将这些表连接起来。具体来说，它是通过摄像头表的pid与房间表的id相等，房间表的pid与楼栋表的id相等，楼栋表的pid与区域表的id相等，以及区域表的pid与单位表的id相等来实现的。\n\n然后，查询条件是“楼栋表.building_name = '7号学生公寓'”，表示只选择7号学生公寓的数据；同时“区域表.region_name = '高新校区'” 和 “单位表.org_name = '中国科学技术大学'”，这表示了数据的来源和所属的单位。\n\n最后，使用COUNT函数并给定别名“摄像头数量”来计算满足上述条件的摄像头的总数。"
    },
    {
        "query": "学生食堂安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从多个表中联合查询并统计符合条件的摄像头数量。以下是各子句的解释：\n\n1. `SELECT count(*) as 摄像头数量`: 选择计数函数count(*)，计算满足条件的摄像头的数量，并将其命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`: 从名为s_camera的表中开始查询，将该表简称为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 将s_room表（简称\"房间表\"）与s_camera表进行连接，连接条件是摄像头表的pid字段等于房间表的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 将s_building表（简称\"楼栋表\"）与房间表进行连接，连接条件是房间表的pid字段等于楼栋表的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 将s_region表（简称\"区域表\"）与楼栋表进行连接，连接条件是楼栋表的pid字段等于区域表的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 将s_organization表（简称\"单位表\"）与区域表进行连接，连接条件是区域表的pid字段等于单位表的id字段。\n\n7. `where 楼栋表.building_name='学生食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求楼栋表的building_name字段值为\"学生食堂\"，区域表的region_name字段值为\"高新校区\"，单位表的org_name字段值为\"中国科学技术大学\"。\n\n通过这个查询，可以得到满足上述条件的摄像头数量。"
    },
    {
        "query": "学生食堂人数",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='学生食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个 SQL（结构化查询语言）语句，用于从数据库中获取特定时间范围内学生食堂的人数信息。下面是该SQL语句的各个部分和功能说明：\n\n1. `select 人数分布表.num as 人数`: 选择`num`列作为输出结果，并为其赋予别名“人数”。`num`表示在数据表中存储人数的列名。\n\n2. `from a_people_spread_day_building as 人数分布表`: 从名为`a_people_spread_day_building`的数据表中选择数据。这里将其别名为“人数分布表”以便于后续查询操作。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 过滤条件，只选取`stat_time`（记录时间）与当前时间（通过调用函数`now()`获得）的时间差小于5小时的记录。\n\n4. `and 人数分布表.building_name='学生食堂'`: 进一步过滤，只保留`building_name`字段值为“学生食堂”的记录。\n\n5. `and 人数分布表.region_name='高新校区'`: 根据地区名称筛选出位于\"高新校区\"的记录。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 根据组织名称筛选出属于\"中国科学技术大学\"的记录。\n\n7. `order by 人数分布表.stat_time desc limit 1`: 对查询结果按照`stat_time`降序排列，并限制返回的结果数量为1条。这样最终将得到最近一次记录的食堂人数。"
    },
    {
        "query": "告诉我现在教工食堂有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='教工食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于获取当前在教工食堂的人数。下面是对这个查询语句的详细解释：\n\n1. `select 人数分布表.num as 人数`：选择字段`num`（假设这是表示人数的字段）作为结果集的列名`人数`；\n\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源表名为`a_people_spread_day_building`，并将其简称为`人数分布表`；\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：设置一个时间条件，即从`人数分布表`的记录创建时间（`stat_time`）到现在的小时差小于5小时；\n\n4. `and 人数分布表.building_name='教工食堂'`：添加一个筛选条件，只选择`building_name`（建筑物名称）字段值为'教工食堂'的记录；\n\n5. `and 人数分布表.region_name='高新校区'`：添加另一个筛选条件，只选择`region_name`（区域名称）字段值为'高新校区'的记录；\n\n6. `and 人数分布表.org_name='中国科学技术大学'`：添加第三个筛选条件，只选择`org_name`（组织名称）字段值为'中国科学技术大学'的记录；\n\n7. `order by 人数分布表.stat_time desc`：按照`stat_time`（记录创建时间）降序排列结果集；\n\n8. `limit 1`：限制结果集的行数为1，即只返回最近一条满足上述条件的记录。"
    },
    {
        "query": "有多少行人不戴眼镜？",
        "script": "```sql\nselect count(*) as 戴眼镜人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_glasses as 眼镜维表 on 人员表.glasses=眼镜维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 眼镜维表.name='未戴眼镜'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这个SQL查询语句的目的是计算某个特定时间和地点范围内、没有戴眼镜的行人数量。下面是各子句的作用解释：\n\n1. `SELECT count(*) AS 戴眼镜人数`: 选择行数作为结果变量“戴眼镜人数”。\n2. `FROM d_people AS 人员表`: 从名为\"d_people\"的表格（在这里称为“人员表”）开始查询。\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`: 联接名为\"s_camera\"的表格（在这里称为“摄像头表”），以匹配人员表中的摄像头的ID。\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 联接名为\"s_room\"的表格（在这里称为“房间表”），以匹配摄像头表中的房间的ID。\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 联接名为\"s_building\"的表格（在这里称为“楼栋表”），以匹配房间表中的楼栋的ID。\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 联接名为\"s_region\"的表格（在这里称为“区域表”），以匹配楼栋表中的区域的ID。\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 联接名为\"s_organization\"的表格（在这里称为“单位表”），以匹配区域表中的单位的ID。\n8. `JOIN t_glasses AS 眼镜维表 ON 人员表.glasses = 眼镜维表.id`: 联接名为\"t_glasses\"的表格（在这里称为“眼镜维表”），以匹配人员表中的眼镜的ID。\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, NOW()) < 5 AND 眼镜维表.name = '未戴眼镜' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 设置查询条件，要求时间差（从人员表记录的时间到现在的时长）小于5分钟，并且眼镜维表中的眼镜名称是“未戴眼镜”，同时区域表的区域名称为“高新校区”和单位表的单位名称为“中国科学技术大学”。\n\n综合以上，这个查询语句旨在计算在指定时间和区域内、未戴眼镜的行人数量。"
    },
    {
        "query": "手里拿东西的人数",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一段SQL查询语句，用于计算特定条件下的“手里拿东西的人数”。下面是这段SQL的解释：\n\n1. select count(*) as 手里拿东西的人数：选择计数函数count(*)作为返回结果，并将结果命名为\"手里拿东西的人数\"。\n\n2. from d_people as 人员表：从d_people表（这里是人员的数据）开始查询。\n\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id：将s_camera表（这里是摄像头的数据）与d_people表通过on子句连接在一起，连接条件是人员表的camera_id等于摄像头表的id。\n\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id：将s_room表（这里是房间的数据）与s_camera表通过on子句连接在一起，连接条件是摄像头表的pid等于房间表的id。\n\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id：将s_building表（这里是楼栋的数据）与s_room表通过on子句连接在一起，连接条件是房间表的pid等于楼栋表的id。\n\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id：将s_region表（这里是区域的数据）与s_building表通过on子句连接在一起，连接条件是楼栋表的pid等于区域表的id。\n\n7. join s_organization as 单位表 on 区域表.pid=单位表.id：将s_organization表（这里是单位的data）与s_region表通过on子句连接在一起，连接条件是区域表的pid等于单位表的id。\n\n8. join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id：将t_hold_object表（这里存放持物信息的数据）与d_people表通过on子句连接在一起，连接条件是人员表的hold_obj等于持物维表的id。\n\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'：设置查询的WHERE条件，要求满足以下条件：当前时间距离人员表中的记录时间小于5分钟；持物维表中的name字段值为'持物'；区域表的region_name字段值为'高新校区'；单位表的org_name字段值为'中国科学技术大学'。"
    },
    {
        "query": "给出体育场安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段 SQL 语句，用于查询满足特定条件的体育场摄像头数量。下面是各子句的详细解释：\n\n1. select count(*) as 摄像头数量: 选择计数 (*) 为摄像头数量。\n2. from s_camera as 摄像头表, s_room as 房间表, s_building as 楼栋表, s_region as 区域表, s_organization as 单位表: 从五个关联表（分别为摄像头表、房间表、楼栋表、区域表和单位表）中获取数据。\n3. on 摄像头表.pid=房间表.id, 摄像头表.pid=楼栋表.id, 房间表.pid=楼栋表.id, 楼栋表.pid=区域表.id, 区域表.pid=单位表.id: 这五个 ON 子句表示摄像头表分别与房间表、楼栋表、区域表和单位表之间存在关联关系，关联条件是摄像头表的 pid 字段值等于其他表的 id 字段值。\n4. where 楼栋表.building_name='体育场', 区域表.region_name='高新校区', 单位表.org_name='中国科学技术大学': WHERE 子句设置查询条件，要求查询结果中的楼栋名称为“体育场”，区域名称为“高新校区”，单位名称（即所属组织）为“中国科学技术大学”。\n\n这段 SQL 语句的目的是统计满足特定条件的体育场的摄像头数量，具体条件为：该体育场属于“高新校区”的“中国科学技术大学”，并且摄像头数量需要根据这些关联表进行查询计算。"
    },
    {
        "query": "近期识别到的人员中，手中持物的有多少？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这是一个SQL查询语句，用于计算在特定时间和区域内，有多少人手中持有物品。以下是各个子句的解释：\n\n1. `SELECT count(*) as 手里拿东西的人数`: 返回满足条件的手中持有物品的人数。\n2. `FROM d_people as 人员表`: 数据源是人员表（假设名为`d_people`），这个表存储了所有人的信息。\n3. `JOIN s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`: 连接摄像头表（假设名为`s_camera`），通过摄像头的ID将人员表和摄像头表关联起来。\n4. `JOIN s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接房间表（假设名为`s_room`），通过房间的ID将摄像头表和房间表关联起来。\n5. `JOIN s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接楼栋表（假设名为`s_building`），通过楼栋的ID将房间表和楼栋表关联起来。\n6. `JOIN s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接区域表（假设名为`s_region`），通过区域的ID将楼栋表和区域表关联起来。\n7. `JOIN s_organization as 单位表 on 区域表.pid=单位表.id`: 连接单位表（假设名为`s_organization`），通过单位的ID将区域表和单位表关联起来。\n8. `JOIN t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`: 连接持物维表（假设名为`t_hold_object`），通过持物的ID将人员表和持物维表关联起来。\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 AND 持物维表.name='持物' AND 区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学'`: 设定查询条件，限制只查询最近5分钟内的记录，并且是在\"高新校区\"的中国科学技术大学的范围内，且人员表中持有的物品名称必须为\"持物\"。"
    },
    {
        "query": "近期识别到多少不戴帽子的行人？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='未戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学';\n```\n这个SQL查询语句是用来统计特定时间内（比如过去五分钟）在特定区域（如高新校区）的中国科学技术大学内的摄像头抓拍到的不戴帽子的行人的数量。\n\n以下是各子句的解读：\n\n1. `SELECT count(*) as 戴帽子人数`: 这是查询的主体部分，用于计算满足条件的行人数量。\n\n2. `FROM d_people AS 人员表`: 这是数据表，存储了行人的信息，包括摄像头ID和抓拍时间。\n\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`: 这一步将摄像头表与人员表关联起来，以便获取每个行人的摄像头信息。\n\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 这一步将房间表与摄像头表关联起来，以便获取每个摄像头的房间信息。\n\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 这一步将楼栋表与房间表关联起来，以便获取每个房间的楼栋信息。\n\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 这一步将区域表与楼栋表关联起来，以便获取每个楼栋的区域信息。\n\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 这一步将单位表与区域表关联起来，以便获取每个区域的单位信息。\n\n8. `JOIN t_hat AS 帽子维表 ON 人员表.hat = 帽子维表.id`: 这一步将帽子维表与人员表关联起来，以便获取每个行人的帽子信息。\n\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 AND 帽子维表.name = '未戴帽子' AND 区域表.region_name = '高新校区' AND 单位表.org_name = '中国科学技术大学'`: 这一步是过滤条件，用于筛选出最近五分钟内、位于高新校区的中国科学技术大学的摄像头抓拍到的不戴帽子的行人的记录。"
    },
    {
        "query": "图书馆每天有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(avg(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='图书教育中心' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一段 SQL 语言，用于查询某个特定图书馆在一定时间内的平均人数。下面是各部分解释：\n\n1. `SELECT`: 这是 SQL 语句的开始，表示从接下来的表格中选择某些字段和数据。\n\n2. `MIN(人数分布表.stat_time) AS 统计时间`: 选择最小的时间（即最早的记录）作为“统计时间”输出。\n\n3. `ROUND(AVG(人数分布表.num)) AS 平均人数`: 计算每天的平均人数，四舍五入到整数。\n\n4. `FROM a_people_spread_day_building AS 人数分布表`: 从名为 \"a_people_spread_day_building\" 的表格中选取数据，并将其简称为 \"人数分布表\"。\n\n5. `WHERE 人数分布表.building_name='图书教育中心' AND DATEDIFF(NOW(), 人数分布表.stat_time) < 30 AND 人数分布表.region_name='高新校区' AND 人数分布表.org_name='中国科学技术大学'`: 设定筛选条件，只选择符合这些条件的记录。这里是选择名为 \"图书教育中心\" 的图书馆、距离现在时间不超过 30 天、位于 \"高新校区\" 和属于 \"中国科学技术大学\" 的数据。\n\n6. `GROUP BY 人数分布表.stat_day`: 对每一天的数据进行分组，以便计算每天的平均人数。\n\n7. `ORDER BY MIN(人数分布表.stat_time) ASC`: 根据最早的时间对结果进行排序，升序排列。"
    },
    {
        "query": "信智楼有多少人未持物？",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一条复杂的SQL查询语句，用于计算某个时间范围内在指定区域内、某个具体楼栋中未持有物品的人数。下面是对这条SQL的详细解析：\n\n1. `select count(*) as 手里拿东西的人数`：查询结果为一个数值，表示手里拿东西的人数。\n\n2. `from d_people as 人员表`：从d_people表中获取数据，该表存储了人员的信息。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接s_camera表，通过摄像头ID将摄像头信息与人员关联。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接s_room表，通过房间ID将房间信息与摄像头关联。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接s_building表，通过楼栋ID将楼栋信息与房间关联。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接s_region表，通过区域ID将区域信息与楼栋关联。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接s_organization表，通过单位ID将单位信息与区域关联。\n\n8. `join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id`：连接t_hold_object表，通过持物ID将持物信息与人员关联。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：限制条件，表示查询的时间范围在过去5分钟内。\n\n10. `and 持物维表.name='未持物'`：限制条件，表示查询的是未持有物品的人员。\n\n11. `and 区域表.region_name='高新校区'`：限制条件，表示查询的区域为高新校区。\n\n12. `and 单位表.org_name='中国科学技术大学'`：限制条件，表示查询的单位为中国科学技术大学。\n\n13. `and 楼栋表.building_name='信智楼'`：限制条件，表示查询的楼栋为信智楼。"
    },
    {
        "query": "食堂每天最少有多少人？",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(min(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这个SQL语句是用于查询某个特定的学生食堂（假设名为“学生食堂”）在特定时间段（当前日期减去30天之内）内的最小人数。以下是各个部分的详细说明：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选择最小的统计时间作为查询结果的一部分；\n2. `round(min(人数分布表.num)) as 平均人数`: 对最小的人数进行四舍五入取整；\n3. `from a_people_spread_day_building as 人数分布表`: 从数据表a_people_spread_day_building中获取数据，并将其命名为“人数分布表”；\n4. `WHERE 人数分布表.building_name='学生食堂' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学'`: 设置筛选条件，即只考虑名为“学生食堂”的建筑物，并且统计时间在当前日期减去30天之内，所在的区域为“高新校区”，所属组织为“中国科学技术大学”的数据；\n5. `group by 人数分布表.stat_day`: 按照统计日期对数据进行分组；\n6. `order by min(人数分布表.stat_time) asc`: 按统计时间的升序排列查询结果。"
    },
    {
        "query": "图教中心总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个SQL查询语句，用于从数据库中获取某个特定建筑（如\"图书教育中心\"）的摄像头数量。这个查询涉及到了多个表的连接和筛选条件。下面是对这个查询的解释：\n\n1. `select count(*) as 摄像头数量`：选择计算摄像头的数量，将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：指定摄像头的数据来自s_camera表，为了方便理解，这里将其称为“摄像头表”。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：将摄像头表与房间表通过摄像头所在的房间ID（即摄像头表中的pid字段）进行连接。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：将房间表与楼栋表通过房间所属的楼栋ID（即房间表中的pid字段）进行连接。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：将楼栋表与区域表通过楼栋所属的区域ID（即楼栋表中的pid字段）进行连接。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：将区域表与单位表通过区域所属的单位ID（即区域表中的pid字段）进行连接。\n\n7. `where 楼栋表.building_name='图书教育中心' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置筛选条件，只返回满足条件的记录，即：楼栋名为“图书教育中心”，区域名为“高新校区”，单位为“中国科学技术大学”的数据。\n\n8. 最后，这个查询会返回符合条件的摄像头数量。"
    },
    {
        "query": "信智楼5分钟内识别到多少未背包的行人？",
        "script": "```sql\nselect count(*) as 背双肩包的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_bag as 背包维表 on 人员表.bag=背包维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 背包维表.name='未背包'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一个SQL查询语句，用于在5分钟时间内（即现在时间减去5分钟）统计信智楼内未背包的行人数量。下面是各子句的解释：\n\n1. `SELECT COUNT(*) AS 背双肩包的人数`: 选择计数函数COUNT，计算满足条件的行人数量。\n2. `FROM d_people AS 人员表`: 从数据表d_people（人员表）开始查询。\n3. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id = 摄像头表.id`: 连接摄像头表，以摄像头ID作为连接条件。\n4. `JOIN s_room AS 房间表 ON 摄像头表.pid = 房间表.id`: 连接房间表，以摄像头所在房间的ID作为连接条件。\n5. `JOIN s_building AS 楼栋表 ON 房间表.pid = 楼栋表.id`: 连接楼栋表，以房间所属楼栋的ID作为连接条件。\n6. `JOIN s_region AS 区域表 ON 楼栋表.pid = 区域表.id`: 连接区域表，以楼栋所属区域的ID作为连接条件。\n7. `JOIN s_organization AS 单位表 ON 区域表.pid = 单位表.id`: 连接单位表，以区域所属单位的ID作为连接条件。\n8. `JOIN t_bag AS 背包维表 ON 人员表.bag = 背包维表.id`: 连接背包维表，以人员的背包类型作为连接条件。\n9. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, NOW()) < 5 AND 背包维表.name = '未背包'`: 设置查询条件，限制只查询最近5分钟内的情况，且仅统计未背包的行人。\n10. `AND 区域表.region_name = '高新校区'`: 设置查询条件，限制只查询高新校区的情况。\n11. `AND 单位表.org_name = '中国科学技术大学'`: 设置查询条件，限制只查询中国科学技术大学的情况。\n12. `AND 楼栋表.building_name = '信智楼'`: 设置查询条件，限制只查询信智楼的情况。\n\n最后，这个查询将返回信智楼5分钟内识别到的未背包的行人数量。"
    },
    {
        "query": "操场总共安装了多少个摄像头？",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于计算在某个特定条件下的摄像头的数量。下面是对这段SQL的解释：\n\n1. `select count(*) as 摄像头数量`：这条语句用于计算满足后续条件的摄像头的数量。`count(*)`函数统计满足条件的数据条数，`as 摄像头数量`将结果命名为“摄像头数量”。\n\n2. `from s_camera as 摄像头表`：声明从s_camera这张表（摄像头表）开始查询，并将该表简称为摄像头表，方便后续的连接操作。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，连接条件是摄像头表的pid字段等于房间表的id字段。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，连接条件是房间表的pid字段等于楼栋表的id字段。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，连接条件是楼栋表的pid字段等于区域表的id字段。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，连接条件是区域表的pid字段等于单位表的id字段。\n\n7. `where 楼栋表.building_name='体育场' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：设置查询条件，只有当楼栋表的建筑名称为“体育场”，区域表的片区名称为“高新校区”，单位表的单位名称为“中国科学技术大学”时，才会返回对应的摄像头数量。"
    },
    {
        "query": "找出7天内各类型异常行为数量分布情况",
        "script": "```sql\nselect 异常类型表.name as 异常行为类型, count(*) as 异常行为数量 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) < 7 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' group by 异常类型表.name  order by 异常类型表.name asc;\n```\n这是一段用于查询数据库中7天内各类型异常行为数量分布情况的SQL语句。以下是各个子句的详细解释：\n\n1. select 子句：选择了需要查询的列（字段）。这里选择了异常行为类型的名称（name）和异常行为的数量（count(*))。\n\n2. from 子句：指定了数据来源。这里是通过连接多个表（d_abnormal_behavior、s_camera、s_room、s_building、s_region和s_organization）来获取数据的。\n\n3. join 子句：用于连接多个表以获取所需的数据。这里的连接条件是：异常行为表（d_abnormal_behavior）的 camera_id 与摄像头表（s_camera）的 id 相等，摄像头表的 pid 与房间表（s_room）的 id 相等，以此类推。\n\n4. where 子句：设置查询条件。这里设置了两个条件：一是查询的时间范围在7天内（DATEDIFF(now(), 异常行为表.moment) < 7）；二是查询的区域和单位名称为“高新校区”和“中国科学技术大学”。\n\n5. group by 子句：用于对结果进行分组。这里按照异常行为类型表的名称（name）进行分组。\n\n6. order by 子句：用于对结果进行排序。这里按照异常行为类型表的名称（name）升序排序。"
    },
    {
        "query": "信智楼手里没拿东西的人数",
        "script": "```sql\nselect count(*) as 手里拿东西的人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 持物维表.name='未持物'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段SQL查询语句，用于统计信智楼（假设是一个建筑名称）里手里没有拿东西的人数。以下是各子句的解释：\n\n1. select count(*) as 手里拿东西的人数: 选择计数函数count()计算人数。\n\n2. from d_people as 人员表: 假设d_people是人员信息表，用于存储每个人的信息。\n\n3. join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id: 连接摄像头表s_camera，通过摄像头ID（假设每个摄像头都有一个ID）将人员表和摄像头表关联起来。\n\n4. join s_room as 房间表 on 摄像头表.pid=房间表.id: 连接房间表s_room，通过房间ID（假设每个摄像头都属于一个房间）将摄像头表和房间表关联起来。\n\n5. join s_building as 楼栋表 on 房间表.pid=楼栋表.id: 连接楼栋表s_building，通过楼栋ID（假设每个房间都属于一个楼栋）将房间表和楼栋表关联起来。\n\n6. join s_region as 区域表 on 楼栋表.pid=区域表.id: 连接区域表s_region，通过区域ID（假设每个楼栋都属于一个区域）将楼栋表和区域表关联起来。\n\n7. join s_organization as 单位表 on 区域表.pid=单位表.id: 连接单位表s_organization，通过单位ID（假设每个区域都属于一个单位，例如学校或公司）将区域表和单位表关联起来。\n\n8. join t_hold_object as 持物维表 on 人员表.hold_obj=持物维表.id: 连接持物维表t_hold_object，通过持物ID（假设每个人在某个时刻可以持有某种物品）将人员表和持物维表关联起来。\n\n9. where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5: 限制条件，表示只考虑过去5分钟内的数据。\n\n10. and 持物维表.name='未持物': 限制条件，表示只考虑手里没有拿东西的人。\n\n11. and 区域表.region_name='高新校区': 限制条件，表示只考虑位于高新校区的数据。\n\n12. and 单位表.org_name='中国科学技术大学': 限制条件，表示只考虑属于中国科学技术大学的数据。\n\n13. and 楼栋表.building_name='信智楼': 限制条件，表示只考虑位于信智楼的数据。"
    },
    {
        "query": "近期异常事件",
        "script": "```sql\nselect 异常行为表.camera_id as 摄像头编号, 房间表.room_name as 异常发生地点, 异常行为表.moment as 异常发生时刻, 异常类型表.name as 异常类型 from d_abnormal_behavior as 异常行为表  join s_camera as 摄像头表 on 异常行为表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_abnormal_type as 异常类型表 on 异常行为表.abnormal_type=异常类型表.id  where DATEDIFF(now(), 异常行为表.moment) <1 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 异常行为表.moment desc limit 10;\n```\n这是一段SQL查询语句，用于从多个表中获取特定条件下的数据。下面是每个部分的具体解释：\n\n1. `d_abnormal_behavior`：表示异常行为表，用于存储异常行为的详细信息。\n2. `s_camera`：表示摄像头表，用于存储摄像头的基本信息。\n3. `s_room`：表示房间表，用于存储房间的详细信息。\n4. `s_building`：表示楼栋表，用于存储楼栋的详细信息。\n5. `s_region`：表示区域表，用于存储区域的详细信息。\n6. `s_organization`：表示单位表，用于存储单位的详细信息。\n7. `t_abnormal_type`：表示异常类型表，用于存储异常的类型信息。\n8. `DATEDIFF(now(), 异常行为表.moment) <1`：这个子句用于筛选出最近发生的异常行为，即过去24小时内的异常行为。其中，`DATEDIFF()`函数用于计算两个日期之间的差值。\n9. `区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这两个子句用于筛选出位于“高新校区”且属于“中国科学技术大学”的异常行为数据。\n10. `order by 异常行为表.moment desc limit 10`：这个子句用于按异常发生时刻降序排列结果集，并只返回前10条记录。"
    },
    {
        "query": "教工食堂摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一段SQL查询语句，用于从多个表中联合查询并计算“教工食堂”的摄像头数量。下面是对这段代码的详细解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数COUNT()，对满足条件的结果进行统计，将统计结果命名为\"摄像头数量\"。\n\n2. `from s_camera as 摄像头表`: 从s_camera表（假设这是存储摄像头信息的表）开始查询，为了方便阅读，将其简写为\"摄像头表\"。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接s_room表（假设这是存储房间信息的表），连接条件是摄像头表中的pid等于房间表的id。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接s_building表（假设这是存储楼栋信息的表），连接条件是房间表的pid等于楼栋表的id。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接s_region表（假设这是存储区域信息的表），连接条件是楼栋表的pid等于区域表的id。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接s_organization表（假设这是存储单位信息的表），连接条件是区域表的pid等于单位表的id。\n\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 设置查询条件，要求楼栋名为\"教工食堂\"、所在区域为\"高新校区\"并且所属单位为\"中国科学技术大学\"。\n\n通过以上操作，该SQL语句将从摄像头表、房间表、楼栋表、区域表和单位表中筛选出所有满足条件的数据，并对这些数据进行统计，得到教工食堂的摄像头数量。"
    },
    {
        "query": "信智楼不同下衣风格的人数",
        "script": "```sql\nselect substring(人员表.lower,6) as 下衣风格, count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.lower  order by 人员表.lower asc;\n```\n这是一个SQL查询语句，用于从数据库中获取特定条件下的数据。以下是各部分的具体含义：\n\n1. `SELECT`: 选择需要输出的字段。在这个例子中，选择了\"下衣风格\"和\"人数\"两个字段。\n\n2. `SUBSTRING(人员表.lower, 6) AS 下衣风格`: 这部分是提取\"人员表\"的\"lower\"字段的子字符串，并命名为\"下衣风格\"。这里是从第6个字符开始提取，具体长度可能根据需求调整。\n\n3. `COUNT(*) AS 人数`: 计算满足条件的\"人员表\"的数量，并将其命名为\"人数\"。\n\n4. `FROM d_people AS 人员表`: 指定数据来源，即\"d_people\"表，并为其取名为\"人员表\"。\n\n5. `JOIN s_camera AS 摄像头表 ON 人员表.camera_id=摄像头表.id`: 这部分是将\"s_camera\"表（摄像头表）与\"d_people\"表（人员表）通过\"camera_id\"字段连接在一起。\n\n6. `JOIN s_room AS 房间表 ON 摄像头表.pid=房间表.id`: 这部分是将\"s_room\"表（房间表）与\"摄像头表\"通过\"pid\"字段连接在一起。\n\n7. `JOIN s_building AS 楼栋表 ON 房间表.pid=楼栋表.id`: 这部分是将\"s_building\"表（楼栋表）与\"房间表\"通过\"pid\"字段连接在一起。\n\n8. `JOIN s_region AS 区域表 ON 楼栋表.pid=区域表.id`: 这部分是将\"s_region\"表（区域表）与\"楼栋表\"通过\"pid\"字段连接在一起。\n\n9. `JOIN s_organization AS 单位表 ON 区域表.pid=单位表.id`: 这部分是将\"s_organization\"表（单位表）与\"区域表\"通过\"pid\"字段连接在一起。\n\n10. `WHERE TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 AND 区域表.region_name='高新校区' AND 单位表.org_name='中国科学技术大学' AND 楼栋表.building_name='信智楼'`: 这部分是设置查询条件，包括时间差、校区名称、单位名称和楼栋名称。这里的\"TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5\"表示查询的时间间隔不能超过5分钟。\n\n11. `GROUP BY 人员表.lower`: 这部分是按照\"人员表.lower\"字段对数据进行分组。\n\n12. `ORDER BY 人员表.lower ASC`: 这部分是对分组后的数据按照\"人员表.lower\"字段的值从小到大排序。"
    },
    {
        "query": "信智楼有多少行人戴帽子？",
        "script": "```sql\nselect count(*) as 戴帽子人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id join t_hat as 帽子维表 on 人员表.hat=帽子维表.id  where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 帽子维表.name='戴帽子'      and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼';\n```\n这是一段用于查询\"信智楼\"的SQL语句，主要目的是获取在\"信智楼\"内，距离当前时间五分钟以内、且佩戴帽子的行人数量。以下是各子句的作用：\n\n1. `select count(*) as 戴帽子人数`：选择计数函数count(*)，将结果命名为“戴帽子人数”，即统计满足条件的行人总数。\n\n2. `from d_people as 人员表`：声明数据表d_people（假设是存储行人的信息）作为\"人员表\"。\n\n3. `join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id`：连接s_camera表（假设是存储摄像头的ID信息），连接条件是“人员表的摄像头ID等于摄像头表的ID”。\n\n4. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接s_room表（假设是存储每个房间的信息），连接条件是“摄像头表的父ID（PID）等于房间表的ID”。\n\n5. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接s_building表（假设是存储每栋建筑的信息），连接条件是“房间表的父ID（PID）等于楼栋表的ID”。\n\n6. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接s_region表（假设是存储每个地区的信息），连接条件是“楼栋表的父ID（PID）等于区域表的ID”。\n\n7. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接s_organization表（假设是存储每个单位的信息），连接条件是“区域表的父ID（PID）等于单位表的ID”。\n\n8. `join t_hat as 帽子维表 on 人员表.hat=帽子维表.id`：连接t_hat表（假设是存储每种帽子的信息），连接条件是“人员表的帽子类型等于帽子维表的ID”。\n\n9. `where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5`：筛选条件，只考虑在五分钟内抓拍到的人脸图片。\n\n10. `and 帽子维表.name='戴帽子'`：筛选条件，只考虑穿戴帽子类型的行人。\n\n11. `and 区域表.region_name='高新校区'`：筛选条件，只考虑位于\"高新校区\"的行人。\n\n12. `and 单位表.org_name='中国科学技术大学'`：筛选条件，只考虑属于\"中国科学技术大学\"单位的行人。\n\n13. `and 楼栋表.building_name='信智楼'`：筛选条件，只考虑位于\"信智楼\"内的摄像头抓拍到的行人。\n\n综合以上条件，该SQL语句会返回\"信智楼\"内、且在五分钟内抓拍到并戴帽子的行人数量。"
    },
    {
        "query": "目前信智楼有多少个房间是有人的？",
        "script": "```sql\nselect count(房间表.room_name) 有人的房间数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'     and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10);\n```\n这是一段SQL查询语句，用于计算\"信智楼\"当前有多少个房间有人的情况。具体解释如下：\n\n1. `select count(房间表.room_name) 有人的房间数量`：这条语句用于统计有人的房间数量。`count()`函数用于计算满足条件的记录数。这里以`room_name`作为计数依据，即统计`room_name`字段值不同的房间数量。\n\n2. `from s_camera as 摄像头表`：声明数据源是`s_camera`表，并将其简称为摄像头表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：连接摄像头表和房间表，将两者通过`pid`和`id`字段关联起来。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：连接房间表和楼栋表，将两者通过`pid`和`id`字段关联起来。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：连接楼栋表和区域表，将两者通过`pid`和`id`字段关联起来。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：连接区域表和单位表，将两者通过`pid`和`id`字段关联起来。\n\n7. `where 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼'`：过滤条件，只选取满足这些条件的数据。这里筛选出位于\"高新校区\"、属于\"中国科学技术大学\"的\"信智楼\"的数据。\n\n8. `and 摄像头表.id in (select distinct camera_id as 摄像头ID from d_people as 人员表 where TIMESTAMPDIFF(MINUTE, moment, now()) < 10)`：进一步过滤条件，只选取满足这个条件的摄像头表数据。这里表示只有当摄像头的ID存在于最近10分钟内有人员的列表中时，才将其视为有人的房间。"
    },
    {
        "query": "室外摄像头有哪些？",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 房间表.room_name as 安装位置, 楼栋表.building_name as 所在大楼 from s_camera as 摄像头表 join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 摄像头表.inhouse=0 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id  limit 1000;\n```\n这个SQL查询语句的目的是从多个表中获取和筛选出满足特定条件的数据。具体来说，它涉及到以下几个步骤：\n\n1. 连接（JOIN）操作：将s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）这五个表通过ON子句中的条件进行连接。\n\n2. WHERE子句：筛选出在“高新校区”且隶属于“中国科学技术大学”的摄像头，并确保这些摄像头不在室内（即inhouse=0）。\n\n3. ORDER BY子句：按照摄像头的id对结果进行排序。\n\n4. LIMIT子句：限制返回的结果数量，这里设置为1000条。\n\n最后，查询结果会包含摄像头的编号（摄像头表.id）、安装位置（房间表.room_name）、所在大楼（楼栋表.building_name）等信息。"
    },
    {
        "query": "信智楼最近识别到的人员中，不同年龄段分别有多少人？",
        "script": "```sql\nselect case 人员表.age_group when 'AgeLess18' then '小于18岁' when 'Age18-60' then '18-60岁' else '大于60岁' end as '年龄组', count(*) as 人数 from d_people as 人员表  join s_camera as 摄像头表 on 人员表.camera_id=摄像头表.id join s_room as 房间表 on 摄像头表.pid=房间表.id  join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where TIMESTAMPDIFF(MINUTE, 人员表.moment, now()) < 5 and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' and 楼栋表.building_name='信智楼' group by 人员表.age_group  order by 人员表.age_group asc;\n```\n这个SQL查询语句的目的是统计信智楼最近识别到的人员中，不同年龄段的人数。下面是各子句的解析：\n\n1. select子句: 通过case表达式将age_group字段转换成描述性的年龄分组，并使用count函数计算每个分组的人数。\n2. from子句: 连接d_people（人员表）、s_camera（摄像头表）、s_room（房间表）、s_building（楼栋表）、s_region（区域表）和s_organization（单位表）六个表。\n3. where子句: 设置时间条件（识别时间距离当前时间小于五分钟）和地理条件（在高新校区的中国科学技术大学信智楼范围内）。\n4. group by子句: 根据年龄分组进行分组统计。\n5. order by子句: 按年龄分组升序排列。"
    },
    {
        "query": "行政与师生服务中心现在有多少人？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='行政与师生服务中心' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句，用于从数据库中获取特定时间范围内的“行政与师生服务中心”的当前人数。以下是该查询语句的各个部分解释：\n\n1. `select 人数分布表.num as 人数`：选择名为\"num\"的字段作为结果中的\"人数\"字段。\n2. `from a_people_spread_day_building as 人数分布表`：指定数据来源，即\"a_people_spread_day_building\"这张表，并为其起了一个别名\"人数分布表\"以便后续使用。\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`：限制条件，只选择在过去5小时内更新的数据（以小时为单位计算的时间差小于5）。\n4. `and 人数分布表.building_name='行政与师生服务中心'`：筛选条件，只选择\"行政与师生服务中心\"的数据。\n5. `and 人数分布表.region_name='高新校区'`：筛选条件，只选择\"高新校区\"的数据。\n6. `and 人数分布表.org_name='中国科学技术大学'`：筛选条件，只选择\"中国科学技术大学\"的数据。\n7. `order by 人数分布表.stat_time desc`：排序条件，按照\"统计时间\"降序排列（即最新的数据排在最前面）。\n8. `limit 1`：限制返回的结果数量，只返回一条记录。"
    },
    {
        "query": "信智楼哪些地方安装了摄像头",
        "script": "```sql\nselect 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' order by 摄像头表.id asc limit 1000;\n```\n这是一个SQL查询语句，用于从多个关联表中检索安装在特定位置的摄像头信息。以下是各个部分的具体解释：\n\n1. `select 摄像头表.id as 摄像头编号, 摄像头表.ip as IP地址, 房间表.room_name as 安装位置`：这是查询结果中的列，分别表示摄像头的编号、IP地址以及安装位置（即所属房间）。\n\n2. `from s_camera as 摄像头表`：指定查询的源表，即摄像头信息表。\n\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`：这是一条联接（JOIN）语句，将摄像头表与房间表进行联接。其中，`on 摄像头表.pid=房间表.id` 是联接条件，表示一个摄像头对应一个房间。\n\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`：这是另一条联接语句，将房间表与楼栋表进行联接。同样，联接条件是 `on 房间表.pid=楼栋表.id`，表示每个房间属于一个楼栋。\n\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`：这是第三条联接语句，将楼栋表与区域表进行联接。联接条件是 `on 楼栋表.pid=区域表.id`，表示每个楼栋位于一个区域。\n\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`：这是第四条联接语句，将区域表与单位表进行联接。联接条件是 `on 区域表.pid=单位表.id`，表示每个区域隶属于一个单位（如学校或公司）。\n\n7. `where 楼栋表.building_name='信智楼' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`：这是查询条件，只返回满足这些条件的摄像头信息，即位于“信智楼”、“高新校区”且隶属于“中国科学技术大学”的摄像头。\n\n8. `order by 摄像头表.id asc limit 1000`：这是排序和限制返回结果的语句。`order by 摄像头表.id asc` 表示按摄像头编号从小到大排序，`limit 1000` 表示只返回前1000条记录。"
    },
    {
        "query": "统计信智楼每天最多人数",
        "script": "```sql\nselect min(人数分布表.stat_time) as 统计时间, round(max(人数分布表.num)) as 平均人数 from a_people_spread_day_building as 人数分布表 WHERE 人数分布表.building_name='信智楼' and DATEDIFF(now(), 人数分布表.stat_time) < 30 and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' group by 人数分布表.stat_day order by min(人数分布表.stat_time) asc ;\n```\n这是一个SQL查询语句，用于从数据库中获取“信智楼”（a_people_spread_day_building表的building_name字段值）在最近30天内每天的最大人数。以下是各部分的解释：\n\n1. `select min(人数分布表.stat_time) as 统计时间`: 选择每天的最早时间点作为该天的统计时间。\n2. `round(max(人数分布表.num)) as 平均人数`: 计算并保留每位数的每天的最大人数。\n3. `FROM a_people_spread_day_building as 人数分布表`: 从a_people_spread_day_building表中选取数据。\n4. `WHERE 人数分布表.building_name='信智楼'`: 过滤出\"信智楼\"的数据。\n5. `and DATEDIFF(now(), 人数分布表.stat_time) < 30`: 只选择在过去30天内的数据。\n6. `and 人数分布表.region_name='高新校区'`: 过滤出位于\"高新校区\"的数据。\n7. `and 人数分布表.org_name='中国科学技术大学'`: 过滤出属于\"中国科学技术大学\"的数据。\n8. `group by 人数分布表.stat_day`: 按日期分组统计数据。\n9. `order by min(人数分布表.stat_time) asc`: 对统计时间进行升序排列。"
    },
    {
        "query": "告诉我现在高新校区室外有多少人",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='高新校区室外' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一个SQL查询语句。它用于从数据库中检索特定条件下的数据。以下是查询的详细解释：\n\n1. `SELECT 人数分布表.num AS 人数`: 从`a_people_spread_day_building`表中选择名为`num`的字段，并将其作为查询结果中的`人数`字段返回。\n\n2. `FROM 人数分布表`: 定义查询数据的来源，这里是`a_people_spread_day_building`表。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 限制查询结果的条件之一是，统计时间（`stat_time`）与当前时间的小时差小于5小时。这个条件确保只返回最近5小时内的数据。\n\n4. `AND 人数分布表.building_name='高新校区室外'`: 限制查询结果的另一个条件是，建筑名称（`building_name`）等于“高新校区室外”。这个条件确保只返回高新校区室外的数据。\n\n5. `AND 人数分布表.region_name='高新校区'`: 同上，限制查询结果的另一个条件是，区域名称（`region_name`）等于“高新校区”。\n\n6. `AND 人数分布表.org_name='中国科学技术大学'`: 同上，限制查询结果的另一个条件是，组织名称（`org_name`）等于“中国科学技术大学”。\n\n7. `ORDER BY 人数分布表.stat_time DESC`: 对查询结果按照统计时间（`stat_time`）降序排列，即最近的记录排在最前面。\n\n8. `LIMIT 1`: 限制查询结果的数量，这里只返回一条记录。"
    },
    {
        "query": "给出教工食堂安装的摄像头数量",
        "script": "```sql\nselect count(*) as 摄像头数量 from s_camera as 摄像头表  join s_room as 房间表 on 摄像头表.pid=房间表.id join s_building as 楼栋表 on 房间表.pid=楼栋表.id  join s_region as 区域表 on 楼栋表.pid=区域表.id  join s_organization as 单位表 on 区域表.pid=单位表.id where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学' ;\n```\n这是一个 SQL（结构化查询语言）语句，用于计算“教工食堂”的摄像头数量。以下是该SQL语句的详细解释：\n\n1. `select count(*) as 摄像头数量`: 选择计数函数 `count(*)` 作为结果集，将结果命名为 \"摄像头数量\"。\n2. `from s_camera as 摄像头表`: 从名为 \"s_camera\" 的摄像头表中获取数据。\n3. `join s_room as 房间表 on 摄像头表.pid=房间表.id`: 连接摄像头表和房间表，条件是摄像头表的 `pid` 等于房间表的 `id`。\n4. `join s_building as 楼栋表 on 房间表.pid=楼栋表.id`: 连接房间表和楼栋表，条件是房间表的 `pid` 等于楼栋表的 `id`。\n5. `join s_region as 区域表 on 楼栋表.pid=区域表.id`: 连接楼栋表和区域表，条件是楼栋表的 `pid` 等于区域表的 `id`。\n6. `join s_organization as 单位表 on 区域表.pid=单位表.id`: 连接区域表和单位表，条件是区域表的 `pid` 等于单位表的 `id`。\n7. `where 楼栋表.building_name='教工食堂' and 区域表.region_name='高新校区' and 单位表.org_name='中国科学技术大学'`: 根据条件筛选出记录，即要求楼栋名称是 \"教工食堂\"、区域名称为 \"高新校区\"，且单位为 \"中国科学技术大学\"。\n\n这个SQL语句的目的是统计在特定条件下（教工食堂、高新校区和中科大）的摄像头数量。"
    },
    {
        "query": "学生食堂的人数是多少？",
        "script": "```sql\nselect 人数分布表.num as 人数 from a_people_spread_day_building as 人数分布表 WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5      and 人数分布表.building_name='学生食堂' and 人数分布表.region_name='高新校区' and 人数分布表.org_name='中国科学技术大学' order by 人数分布表.stat_time desc  limit 1;\n```\n这是一段SQL查询语句，用于从数据库中获取\"学生食堂\"在特定时间段内的人数。具体解释如下：\n\n1. `select 人数分布表.num as 人数`: 从`人数分布表`中选择名为`num`的列并将其重命名为`人数`。\n\n2. `from a_people_spread_day_building as 人数分布表`: 指定数据来源是名为`a_people_spread_day_building`的表，并将其简写为`人数分布表`。\n\n3. `WHERE TIMESTAMPDIFF(HOUR, 人数分布表.stat_time, now()) < 5`: 设置时间条件，只返回过去5小时内的数据。\n\n4. `and 人数分布表.building_name='学生食堂'`: 设置食堂名称条件，只返回名为\"学生食堂\"的数据。\n\n5. `and 人数分布表.region_name='高新校区'`: 设置校区条件，只返回位于\"高新校区\"的数据。\n\n6. `and 人数分布表.org_name='中国科学技术大学'`: 设置学校条件，只返回属于\"中国科学技术大学\"的数据。\n\n7. `order by 人数分布表.stat_time desc`: 按照统计时间的降序排列数据。\n\n8. `limit 1`: 限制返回的数据数量为1条，即最近一次记录。"
    }
]